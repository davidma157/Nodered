[
    {
        "id": "57111ca025f638be",
        "type": "tab",
        "label": "Gestion des devices",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "797d9b2a7151f089",
        "type": "tab",
        "label": "I/O to serial",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "8c02b6694634723d",
        "type": "tab",
        "label": "Maintenance",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f178d5dee9c95e1e",
        "type": "tab",
        "label": "Gestion BD",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a9c9090b.478498",
        "type": "tab",
        "label": "Experience",
        "disabled": false,
        "info": ""
    },
    {
        "id": "ec6678ccf32cce98",
        "type": "tab",
        "label": "Backup",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "aaaa9485612d7317",
        "type": "tab",
        "label": "Flux 5",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "9ecbde4ebaa691ad",
        "type": "tab",
        "label": "Flux 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "bc1a8754bbd79fc2",
        "type": "subflow",
        "name": "Map Device",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 100,
                "wires": [
                    {
                        "id": "3efda58226d49848"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 360,
                "y": 100,
                "wires": [
                    {
                        "id": "3efda58226d49848",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#C7E9C0",
        "icon": "font-awesome/fa-chevron-right",
        "status": {
            "x": 340,
            "y": 40,
            "wires": [
                {
                    "id": "3efda58226d49848",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "d770df178aec257a",
        "type": "subflow",
        "name": "Log system",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 90,
                "y": 100,
                "wires": [
                    {
                        "id": "b31b0a5f27849638"
                    }
                ]
            }
        ],
        "out": [],
        "env": [
            {
                "name": "logSystem",
                "type": "str",
                "value": "/home/pi-md/log/system.log"
            }
        ],
        "meta": {},
        "color": "#C7E9C0",
        "icon": "font-awesome/fa-database",
        "status": {
            "x": 90,
            "y": 280,
            "wires": []
        }
    },
    {
        "id": "792784e9fde6f3b4",
        "type": "subflow",
        "name": "Startup",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 130,
                "y": 90,
                "wires": [
                    {
                        "id": "558c815598a824f2"
                    },
                    {
                        "id": "2db0904064c210ba"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 710,
                "y": 140,
                "wires": [
                    {
                        "id": "bf505fe71b57ccd7",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#C7E9C0",
        "icon": "node-red/link-out.svg"
    },
    {
        "id": "82315bf5181c153a",
        "type": "group",
        "z": "f178d5dee9c95e1e",
        "name": "Ménage SENSOR_TEMPERATURE",
        "style": {
            "fill": "#ffffbf",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "798ffc9e016269b2",
            "d54da9e0b749cd05",
            "bdde4536ecd2cd3b",
            "bde4a4eb4ecc2c4b",
            "0814428a1abfd17a",
            "453ffd1c35c1e04b",
            "12915a94e841aa51",
            "4aa2a4f5c888b257",
            "ccfde0c94ee7c74c",
            "719f22c2cd97bccb",
            "36fe564307c47f87",
            "401aeaa9442abd6e",
            "e15536583e9491fc",
            "69e746f64c3d00bd"
        ],
        "x": 34,
        "y": 19,
        "w": 1012,
        "h": 292
    },
    {
        "id": "f6ba6aa35208baae",
        "type": "group",
        "z": "57111ca025f638be",
        "name": "Données globales",
        "style": {
            "label": true,
            "color": "#0070c0",
            "fill": "#ffcf3f"
        },
        "nodes": [
            "fde5194a774e0236",
            "0ca0d73d6c97fd4e",
            "09b6ad2a2bf86dc1",
            "6ffc190a90909afc",
            "95bfa0ba0ca08529",
            "75fb2eb7f4ea83be",
            "933c6183c294acd4",
            "8e085f8f049550ac",
            "abbcf13b0652a794",
            "aecd825fcf9a94de",
            "42e44c3404350309",
            "fa06f329ce0a3c15",
            "287024651fc3c04b"
        ],
        "x": 24,
        "y": 19,
        "w": 1052,
        "h": 358
    },
    {
        "id": "5006285fb7392326",
        "type": "group",
        "z": "57111ca025f638be",
        "name": "Réception des données",
        "style": {
            "label": true,
            "color": "#000000",
            "fill": "#b797cf"
        },
        "nodes": [
            "f53bba5e293da6fb",
            "590af8aa1ccb96c4"
        ],
        "x": 28,
        "y": 413,
        "w": 1234,
        "h": 394
    },
    {
        "id": "ac3db6b9ccb43199",
        "type": "group",
        "z": "57111ca025f638be",
        "name": "Catch erreurs",
        "style": {
            "label": true,
            "color": "#000000",
            "fill": "#ffbfbf"
        },
        "nodes": [
            "80973421c6f485ce",
            "3302394b3b687c42"
        ],
        "x": 24,
        "y": 4559,
        "w": 432,
        "h": 82
    },
    {
        "id": "36653046b6da3c92",
        "type": "group",
        "z": "57111ca025f638be",
        "name": "Statuts d'activités",
        "style": {
            "label": true,
            "color": "#0070c0"
        },
        "nodes": [
            "c915ea2a8227a672",
            "33de13a0cbc96465",
            "bc77bc47e5d767ee",
            "b0c9163b98018ad6",
            "bdb9a365e5db2244",
            "eb953df028913fcc",
            "b1961cc8c9a46d65",
            "0abc6f79ff08bbc4",
            "5180a561ec14a9ed",
            "a664ec23f24b83a5",
            "cda512180b8c3b67"
        ],
        "x": 34,
        "y": 3769,
        "w": 702,
        "h": 292
    },
    {
        "id": "adca6ef2dfcba80e",
        "type": "group",
        "z": "57111ca025f638be",
        "name": "Réception des requêtes du gateway",
        "style": {
            "label": true,
            "color": "#0070c0"
        },
        "nodes": [
            "56d1fae213c30e8a",
            "ed0e40f994ac39b6",
            "e81fca2d98b5ccc7",
            "540255522bc77ebb",
            "c1a2983aa0ad8848",
            "9ee742908744f209"
        ],
        "x": 24,
        "y": 4079,
        "w": 932,
        "h": 142
    },
    {
        "id": "49aed5c6020fd230",
        "type": "group",
        "z": "a9c9090b.478498",
        "name": "UI - Test",
        "style": {
            "label": true,
            "fill": "#bfdbef",
            "color": "#001f60"
        },
        "nodes": [
            "7f206d7175eeb9c6",
            "db981d4c910296e4",
            "50cc735154d103a3",
            "987a44bd9a6154e7",
            "b73ee2792d4f5473",
            "47f5073909bee0a2"
        ],
        "x": 54,
        "y": 9,
        "w": 642,
        "h": 262
    },
    {
        "id": "e9631b841926facf",
        "type": "group",
        "z": "57111ca025f638be",
        "name": "Configuration des devices",
        "style": {
            "fill": "#bfdbef",
            "fill-opacity": "0.66",
            "label": true
        },
        "nodes": [
            "c123dda748f0409f",
            "2a7669fef789d1e6",
            "a5b04cf60d670697"
        ],
        "x": 18,
        "y": 893,
        "w": 1280,
        "h": 1434
    },
    {
        "id": "b3735df348adb38e",
        "type": "group",
        "z": "57111ca025f638be",
        "name": "Surveillance réception données des sensors",
        "style": {
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "8f34a61029fac0cb",
            "577fd00e89cbfbe3",
            "88e67d8f05a4d9a5",
            "49a66220910d81ef",
            "4970576a104ab876",
            "568e97383e4285fa",
            "53915f2f274e75b9"
        ],
        "x": 34,
        "y": 3329,
        "w": 942,
        "h": 132
    },
    {
        "id": "4ac0d347446e702f",
        "type": "group",
        "z": "57111ca025f638be",
        "name": "Chart temperature",
        "style": {
            "fill": "#ffefbf",
            "label": true,
            "stroke": "#000000",
            "color": "#000000"
        },
        "nodes": [
            "91ced026339a3eeb",
            "1c2e8d33bf43083e",
            "f138d867ef859cef",
            "caa469a26973d9d2",
            "aa76751f0c815d88",
            "388cb232c9079e14",
            "28c5da6a4d2da8ba",
            "98e8f77ab6b80fce",
            "836e4535583ce900",
            "0a4b76749339d8cd",
            "ea6fbc3a9d80e6ea",
            "fdcf63160f9713c2",
            "e0694b109915343b",
            "0866c283bc7f9752",
            "31e656b176aa6f36",
            "6c48e35750a5c6be",
            "5079e04311e50d49",
            "5b762b2b39d0624e",
            "a3b3a725a704ea19",
            "25c84611b53c2c6f",
            "4e9d0c5c6bb4c0f6",
            "64d643221c0ebd2a",
            "de104099b772919d",
            "e982725746f62c93",
            "e36536a63d419b95",
            "59157c73ba907ed4",
            "6e21b41b46590719",
            "a48ddca16eceb0d9",
            "0f3b19615d2461dc",
            "d3626a9698f6ee89",
            "3f82e6aed13c8507",
            "1301edfe0f59a0b1",
            "50bc4f6c5feac4f8",
            "a7888e8a0576cd47"
        ],
        "x": 24,
        "y": 2839,
        "w": 1342,
        "h": 382
    },
    {
        "id": "39f5d1f224b9de66",
        "type": "group",
        "z": "f178d5dee9c95e1e",
        "name": "Ménage TEMPERATURE externe",
        "style": {
            "fill": "#ffffbf",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "fab8a6f816b520df",
            "c044209948e618c4",
            "8672f704d063ce96",
            "f42a210a627d4892",
            "fbf0991c6a35cb15",
            "f47d039d1dd75fac",
            "ac605ca570a82bf0",
            "8305de33a78a638d",
            "f75951de629e39ef",
            "3fe8d56b817b414a",
            "513935f0533c6b43",
            "930fd420dc0bc27a",
            "d8158d9f04711bf9"
        ],
        "x": 34,
        "y": 329,
        "w": 862,
        "h": 272
    },
    {
        "id": "99b0856dd2e01ab4",
        "type": "group",
        "z": "57111ca025f638be",
        "name": "Configuration du Gateway",
        "style": {
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "0c97012507b7fb6d",
            "2b47b1be61752b81",
            "65ebe7cecc4ac2d8",
            "5826ad71ca8be439",
            "469cc2e3af8f2112",
            "fcfe77fc8451fbb3"
        ],
        "x": 34,
        "y": 4249,
        "w": 942,
        "h": 132
    },
    {
        "id": "73a1234c821730ec",
        "type": "group",
        "z": "797d9b2a7151f089",
        "name": "Réception/transmission des données via port série/MQTT",
        "style": {
            "label": true,
            "fill": "#c8e7a7",
            "color": "#001f60"
        },
        "nodes": [
            "fa8d72ad90e71a48",
            "d0932bcd6a5ec1f6"
        ],
        "x": 22,
        "y": 23,
        "w": 952,
        "h": 684,
        "info": "# Redirection des donnnées\r\n## Message entrant sur le port série\r\n - On vérifie si les données commence par @\r\n - Si non , on rejette le messge.\r\n - Si oui, on extrait le topic pour l'envoyer vers MQTT.\r\n"
    },
    {
        "id": "e53915e26e2f69d5",
        "type": "group",
        "z": "797d9b2a7151f089",
        "name": "Catch erreurs",
        "style": {
            "label": true,
            "color": "#000000",
            "fill": "#ffbfbf"
        },
        "nodes": [
            "b07bf152a6d21710",
            "c2a5a48d61080e22"
        ],
        "x": 44,
        "y": 1559,
        "w": 422,
        "h": 82
    },
    {
        "id": "1be746086bdfe3c5",
        "type": "group",
        "z": "797d9b2a7151f089",
        "name": "Statut  dashboard",
        "style": {
            "stroke": "#001f60",
            "label": true,
            "color": "#ff3f3f",
            "fill": "#ffefbf"
        },
        "nodes": [
            "5d89e93885229fe1",
            "8feba00f9cb9532b",
            "70160f0a7636882f"
        ],
        "x": 28,
        "y": 753,
        "w": 1054,
        "h": 794
    },
    {
        "id": "2ff47af73d8a3d20",
        "type": "group",
        "z": "57111ca025f638be",
        "name": "Sensor messages",
        "style": {
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "72f534142f1ef687",
            "3e8251f62ce3c3c7",
            "97c2bcd44f43299c",
            "bd481b8dd3e88e7d",
            "8d1c099b642472fa",
            "f37c33f5cc57547c",
            "a147248bb7549068",
            "ee416b1f0f20e4d8",
            "b46d7561a233fae7",
            "ba7bd09e9170283f",
            "ed7c07d39dda883d",
            "f91b976e245dae35",
            "33e27730c229d679",
            "e168397444a4efa5"
        ],
        "x": 34,
        "y": 3539,
        "w": 1092,
        "h": 212
    },
    {
        "id": "587ef4eef498a3b8",
        "type": "group",
        "z": "57111ca025f638be",
        "name": "UI-Event",
        "style": {
            "label": true,
            "fill": "#ffbfbf",
            "stroke": "#000000",
            "color": "#001f60"
        },
        "nodes": [
            "605ccf88af3850e5",
            "70beddcc675e5f7b",
            "b3720395df4a02fa"
        ],
        "x": 34,
        "y": 4419,
        "w": 342,
        "h": 122
    },
    {
        "id": "37395d53ca3ec675",
        "type": "group",
        "z": "8c02b6694634723d",
        "name": "A revoir --- Backup de la base de données",
        "style": {
            "label": true,
            "stroke": "#000000",
            "fill": "#ffffbf",
            "color": "#000000"
        },
        "nodes": [
            "836f1c5e6a99b853"
        ],
        "x": 58,
        "y": 193,
        "w": 844,
        "h": 224
    },
    {
        "id": "066292f6cf9cbfbf",
        "type": "group",
        "z": "8c02b6694634723d",
        "name": "Redémarrage RPI",
        "style": {
            "stroke": "#000000",
            "fill": "#ffdf7f",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "285f01bc26e7389b",
            "b8a01e4d889f9ee9"
        ],
        "x": 54,
        "y": 59,
        "w": 402,
        "h": 82
    },
    {
        "id": "32755367b37500ea",
        "type": "group",
        "z": "8c02b6694634723d",
        "name": "Backup BD",
        "style": {
            "stroke": "#000000",
            "fill": "#c8e7a7",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "6549eeb2ee54469e",
            "a00b7f1773b75f0d",
            "d7464cc80855fbd1",
            "43051fac9db47469",
            "544099c20ffe1462",
            "a4c2ec9c436689c4",
            "7a81c3381e392550",
            "0cb004ace0eed48d",
            "355a62cb5ec1c3f7",
            "3c9152fcedecb5d3",
            "ddbf68cc2831b078",
            "d395a6c415a67023",
            "997bea237d58c378",
            "db5638e57c00e678",
            "41855605fb91a00e",
            "a77a1fd598ea37f3",
            "363e4e7cfed7fbdd",
            "b21a80440cfc98d5",
            "0eaa724239370bca",
            "47a1113ec0ec1e9b"
        ],
        "x": 34,
        "y": 529,
        "w": 1282,
        "h": 332
    },
    {
        "id": "b3bc735139a25964",
        "type": "group",
        "z": "57111ca025f638be",
        "name": "Gestion des locations",
        "style": {
            "stroke": "#000000",
            "fill": "#bfdbef",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "ab77190a3b0808c4",
            "81b7abe7ef0bf324",
            "b6d93e5a518a187d",
            "9634bf9c54bb399b",
            "856c396f768b3a3e",
            "f3d03b63fe4b9a42",
            "5608a799bbeed99a",
            "35ee81ec83130591",
            "f17a5db9540691db",
            "fc7b275d96271630",
            "d398c2685f10751f",
            "25b3fec436e514e5",
            "5e9fb9b860e186cb",
            "b09a6baa4d77fc24",
            "1967c0792ce84596"
        ],
        "x": 34,
        "y": 2429,
        "w": 1172,
        "h": 358
    },
    {
        "id": "d186a865f8290820",
        "type": "group",
        "z": "a9c9090b.478498",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "993a1d17b68cf824",
            "33160e7dad384fd2",
            "7be8e9a5f812950b",
            "355572eae47bb5b8",
            "ecbccd54980ecba4",
            "67442326259348aa",
            "9d011191721fd81a",
            "6079638d.df403c",
            "87129503.c7b358",
            "5e2ffc27.c61dd4",
            "2dc49f96.3070c",
            "03409f4c678bf6af"
        ],
        "x": 44,
        "y": 1529,
        "w": 932,
        "h": 242
    },
    {
        "id": "dfaa0e84286af4c3",
        "type": "group",
        "z": "ec6678ccf32cce98",
        "name": "",
        "style": {
            "fill": "#bfdbef",
            "label": true
        },
        "nodes": [
            "4389fdd1091783d4",
            "8243b44d05178527",
            "43c18597783c3def",
            "836dfbcc857f6e1b",
            "0beb5ac9e1a01e39",
            "fb3df188fb17ca18",
            "2747294b54d3638e",
            "14aece7b990ed601",
            "33aac660f2f2aaf2",
            "5281a6741f7934e9"
        ],
        "x": 94,
        "y": 89,
        "w": 1148,
        "h": 578
    },
    {
        "id": "f53bba5e293da6fb",
        "type": "group",
        "z": "57111ca025f638be",
        "g": "5006285fb7392326",
        "name": "Météo externe",
        "style": {
            "stroke": "#ffefbf",
            "label": true,
            "color": "#000000",
            "fill": "#dbcbe7"
        },
        "nodes": [
            "438ddc13e515c438",
            "bed8c9ea7fe6b13c",
            "0bd7f81e66d83a2a",
            "562a0ef8b0073349",
            "b5fb53396f247251"
        ],
        "x": 64,
        "y": 699,
        "w": 872,
        "h": 82
    },
    {
        "id": "590af8aa1ccb96c4",
        "type": "group",
        "z": "57111ca025f638be",
        "g": "5006285fb7392326",
        "name": "Insertion données température",
        "style": {
            "fill": "#dbcbe7",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "1b2663185a65a48f",
            "976b9e48f9690a8d",
            "c8184d1d79bb29dc",
            "7b299ba00a6589b0",
            "4b60c0e64f93d254",
            "92d3ed46ab95f44f",
            "c999883d7b694976",
            "2fa7d3a1d07ea7f0",
            "97610149c73699c4",
            "e4aecc6f336ce4bc",
            "8244db89f6963d09",
            "2174f125045eff9a",
            "7e16302c92c374f6",
            "e57ce7fb3618696f",
            "63fc615bfac2e331",
            "f73f445ee8c747ad"
        ],
        "x": 54,
        "y": 439,
        "w": 1182,
        "h": 222
    },
    {
        "id": "c123dda748f0409f",
        "type": "group",
        "z": "57111ca025f638be",
        "g": "e9631b841926facf",
        "name": "UI - Transmission configuration au sensor",
        "style": {
            "label": true,
            "fill": "#bfdbef",
            "color": "#001f60"
        },
        "nodes": [
            "e3b58894b8cc6969",
            "c3a5d758adbd3593",
            "93c3099696fe4e85",
            "c165aa64f3896b8e",
            "975b275b647b8632",
            "19e3a771f9e0137c",
            "1889b9b8d90b705d"
        ],
        "x": 44,
        "y": 2169,
        "w": 1032,
        "h": 132
    },
    {
        "id": "fa8d72ad90e71a48",
        "type": "group",
        "z": "797d9b2a7151f089",
        "g": "73a1234c821730ec",
        "name": "Transmission du port série vers MQTT - Logger",
        "style": {
            "label": true,
            "fill": "#e3f3d3",
            "color": "#000000"
        },
        "nodes": [
            "da939ff73faa3d33",
            "16071ac81dfe26dd",
            "edba9caae115a851",
            "51ee3605ff9d80e0",
            "41e9b0574e55c0c8",
            "76b97aaea830e452",
            "beefa0c6950593db",
            "9bef50d59cc9996a",
            "16e678c55b9af1c2"
        ],
        "x": 48,
        "y": 49,
        "w": 900,
        "h": 474
    },
    {
        "id": "d0932bcd6a5ec1f6",
        "type": "group",
        "z": "797d9b2a7151f089",
        "g": "73a1234c821730ec",
        "name": "Transmission du MQTT vers port série",
        "style": {
            "fill": "#e3f3d3",
            "label": true,
            "color": "#001f60"
        },
        "nodes": [
            "d2b39a2251d4d124",
            "848f84e24987bc2f",
            "4aafe259275fd99f",
            "7a1a4351ec72b9b3",
            "e27a25756c4ae984"
        ],
        "x": 64,
        "y": 559,
        "w": 752,
        "h": 122
    },
    {
        "id": "5d89e93885229fe1",
        "type": "group",
        "z": "797d9b2a7151f089",
        "g": "1be746086bdfe3c5",
        "name": "Gateway messages",
        "style": {
            "label": true
        },
        "nodes": [
            "68020bb809a9d64b",
            "01804589863ba34e",
            "558eb47c0c8cd19f",
            "9bb6a0be709aef65",
            "d23177f02750759c",
            "0bdbc43f27e4bb08",
            "a2df31a6143f0148",
            "60d4bb2262ebf375",
            "27d79d1a4af37e13",
            "c1c1ebd04c6e798e",
            "4805c368e2c34a0c",
            "b261acdf1fd36081",
            "2105846b8c12cb48",
            "8023d15b2d55ccda"
        ],
        "x": 54,
        "y": 1269,
        "w": 1002,
        "h": 252
    },
    {
        "id": "8feba00f9cb9532b",
        "type": "group",
        "z": "797d9b2a7151f089",
        "g": "1be746086bdfe3c5",
        "name": "Statut port série",
        "style": {
            "label": true
        },
        "nodes": [
            "1784ee5849a07738",
            "44e59e8574df7bf8",
            "526010976c842e2c",
            "0cbbba078e7506a7"
        ],
        "x": 54,
        "y": 1119,
        "w": 622,
        "h": 122
    },
    {
        "id": "70160f0a7636882f",
        "type": "group",
        "z": "797d9b2a7151f089",
        "g": "1be746086bdfe3c5",
        "name": "Statut MQTT ",
        "style": {
            "label": true
        },
        "nodes": [
            "0efe0dc629d83c81",
            "375f5d90204152ea",
            "037ff0d4ccce8f8a",
            "d95bc61b71d72cb2",
            "441a41af679a65f8",
            "0f27b5b866c9b4a4",
            "5426475307091e39",
            "e1f758553dcda8db",
            "2298e5a1f57713dc",
            "8064670dc96dfa2d",
            "4e4b504034ad202f"
        ],
        "x": 54,
        "y": 779,
        "w": 868,
        "h": 328,
        "info": "# Description\r\n\r\n## Vérifier statut\r\nSi le statut change un message sera émis.\r\n\r\n## Redémarrer Mosquitto\r\nSi le statut n'est pas Connecté un redémarrage de Mosquitto sera exécuté."
    },
    {
        "id": "abbcf13b0652a794",
        "type": "group",
        "z": "57111ca025f638be",
        "g": "f6ba6aa35208baae",
        "name": "Rafraichit la liste des devices en mémoire",
        "style": {
            "label": true,
            "color": "#0070c0",
            "stroke": "#0070c0",
            "fill": "#ffffbf"
        },
        "nodes": [
            "1559f9fd4805b155",
            "5185ef5d8d8f239a",
            "a64ce37c329514c8",
            "79e281a2bc6e4e81",
            "5e2d481f338e5d45",
            "892a6d47089017b7",
            "f8df29dd84233a42"
        ],
        "x": 84,
        "y": 209,
        "w": 792,
        "h": 142,
        "info": " - Device: Circuit du micro-contrôleur"
    },
    {
        "id": "836f1c5e6a99b853",
        "type": "group",
        "z": "8c02b6694634723d",
        "g": "37395d53ca3ec675",
        "name": "Syslog",
        "style": {
            "label": true,
            "fill": "#ffffbf"
        },
        "nodes": [
            "798c8432df02e379",
            "1f65d9d6029c1383",
            "e9d695451b8cd4d1",
            "267b2d2e30b9fb61",
            "f71406035e082c3c",
            "80653104c09f9d63",
            "bd7fea0d471990a7"
        ],
        "x": 84,
        "y": 219,
        "w": 792,
        "h": 172
    },
    {
        "id": "2a7669fef789d1e6",
        "type": "group",
        "z": "57111ca025f638be",
        "g": "e9631b841926facf",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "bd3f3c3479cd419d",
            "f18c5b191d337944",
            "91a754628498f090",
            "d799edabaaf35113",
            "334fedd962dcc812",
            "e114f876591ccfa1",
            "34bfc8c76f04a6d5"
        ],
        "x": 54,
        "y": 919,
        "w": 632,
        "h": 162
    },
    {
        "id": "5e9fb9b860e186cb",
        "type": "group",
        "z": "57111ca025f638be",
        "g": "b3bc735139a25964",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "1c35333634deee1a",
            "481a8eb90c6cde12",
            "43842296b811a69a",
            "334518f9a3137cbf",
            "05ef91dab51f8089",
            "d416c8d3c0518720",
            "d3cc20dda634a4b0",
            "335768bf124d0394"
        ],
        "x": 284,
        "y": 2609,
        "w": 782,
        "h": 152
    },
    {
        "id": "fb3df188fb17ca18",
        "type": "group",
        "z": "ec6678ccf32cce98",
        "g": "dfaa0e84286af4c3",
        "name": "Device",
        "style": {
            "stroke": "#000000",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "94a25f5f0f5bbf85",
            "05ca023428f3e56d",
            "c4e724fa73826a50",
            "3769bcc99dded902",
            "684ea77c83d9bbdd"
        ],
        "x": 384,
        "y": 129,
        "w": 482,
        "h": 132
    },
    {
        "id": "2747294b54d3638e",
        "type": "group",
        "z": "ec6678ccf32cce98",
        "g": "dfaa0e84286af4c3",
        "name": "Sensor",
        "style": {
            "stroke": "#000000",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "64aab75dcd444ffc",
            "28ac10ee8cd542e9",
            "1ef6f5d174974bb6",
            "e1085faa4c4230a7",
            "52ab5441b29220e9",
            "563615fee670206d",
            "5b31bf3dedcd5291",
            "3ffa0607e4012b62"
        ],
        "x": 384,
        "y": 269,
        "w": 582,
        "h": 182
    },
    {
        "id": "14aece7b990ed601",
        "type": "group",
        "z": "ec6678ccf32cce98",
        "g": "dfaa0e84286af4c3",
        "name": "Attribut",
        "style": {
            "stroke": "#000000",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "e1a553834b10e213",
            "a865f2936640d964",
            "9438a863f991294a",
            "7d807c553d8cc4f8",
            "12e9604421c4d5b1",
            "8016eb6039e164b2",
            "e3e138d6a224ed69",
            "1660a5a757851231"
        ],
        "x": 384,
        "y": 459,
        "w": 582,
        "h": 182
    },
    {
        "id": "33aac660f2f2aaf2",
        "type": "group",
        "z": "ec6678ccf32cce98",
        "g": "dfaa0e84286af4c3",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "842a98af577b1697",
            "bcfdd06c8e9bf4bf",
            "c019c31104c9e3fb"
        ],
        "x": 974,
        "y": 379,
        "w": 242,
        "h": 132
    },
    {
        "id": "a5b04cf60d670697",
        "type": "group",
        "z": "57111ca025f638be",
        "g": "e9631b841926facf",
        "name": "Configuration",
        "style": {
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "b0ed271801ea7e6e",
            "111103eaa0204252",
            "64c4ac8396d7f0f4",
            "2a792d039db9cefd",
            "4accc712270537ef",
            "b0ba40e0b297f67d",
            "fa7f14bdbb3856df",
            "e35ebe091943e2a7",
            "4b27a81d9d07a115",
            "29a7a4f1fa7aa70e",
            "457086935cb6673a",
            "4b59343b5845de12",
            "b98212ab05e58762",
            "34394aded35a14f7",
            "90a076f3b5779d84",
            "71f803b13863282d",
            "15b6652e285ff285"
        ],
        "x": 54,
        "y": 1113,
        "w": 1218,
        "h": 1014
    },
    {
        "id": "beefa0c6950593db",
        "type": "group",
        "z": "797d9b2a7151f089",
        "g": "fa8d72ad90e71a48",
        "name": "Gestion fichier LOG",
        "style": {
            "label": true
        },
        "nodes": [
            "855c0e1ea702f2cf",
            "b4133a029132e1bc",
            "f1f19a0d827e452e",
            "2b905ff025d2f0a9",
            "869ebc417f12da40"
        ],
        "x": 74,
        "y": 251.5,
        "w": 848,
        "h": 245.5
    },
    {
        "id": "5426475307091e39",
        "type": "group",
        "z": "797d9b2a7151f089",
        "g": "70160f0a7636882f",
        "name": "Redémarrer Mosquitto",
        "style": {
            "label": true
        },
        "nodes": [
            "b06e8d799cfe5b7e",
            "1e15606728d3ede4",
            "3f153da6282bee3d",
            "93ac05f20fb98b77"
        ],
        "x": 254,
        "y": 959,
        "w": 642,
        "h": 122
    },
    {
        "id": "b0ed271801ea7e6e",
        "type": "group",
        "z": "57111ca025f638be",
        "g": "a5b04cf60d670697",
        "name": "Insert Attributs",
        "style": {
            "stroke": "#000000",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "7fc6273e8dc78f81",
            "e37c4f7cb86c4dce",
            "6c9f7c455b93752f",
            "c83f16133216d0cf",
            "3e8337de3279a6e3"
        ],
        "x": 504,
        "y": 1959,
        "w": 742,
        "h": 142
    },
    {
        "id": "111103eaa0204252",
        "type": "group",
        "z": "57111ca025f638be",
        "g": "a5b04cf60d670697",
        "name": "Device",
        "style": {
            "stroke": "#000000",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "7b9d61eb6156dccd",
            "540cfc2a38c73116",
            "92f799c2f6ba50c6",
            "e6693411bb4faea5",
            "25b2bcf42a64aea2",
            "c754a60ba19efacd",
            "78c16118d6e14e7b",
            "c3d58f8e5bca1066",
            "1ed5aa676c941167"
        ],
        "x": 514,
        "y": 1139,
        "w": 712,
        "h": 172
    },
    {
        "id": "64c4ac8396d7f0f4",
        "type": "group",
        "z": "57111ca025f638be",
        "g": "a5b04cf60d670697",
        "name": "Update",
        "style": {
            "stroke": "#000000",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "8ea9a28d16829721",
            "59413bdba1203faa",
            "eac87292ec5e26a9",
            "be35ffe0569746ab",
            "cd1430b315afff7f",
            "bc6c6cd719e20f61",
            "dabf78c524cc40e1",
            "b123210f7db0e10b",
            "ff75fc44f3cbe7b6",
            "b7da68673e05346d"
        ],
        "x": 504,
        "y": 1549,
        "w": 692,
        "h": 222
    },
    {
        "id": "b0ba40e0b297f67d",
        "type": "group",
        "z": "57111ca025f638be",
        "g": "a5b04cf60d670697",
        "name": "Delete",
        "style": {
            "label": true,
            "stroke": "#000000",
            "color": "#000000"
        },
        "nodes": [
            "85d647afd37b63fe",
            "cd9c88bb81c9febb",
            "5dc538862649faad",
            "628a55e0d9682d2f",
            "8383da9b105ef498",
            "0d4ac5b91285c29e",
            "6df860f3d88e7e14",
            "d99eb86e34066d1c",
            "80119027c1098b18",
            "14c57979f8bea78f"
        ],
        "x": 514,
        "y": 1339,
        "w": 692,
        "h": 202
    },
    {
        "id": "e35ebe091943e2a7",
        "type": "group",
        "z": "57111ca025f638be",
        "g": "a5b04cf60d670697",
        "name": "Insert Sensors",
        "style": {
            "label": true,
            "stroke": "#000000",
            "color": "#000000"
        },
        "nodes": [
            "6b6299aacfded0ae",
            "d57247b61b1362d0",
            "686152736de39533",
            "dbc4bd0f4a50d8cb",
            "168280962ca311ee"
        ],
        "x": 504,
        "y": 1799,
        "w": 732,
        "h": 142
    },
    {
        "id": "869ebc417f12da40",
        "type": "group",
        "z": "797d9b2a7151f089",
        "g": "beefa0c6950593db",
        "name": "Affichage du log",
        "style": {
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "a51e48a550bcf90a",
            "8f01265513527bfe",
            "426044f103a446eb",
            "2681d73e9020159d",
            "507aba2cb3094c7f",
            "50d31eaa2bed55ab"
        ],
        "x": 114,
        "y": 339,
        "w": 782,
        "h": 132
    },
    {
        "id": "61e088ec657a83ab",
        "type": "junction",
        "z": "d770df178aec257a",
        "x": 730,
        "y": 190,
        "wires": [
            [
                "b31b0a5f27849638"
            ]
        ]
    },
    {
        "id": "e982725746f62c93",
        "type": "junction",
        "z": "57111ca025f638be",
        "g": "4ac0d347446e702f",
        "x": 560,
        "y": 3090,
        "wires": [
            [
                "0a4b76749339d8cd"
            ]
        ]
    },
    {
        "id": "e36536a63d419b95",
        "type": "junction",
        "z": "57111ca025f638be",
        "g": "4ac0d347446e702f",
        "x": 570,
        "y": 3050,
        "wires": [
            [
                "a3b3a725a704ea19"
            ]
        ]
    },
    {
        "id": "59157c73ba907ed4",
        "type": "junction",
        "z": "57111ca025f638be",
        "g": "4ac0d347446e702f",
        "x": 550,
        "y": 3140,
        "wires": [
            [
                "0a4b76749339d8cd",
                "a3b3a725a704ea19"
            ]
        ]
    },
    {
        "id": "6e21b41b46590719",
        "type": "junction",
        "z": "57111ca025f638be",
        "g": "4ac0d347446e702f",
        "x": 600,
        "y": 2980,
        "wires": [
            [
                "a3b3a725a704ea19",
                "0a4b76749339d8cd"
            ]
        ]
    },
    {
        "id": "c6a29fab98717cbb",
        "type": "mqtt-broker",
        "name": "Localhost MQTT",
        "broker": "localhost",
        "port": "1883",
        "clientid": "nodered",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "5",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "628739f370d1726d",
        "type": "sqlitedb",
        "db": "/home/pi-md/Database/nodered.db",
        "mode": "RW"
    },
    {
        "id": "88425ab7cad6cc83",
        "type": "serial-port",
        "name": "Gateway",
        "serialport": "/dev/ttyUSB0",
        "serialbaud": "115200",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "\\n",
        "bin": "false",
        "out": "char",
        "addchar": "\\n",
        "responsetimeout": "1500"
    },
    {
        "id": "44e231295a59480e",
        "type": "sqlitedb",
        "db": "/home/pi-md/Database/noderedDev.db",
        "mode": "RWC"
    },
    {
        "id": "d4c9d9e9b37824ea",
        "type": "ui-base",
        "name": "UI Base",
        "path": "/dashboard",
        "includeClientData": false,
        "acceptsClientConfig": [],
        "showPathInSidebar": false,
        "showPageTitle": true,
        "navigationStyle": "icon",
        "titleBarStyle": "default"
    },
    {
        "id": "5b69d242410edd23",
        "type": "ui-group",
        "name": "Démo",
        "page": "065a07028704b7c2",
        "width": "12",
        "height": "3",
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "fad2edc179425950",
        "type": "ui-page",
        "name": "Graphique",
        "ui": "d4c9d9e9b37824ea",
        "path": "/Graphique",
        "icon": "mdi-chart-timeline-variant",
        "layout": "grid",
        "theme": "a70602e73bbb2a95",
        "order": 1,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "ec83ebd45553c336",
        "type": "ui-group",
        "name": "Tableau",
        "page": "fad2edc179425950",
        "width": "7",
        "height": "12",
        "order": 2,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "59f68216b64feef8",
        "type": "ui-page",
        "name": "Configuration",
        "ui": "d4c9d9e9b37824ea",
        "path": "/Configuration",
        "icon": "mdi-cogs",
        "layout": "grid",
        "theme": "a70602e73bbb2a95",
        "order": 3,
        "className": "",
        "visible": true,
        "disabled": false
    },
    {
        "id": "a70602e73bbb2a95",
        "type": "ui-theme",
        "name": "Admin Theme",
        "colors": {
            "surface": "#454545",
            "primary": "#d47e1c",
            "bgPage": "#eeeeee",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        },
        "sizes": {
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    },
    {
        "id": "e4203d846baf0d72",
        "type": "ui-group",
        "name": "Device",
        "page": "59f68216b64feef8",
        "width": "6",
        "height": "1",
        "order": 1,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "fd9c7176b0a431e9",
        "type": "ui-group",
        "name": "Statut système",
        "page": "2d31725154be688c",
        "width": "2",
        "height": "1",
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "065a07028704b7c2",
        "type": "ui-page",
        "name": "Page Test",
        "ui": "d4c9d9e9b37824ea",
        "path": "/page3",
        "icon": "mdi-dev-to",
        "layout": "grid",
        "theme": "a70602e73bbb2a95",
        "order": 6,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "d6cf618cb11d3964",
        "type": "ui-group",
        "name": "Devices",
        "page": "fad2edc179425950",
        "width": "5",
        "height": "1",
        "order": 1,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "336cf0cb878743a0",
        "type": "ui-group",
        "name": "Rapport système",
        "page": "2d31725154be688c",
        "width": "6",
        "height": "1",
        "order": 2,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "2d31725154be688c",
        "type": "ui-page",
        "name": "Système",
        "ui": "d4c9d9e9b37824ea",
        "path": "/Systeme",
        "icon": "mdi-alarm-panel-outline",
        "layout": "grid",
        "theme": "a70602e73bbb2a95",
        "order": 4,
        "className": "",
        "visible": true,
        "disabled": "false"
    },
    {
        "id": "074b315414230834",
        "type": "ui-theme",
        "name": "Theme Name",
        "colors": {
            "surface": "#ffffff",
            "primary": "#0094ce",
            "bgPage": "#eeeeee",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        }
    },
    {
        "id": "1d5e58c3b82f3637",
        "type": "global-config",
        "name": "global-config",
        "env": [
            {
                "name": "DatabasePath",
                "value": "/home/pi-md/Database",
                "type": "str"
            },
            {
                "name": "DatabaseName",
                "value": "nodered.db",
                "type": "str"
            },
            {
                "name": "DatabaseSqlName",
                "value": "nodered.bk.sql.gz",
                "type": "str"
            },
            {
                "name": "DatabaseBkName",
                "value": "nodered.bk.db",
                "type": "str"
            }
        ]
    },
    {
        "id": "bf25a12ddc9940be",
        "type": "ui-page",
        "name": "Outils",
        "ui": "d4c9d9e9b37824ea",
        "path": "/Outils",
        "icon": "mdi-tools",
        "layout": "grid",
        "theme": "a70602e73bbb2a95",
        "order": 5,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "9f41fa0923a34ac2",
        "type": "ui-group",
        "name": "Configuration Gateway",
        "page": "bf25a12ddc9940be",
        "width": "4",
        "height": "3",
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "311f12a4.3d2b9e",
        "type": "mqtt-broker",
        "name": "",
        "broker": "mqtt",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": true,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "338b8e1916d50651",
        "type": "serial-port",
        "name": "GPIO",
        "serialport": "/dev/ttyAMA0",
        "serialbaud": "9600",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "\\n",
        "bin": "false",
        "out": "char",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "5dfbb318f0d542be",
        "type": "ui-group",
        "name": "Location",
        "page": "59f68216b64feef8",
        "width": "6",
        "height": "1",
        "order": 2,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "c1499e10fc3a9745",
        "type": "ui-group",
        "name": "Flow Viewer",
        "page": "85043ba28e0273fe",
        "width": "6",
        "height": "1",
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "85043ba28e0273fe",
        "type": "ui-page",
        "name": "Third Party Widgets",
        "ui": "d4c9d9e9b37824ea",
        "path": "/third-party",
        "icon": "account-group",
        "layout": "grid",
        "theme": "129e99574def90a3",
        "order": 7,
        "className": "",
        "visible": true,
        "disabled": "false"
    },
    {
        "id": "129e99574def90a3",
        "type": "ui-theme",
        "name": "Custom Theme",
        "colors": {
            "surface": "#000000",
            "primary": "#ff4000",
            "bgPage": "#f0f0f0",
            "groupBg": "#ffffff",
            "groupOutline": "#d9d9d9"
        },
        "sizes": {
            "pagePadding": "24px",
            "groupGap": "12px",
            "groupBorderRadius": "9px",
            "widgetGap": "6px"
        }
    },
    {
        "id": "9508bb8465b1b1e5",
        "type": "ui-group",
        "name": "Default Notification",
        "page": "0fe97ec4631a4c92",
        "width": "6",
        "height": "1",
        "order": 1,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "0fe97ec4631a4c92",
        "type": "ui-page",
        "name": "Notification",
        "ui": "d4c9d9e9b37824ea",
        "path": "/notification",
        "icon": "bell-badge-outline",
        "layout": "notebook",
        "theme": "9d8bfd7e0d216779",
        "order": 8,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "9d8bfd7e0d216779",
        "type": "ui-theme",
        "name": "Default Theme",
        "colors": {
            "surface": "#ffffff",
            "primary": "#15617e",
            "bgPage": "#eeeeee",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        },
        "sizes": {
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    },
    {
        "id": "5277f2969e4df951",
        "type": "ui-group",
        "name": "Advanced",
        "page": "5d43941d3f14c655",
        "width": "6",
        "height": "1",
        "order": 1,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "5d43941d3f14c655",
        "type": "ui-page",
        "name": "Text Input",
        "ui": "d4c9d9e9b37824ea",
        "path": "/text-input",
        "icon": "cursor-text",
        "layout": "notebook",
        "theme": "5075a7d8e4947586",
        "order": 9,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "5075a7d8e4947586",
        "type": "ui-theme",
        "name": "Default Theme",
        "colors": {
            "surface": "#ffffff",
            "primary": "#0094CE",
            "bgPage": "#eeeeee",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        },
        "sizes": {
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    },
    {
        "id": "f8fdfa146ea2a11b",
        "type": "ui-group",
        "name": "Line Charts with Sliders",
        "page": "910b885140238b5a",
        "width": "6",
        "height": "1",
        "order": 1,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "910b885140238b5a",
        "type": "ui-page",
        "name": "Charts",
        "ui": "d4c9d9e9b37824ea",
        "path": "/charts-example",
        "icon": "chart-box-outline",
        "layout": "notebook",
        "theme": "5075a7d8e4947586",
        "order": 2,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "babb6d48868671a6",
        "type": "function",
        "z": "bc1a8754bbd79fc2",
        "d": true,
        "name": "Prototype Device",
        "func": "// ------------  SENSOR  ---------------------------\n\nfunction DevSensor(id_sensor, name) {\n  this.id_sensor = id_sensor;\n  this.name = name;\n\n  //node.log(\"constructor Device\");\n  this.functions = [];\n}\n\nDevSensor.prototype.addFunction = function(functon) {\n  if (functon != undefined) {\n    let functionUpdate;\n\n   \n  }\n}\n\nDevSensor.prototype.getId = function() {\n  return this.id_sensor;\n}\n\nglobal.set(\"DevSensor\", DevSensor);\n\n// ------------  DEVICE  ---------------------------\n\nfunction Device(id_device, mac) {\n  this.id_device = id_device;\n  this.mac = mac;\n\n  //node.log(\"constructor Device\");\n  this.sensors = [];\n}\n\nDevice.prototype.setSensor = function(sensor) {\n    \n  if (sensor != undefined) {\n    let rowUpdate = new DevSensor();\n\n    this.sensors.forEach(function (row) {\n      if (row.id_sensor === sensor.id_sensor) {\n        rowUpdate = row;\n        node.warn(\"sensorUpdate\");\n      }\n    });\n\n    this.sensors.push(sensor);\n    if (rowUpdate == undefined) {\n      this.sensors.push(sensor);\n      node.log(\"sensor\");\n    }else{\n      rowUpdate.name = sensor.name\n    }\n  }\n}\n\n\nDevice.prototype.getId = function() {\n  return this.id_device;\n}\n\nglobal.set(\"Device\", Device);\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "3efda58226d49848",
        "type": "function",
        "z": "bc1a8754bbd79fc2",
        "name": "Map Device",
        "func": "class Device {\n  constructor(row) {\n    this.id_device = row.id_device;\n    this.mac = row.mac;\n    this.location = row.location;\n    this.sleep_duration = row.sleep_duration;\n    this.im_alive_period = row.im_alive_period;\n    this.sensors = new Array();\n  }\n  addSensor(data) {\n    let sensor;\n\n    this.sensors.forEach(function (row) {\n      if (row.id_sensor == data.id_sensor) {\n        sensor = row;\n      }\n    });\n    if (sensor == undefined) {\n      sensor = new Sensor(data);\n      this.sensors.push(sensor);\n    }\n    return sensor;\n  }\n  updateSensor(sensor) {\n    this.sensors.forEach(function (row) {\n      if (sensor.id_sensor == row.id_sensor) {\n        row.name = sensor.name;\n      }\n    });\n  }\n  get Id() {\n    return this.id_device;\n  }\n}\n\nclass Sensor {\n  constructor(data) {\n    this.id_sensor = data.id_sensor;\n    this.sensor_role = data.sensor_role;\n    this.attributs = new Array();\n  }\n  addAttribut(data) {\n    if (data.att_name != undefined){\n      let attribut = new Attribut(data);\n      this.attributs.push(attribut);\n    }\n\n  }\n}\nclass Attribut {\n  constructor(data) {\n    if(data.att_name != undefined){\n      this.id_attribut = data.id_attribut;\n      this.name = data.att_name;\n      this.value = data.att_value;\n    }\n  }\n}\n\n// ----------------------------------------------\n//  DEBUT\n\n\nlet rows = msg.payload\n\nlet devicesMap = new Map();\n\nrows.forEach(function (data) {\n \n  let device = devicesMap.get(data.mac);\n \n  if (device == undefined) {\n    device = new Device(data);\n    devicesMap.set(device.mac, device);\n  }\n\n  if (data.id_sensor != undefined) {\n    let sensor = device.addSensor(data);\n    sensor.addAttribut(data);\n  }\n});\n\nmsg.payload = devicesMap;\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "6be6f492df236e0f",
        "type": "function",
        "z": "bc1a8754bbd79fc2",
        "d": true,
        "name": "Map Device object",
        "func": "\nclass Device {\n  constructor(row) {\n    this.id_device = row.id_device;\n    this.mac = row.mac;\n    this.location = row.location;\n    this.sleep_duration = row.sleep_duration;\n    this.im_alive_period = row.im_alive_period;\n    this.modules = new Array();\n  }\n  addModule(data) {\n    let module;\n\n    this.modules.forEach(function (row) {\n      if (row.id_module == data.id_module) {\n        module = row;\n      }\n    });\n    if (module == undefined) {\n      module = new Module(data);\n      this.modules.push(module);\n    }\n    return module;\n  }\n  updateModule(module) {\n    node.log(\"Something happened\");\n    this.modules.forEach(function (row) {\n      if (module.id_module == row.id_module) {\n        row.name = module.name;\n      }\n    });\n  }\n  get Id() {\n    return this.id_device;\n  }\n\n}\n\nclass Module {\n  constructor(row) {\n    this.id_module = row.id_module;\n    this.name = row.name;\n    this.functions = new Array();\n    this.addFunction(row);\n  }\n  addFunction(data) {\n    let modFunction;\n\n    this.functions.forEach(function (row) {\n      if (row.id == data.id_module_function) {\n        modFunction = row;\n      }\n    });\n\n    if (modFunction == undefined) {\n      modFunction = new ModuleFunction(data);\n      this.functions.push(modFunction);\n    }\n  }\n\n  get Id() {\n    return this.id_module;\n  }\n  get Name() {\n    return this.name;\n  }\n}\n\n\nclass ModuleFunction {\n  constructor(row) {\n    this.id = row.id_module_function;\n    this.name = row.function_name;\n  }\n\n  get Id() {\n    return this.id;\n  }\n}\n\n\n\nlet rows = msg.payload\n\n//let devicesMap = flow.get(\"devicesMap\");\nlet devicesMap = new Map();\n\nrows.forEach(function (data) {\n \n  let device = devicesMap.get(data.id_device);\n \n  if (device == undefined) {\n    device = new Device(data);\n    devicesMap.set(device.mac, device);\n  }\n\n  if (data.id_module != undefined) {\n    let module = device.addModule(data);\n\n    //node.send((module.Name).toString());\n    if (data.id_module_function != undefined) {\n      module.addFunction(data);\n    }\n  }\n});\n\nmsg.payload = devicesMap;\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "a23f0f77d8027ec2",
        "type": "file",
        "z": "d770df178aec257a",
        "name": "Logger System",
        "filename": "logSystem",
        "filenameType": "env",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 500,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "b31b0a5f27849638",
        "type": "function",
        "z": "d770df178aec257a",
        "name": "Add Date",
        "func": "if(msg.payload.trim().length > 0){\n    let date = new Date();\n    let dateString = date.toLocaleDateString('fr-ca', {month: 'numeric', day: 'numeric'});\n    let timeString = date.toTimeString().slice(0, 8);\n  msg.payload = \"[\" + dateString + \" \" + timeString + \"]\" + \" \" + msg.payload + '\\n';\n\n    return msg;\n  }\n  ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 100,
        "wires": [
            [
                "a23f0f77d8027ec2"
            ]
        ]
    },
    {
        "id": "b66821fd2cd59e26",
        "type": "watch",
        "z": "d770df178aec257a",
        "name": "Surveiller fichier log",
        "files": "/home/pi-md/log/system.log",
        "recursive": "",
        "x": 180,
        "y": 200,
        "wires": [
            [
                "f265e5c9249bca68"
            ]
        ]
    },
    {
        "id": "f265e5c9249bca68",
        "type": "function",
        "z": "d770df178aec257a",
        "name": "Executer rotation log",
        "func": "if(msg.size > 100000){\n    return msg;\n\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 200,
        "wires": [
            [
                "dc6b090bd074ce7b"
            ]
        ]
    },
    {
        "id": "dc6b090bd074ce7b",
        "type": "exec",
        "z": "d770df178aec257a",
        "command": "logrotate -s /home/pi-md/log/status /home/pi-md/log/logrotate.conf",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "LogRotate",
        "x": 620,
        "y": 200,
        "wires": [
            [
                "61e088ec657a83ab"
            ],
            [
                "61e088ec657a83ab"
            ],
            []
        ]
    },
    {
        "id": "018a3e9173459444",
        "type": "comment",
        "z": "792784e9fde6f3b4",
        "name": "On startup",
        "info": "",
        "x": 130,
        "y": 40,
        "wires": []
    },
    {
        "id": "b5546645dc5f1973",
        "type": "function",
        "z": "792784e9fde6f3b4",
        "name": "Flow functions",
        "func": "'use strict'\nlet Functions = {\n    getDateDiff : \n        function (date_1, date_2){\n            const millis = date_1 - date_2;\n            const diff = Math.floor(millis / 1000);\n            //    console.log(\\\"Diff: \\\" + diff);\n            return diff;\n        },\n    getActivityLevel : \n        function (lastReceiptTime, sleepDuration){\n            //console.log(\"lastReceiptTime: \" + lastReceiptTime );\n            \n            const millis = Date.now() - lastReceiptTime;\n            \n            //Diff est en secondes\n            const diff = Math.floor(millis / 1000);\n          //  console.log(\"Diff: \" + diff + \" - sleep: \" + sleepDuration);\n            \n            if( diff > (sleepDuration * 2)){\n                //La période de sleep est dépassée * 2. \n                // On mets au rouge.\n                return 0;\n               \n            }else if( diff > (sleepDuration * 1.2)){\n                //La période de sleep est dépassée * 1.2. \n                // On mets au jaune.\n                return 50;\n            }else{\n                //On a reçu du data à l'intérieure de la période de sleep. \n                // On mets au vert.\n                return 100;  \n            }\n        },\n    padTo2Digits :\n        function (num) {\n          return num.toString().padStart(2, '0');\n        },\n    formatDate : \n        function (date) {\n          return (\n            [\n             // date.getFullYear(),\n              Functions.padTo2Digits(date.getMonth() + 1),\n              Functions.padTo2Digits(date.getDate()),\n            ].join('/') +\n            ' ' +\n            [\n              Functions.padTo2Digits(date.getHours()),\n              Functions.padTo2Digits(date.getMinutes()),\n              Functions.padTo2Digits(date.getSeconds()),\n            ].join(':')\n          );\n        }\n    }\n\nflow.set('Functions', Functions);\nnode.status({fill:\"green\",shape:\"dot\",text:\"Functions Loaded\"});\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 120,
        "wires": [
            [
                "00df0075e75bfa98"
            ]
        ]
    },
    {
        "id": "2db0904064c210ba",
        "type": "change",
        "z": "792784e9fde6f3b4",
        "name": "Clear flow variables",
        "rules": [
            {
                "t": "delete",
                "p": "devicesMap",
                "pt": "global"
            },
            {
                "t": "delete",
                "p": "selectedAttribut",
                "pt": "flow"
            },
            {
                "t": "delete",
                "p": "selectedSensor",
                "pt": "flow"
            },
            {
                "t": "delete",
                "p": "selectedDevice",
                "pt": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 310,
        "y": 120,
        "wires": [
            [
                "b5546645dc5f1973"
            ]
        ]
    },
    {
        "id": "558c815598a824f2",
        "type": "sqlite",
        "z": "792784e9fde6f3b4",
        "mydb": "628739f370d1726d",
        "sqlquery": "fixed",
        "sql": "pragma journal_mode = WAL;\npragma synchronous = normal;\npragma temp_store = memory;\npragma mmap_size = 30000000000;\nPRAGMA foreign_keys=ON;",
        "name": "Init DB",
        "x": 280,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "bf505fe71b57ccd7",
        "type": "function",
        "z": "792784e9fde6f3b4",
        "name": "Sensor Roles",
        "func": "\n\nlet roles = [];\nmsg.payload.forEach(function (value) {\n     roles.push(value.role);\n});\n\nglobal.set('SENSOR_ROLES', roles);\n\nnode.status({fill:\"green\",shape:\"ring\",text:\"Roles chargés\"});\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "00df0075e75bfa98",
        "type": "sqlite",
        "z": "792784e9fde6f3b4",
        "mydb": "628739f370d1726d",
        "sqlquery": "fixed",
        "sql": "SELECT role\n  FROM SENSOR_ROLE;",
        "name": "Get sensor roles",
        "x": 290,
        "y": 180,
        "wires": [
            [
                "bf505fe71b57ccd7"
            ]
        ]
    },
    {
        "id": "0ca0d73d6c97fd4e",
        "type": "comment",
        "z": "57111ca025f638be",
        "g": "f6ba6aa35208baae",
        "name": "On startup",
        "info": "",
        "x": 130,
        "y": 60,
        "wires": []
    },
    {
        "id": "1b2663185a65a48f",
        "type": "mqtt in",
        "z": "57111ca025f638be",
        "g": "590af8aa1ccb96c4",
        "name": "",
        "topic": "dom-sys.sensor/data",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "c6a29fab98717cbb",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 540,
        "wires": [
            [
                "2fa7d3a1d07ea7f0",
                "4b60c0e64f93d254"
            ]
        ]
    },
    {
        "id": "976b9e48f9690a8d",
        "type": "inject",
        "z": "57111ca025f638be",
        "g": "590af8aa1ccb96c4",
        "name": "Simulation",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 160,
        "y": 620,
        "wires": [
            [
                "7b299ba00a6589b0"
            ]
        ]
    },
    {
        "id": "c8184d1d79bb29dc",
        "type": "function",
        "z": "57111ca025f638be",
        "g": "590af8aa1ccb96c4",
        "name": "Params",
        "func": "//Parametres pour prepared statement\nmsg.params = { \n  $id_location:msg.payload[0].id_location,\n  // (/10) On affiche un digit après le point.\n  $temperature:msg.temperature.data.temperature/10,\n  $humidity:msg.temperature.data.humidity/10,\n  $counter:msg.temperature.header.counter\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 540,
        "wires": [
            [
                "97610149c73699c4"
            ]
        ],
        "outputLabels": [
            "Insert"
        ]
    },
    {
        "id": "7b299ba00a6589b0",
        "type": "function",
        "z": "57111ca025f638be",
        "g": "590af8aa1ccb96c4",
        "name": "Simulation",
        "func": "//msg.payload = {\"header\":{\"mac\":\"78:21:84:7F:61:84\",\"type\":\"DATA\",\"version\":1,\"error\":0},\"data\":{\"counter\":1,\"temperature\":105}}\n\nmsg.payload = {\"header\":{\"mac\":\"78:21:84:7F:61:84\",\"type\":\"DATA_TEMPERATURE\",\"version\":1,\"error\":0},\"data\":{\"counter\":1,\"temperature\":105}}\n\nmsg.payload = {\"header\":{\"mac\":\"C0:49:EF:CC:37:4C\",\"type\":\"DATA_TEMPERATURE\",\"version\":1,\"counter\":4,\"error\":\"\"},\n    \"data\":{\"id_sensor\":9,\"temperature\":-1,\"humidity\":258,\"battery_level\":96}};\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 620,
        "wires": [
            [
                "4b60c0e64f93d254"
            ]
        ]
    },
    {
        "id": "80973421c6f485ce",
        "type": "catch",
        "z": "57111ca025f638be",
        "g": "ac3db6b9ccb43199",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 120,
        "y": 4600,
        "wires": [
            [
                "3302394b3b687c42"
            ]
        ]
    },
    {
        "id": "3302394b3b687c42",
        "type": "debug",
        "z": "57111ca025f638be",
        "g": "ac3db6b9ccb43199",
        "name": "Catch ",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 360,
        "y": 4600,
        "wires": []
    },
    {
        "id": "09b6ad2a2bf86dc1",
        "type": "function",
        "z": "57111ca025f638be",
        "d": true,
        "g": "f6ba6aa35208baae",
        "name": "Flow functions",
        "func": "'use strict'\nlet Functions = {\n    getDateDiff : \n        function (date_1, date_2){\n            const millis = date_1 - date_2;\n            const diff = Math.floor(millis / 1000);\n            //    console.log(\\\"Diff: \\\" + diff);\n            return diff;\n        },\n    getActivityLevel : \n        function (lastReceiptTime, sleepDuration){\n            //console.log(\"lastReceiptTime: \" + lastReceiptTime );\n            \n            const millis = Date.now() - lastReceiptTime;\n            \n            //Diff est en secondes\n            const diff = Math.floor(millis / 1000);\n          //  console.log(\"Diff: \" + diff + \" - sleep: \" + sleepDuration);\n            \n            if( diff > (sleepDuration * 2)){\n                //La période de sleep est dépassée * 2. \n                // On mets au rouge.\n                return 0;\n               \n            }else if( diff > (sleepDuration * 1.2)){\n                //La période de sleep est dépassée * 1.2. \n                // On mets au jaune.\n                return 50;\n            }else{\n                //On a reçu du data à l'intérieure de la période de sleep. \n                // On mets au vert.\n                return 100;  \n            }\n        },\n    padTo2Digits :\n        function (num) {\n          return num.toString().padStart(2, '0');\n        },\n    formatDate : \n        function (date) {\n          return (\n            [\n             // date.getFullYear(),\n              Functions.padTo2Digits(date.getMonth() + 1),\n              Functions.padTo2Digits(date.getDate()),\n            ].join('/') +\n            ' ' +\n            [\n              Functions.padTo2Digits(date.getHours()),\n              Functions.padTo2Digits(date.getMinutes()),\n              Functions.padTo2Digits(date.getSeconds()),\n            ].join(':')\n          );\n        }\n    }\n\nflow.set('Functions', Functions);\nnode.status({fill:\"green\",shape:\"dot\",text:\"Functions Loaded\"});\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 110,
        "wires": [
            [
                "6ffc190a90909afc"
            ]
        ]
    },
    {
        "id": "c915ea2a8227a672",
        "type": "comment",
        "z": "57111ca025f638be",
        "d": true,
        "g": "36653046b6da3c92",
        "name": "À la réception de données --> rafraîchir la colonne ACTIF de UI-table device",
        "info": "",
        "x": 440,
        "y": 3820,
        "wires": []
    },
    {
        "id": "33de13a0cbc96465",
        "type": "link in",
        "z": "57111ca025f638be",
        "d": true,
        "g": "36653046b6da3c92",
        "name": "Update config status",
        "links": [
            "92d3ed46ab95f44f"
        ],
        "x": 85,
        "y": 3880,
        "wires": [
            [
                "bdb9a365e5db2244"
            ]
        ]
    },
    {
        "id": "bc77bc47e5d767ee",
        "type": "link out",
        "z": "57111ca025f638be",
        "d": true,
        "g": "36653046b6da3c92",
        "name": "link out 1",
        "mode": "link",
        "links": [],
        "x": 675,
        "y": 3880,
        "wires": []
    },
    {
        "id": "b0c9163b98018ad6",
        "type": "function",
        "z": "57111ca025f638be",
        "d": true,
        "g": "36653046b6da3c92",
        "name": "Update DATA status",
        "func": "node.status({fill:\"yellow\",shape:\"ring\",text:\"En traitement\"});\n\nlet devicesMap = global.get('devicesMap');\n\nlet device = devicesMap.get(msg.device.header.id_device);\n\nif(device){\n    device.lastReceivedData = new Date().getTime();\n    device.data =  100;\n\n    //On retourne toute la liste à  ui-table.\n    msg.payload = Array.from(devicesMap.values());\n\n    node.status({fill:\"green\",shape:\"ring\",text:\"OK\"});\n    \n    return msg;\n}\n\nreturn null;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 3860,
        "wires": [
            [
                "bc77bc47e5d767ee"
            ]
        ]
    },
    {
        "id": "4b60c0e64f93d254",
        "type": "switch",
        "z": "57111ca025f638be",
        "g": "590af8aa1ccb96c4",
        "name": "Type message",
        "property": "payload.header.type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "DATA_TEMPERATURE",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "IM_ALIVE",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ALERT",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": true,
        "outputs": 3,
        "x": 410,
        "y": 560,
        "wires": [
            [
                "e57ce7fb3618696f"
            ],
            [
                "92d3ed46ab95f44f"
            ],
            [
                "92d3ed46ab95f44f"
            ]
        ],
        "outputLabels": [
            "Temp",
            "I'M_ALIVE",
            "Alert"
        ],
        "info": "Selon le type de message"
    },
    {
        "id": "6ffc190a90909afc",
        "type": "change",
        "z": "57111ca025f638be",
        "d": true,
        "g": "f6ba6aa35208baae",
        "name": "Clear flow variables",
        "rules": [
            {
                "t": "delete",
                "p": "devicesMap",
                "pt": "global"
            },
            {
                "t": "delete",
                "p": "selectedAttribut",
                "pt": "flow"
            },
            {
                "t": "delete",
                "p": "selectedSensor",
                "pt": "flow"
            },
            {
                "t": "delete",
                "p": "selectedDevice",
                "pt": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 520,
        "y": 110,
        "wires": [
            [
                "75fb2eb7f4ea83be"
            ]
        ]
    },
    {
        "id": "92d3ed46ab95f44f",
        "type": "link out",
        "z": "57111ca025f638be",
        "g": "590af8aa1ccb96c4",
        "name": "ImAlive-Alerte",
        "mode": "link",
        "links": [
            "33de13a0cbc96465"
        ],
        "x": 575,
        "y": 590,
        "wires": []
    },
    {
        "id": "bdb9a365e5db2244",
        "type": "switch",
        "z": "57111ca025f638be",
        "d": true,
        "g": "36653046b6da3c92",
        "name": "",
        "property": "device.header.type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "DATA",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "IM_ALIVE",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ALERT",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": true,
        "outputs": 3,
        "x": 200,
        "y": 3880,
        "wires": [
            [
                "b0c9163b98018ad6"
            ],
            [
                "eb953df028913fcc"
            ],
            []
        ]
    },
    {
        "id": "eb953df028913fcc",
        "type": "function",
        "z": "57111ca025f638be",
        "d": true,
        "g": "36653046b6da3c92",
        "name": "Rafraichir column <actif>",
        "func": "node.status({fill:\"yellow\",shape:\"ring\",text:\"En traitement\"});\n\nlet func = flow.get('Functions');\nlet devicesMap = global.get('devicesMap');\n\nlet device = devicesMap.get(msg.device.header.mac);\n\nif(device){\n    device.lastReceivedImAlive = new Date().getTime();\n    device.im_alive =  100;\n\n    msg.payload = Array.from(devicesMap.values());\n\n    node.status({fill:\"green\",shape:\"ring\",text:\"OK\"});\n\n    return msg;\n}\n\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 3920,
        "wires": [
            [
                "bc77bc47e5d767ee"
            ]
        ]
    },
    {
        "id": "c999883d7b694976",
        "type": "comment",
        "z": "57111ca025f638be",
        "g": "590af8aa1ccb96c4",
        "name": "I'mAlive -- Alerte",
        "info": "On veut rafraichir le statut des données",
        "x": 690,
        "y": 590,
        "wires": []
    },
    {
        "id": "2fa7d3a1d07ea7f0",
        "type": "debug",
        "z": "57111ca025f638be",
        "g": "590af8aa1ccb96c4",
        "name": "debug 31",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 380,
        "y": 500,
        "wires": []
    },
    {
        "id": "56d1fae213c30e8a",
        "type": "mqtt in",
        "z": "57111ca025f638be",
        "g": "adca6ef2dfcba80e",
        "name": "",
        "topic": "dom-sys.gw/request",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "c6a29fab98717cbb",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 4120,
        "wires": [
            [
                "ed0e40f994ac39b6"
            ]
        ]
    },
    {
        "id": "ed0e40f994ac39b6",
        "type": "function",
        "z": "57111ca025f638be",
        "g": "adca6ef2dfcba80e",
        "name": "Send all config",
        "func": "node.status({fill:\"yellow\",shape:\"ring\",text:\"Sending config\"});\n\nlet devicesMap = global.get('devicesMap');\n\nlet device = {};\n\nif(msg.payload == \"GET_DEVICES_CONFIG\"){\n\n    devicesMap.forEach (function(pDevice, mac) {\n        if(pDevice.id_device > 1){\n\n            device = {\n            \"header\":{\"mac\":pDevice.mac,\"type\":\"CONFIG\"},\n            \"device\": pDevice\n            }\n            msg.payload = device;\n            node.send(msg);\n        }\n    });\n}\n\nnode.status({fill:\"green\",shape:\"ring\",text:\"Configs sent\"});\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 4120,
        "wires": [
            [
                "540255522bc77ebb"
            ]
        ]
    },
    {
        "id": "e81fca2d98b5ccc7",
        "type": "inject",
        "z": "57111ca025f638be",
        "g": "adca6ef2dfcba80e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "GET_DEVICES_CONFIG",
        "payloadType": "str",
        "x": 210,
        "y": 4180,
        "wires": [
            [
                "ed0e40f994ac39b6"
            ]
        ]
    },
    {
        "id": "540255522bc77ebb",
        "type": "json",
        "z": "57111ca025f638be",
        "g": "adca6ef2dfcba80e",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 580,
        "y": 4120,
        "wires": [
            [
                "c1a2983aa0ad8848",
                "9ee742908744f209"
            ]
        ]
    },
    {
        "id": "c1a2983aa0ad8848",
        "type": "mqtt out",
        "z": "57111ca025f638be",
        "g": "adca6ef2dfcba80e",
        "name": "",
        "topic": "dom-sys.server/update_config",
        "qos": "1",
        "retain": "true",
        "respTopic": "",
        "contentType": "application/json",
        "userProps": "",
        "correl": "",
        "expiry": "60",
        "broker": "c6a29fab98717cbb",
        "x": 800,
        "y": 4120,
        "wires": []
    },
    {
        "id": "b1961cc8c9a46d65",
        "type": "comment",
        "z": "57111ca025f638be",
        "d": true,
        "g": "36653046b6da3c92",
        "name": "En absence de données --> rafraîchir la colonne ACTIF de UI-table device",
        "info": "",
        "x": 390,
        "y": 3980,
        "wires": []
    },
    {
        "id": "0abc6f79ff08bbc4",
        "type": "inject",
        "z": "57111ca025f638be",
        "d": true,
        "g": "36653046b6da3c92",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "30",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 4020,
        "wires": [
            [
                "5180a561ec14a9ed"
            ]
        ]
    },
    {
        "id": "5180a561ec14a9ed",
        "type": "function",
        "z": "57111ca025f638be",
        "d": true,
        "g": "36653046b6da3c92",
        "name": "Rafraichir column <actif>",
        "func": "let func = flow.get('Functions');\n\nlet devicesMap = global.get('devicesMap');\n\nif (devicesMap === undefined) {\n   return null;\n}\n\nlet device;let key;\n\ndevicesMap.forEach((device, key) => {\n   device.data = func.getActivityLevel(device.lastReceivedData, device.sleep_duration);\n   device.im_alive = func.getActivityLevel(device.lastReceivedImAlive, device.sleep_duration);\n});\n\nglobal.set('devicesMap', devicesMap );\n\nmsg.payload = Array.from(devicesMap.values());\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 4020,
        "wires": [
            [
                "a664ec23f24b83a5"
            ]
        ]
    },
    {
        "id": "a664ec23f24b83a5",
        "type": "link out",
        "z": "57111ca025f638be",
        "d": true,
        "g": "36653046b6da3c92",
        "name": "Rafraichir colonne actif",
        "mode": "link",
        "links": [],
        "x": 605,
        "y": 4020,
        "wires": []
    },
    {
        "id": "fde5194a774e0236",
        "type": "sqlite",
        "z": "57111ca025f638be",
        "d": true,
        "g": "f6ba6aa35208baae",
        "mydb": "628739f370d1726d",
        "sqlquery": "fixed",
        "sql": "pragma journal_mode = WAL;\npragma synchronous = normal;\npragma temp_store = memory;\npragma mmap_size = 30000000000;\nPRAGMA foreign_keys=ON;",
        "name": "Init DB",
        "x": 350,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "97610149c73699c4",
        "type": "sqlite",
        "z": "57111ca025f638be",
        "g": "590af8aa1ccb96c4",
        "mydb": "628739f370d1726d",
        "sqlquery": "prepared",
        "sql": "INSERT INTO TEMPERATURE\n  ( id_location, \n    temperature, \n    humidity,\n    counter,\n    datetime\n  )\nVALUES( \n  $id_location,\n  $temperature,\n  $humidity,\n  $counter,\n  datetime('now', 'localtime') \n);\n",
        "name": "Insert",
        "x": 740,
        "y": 540,
        "wires": [
            [
                "8244db89f6963d09"
            ]
        ]
    },
    {
        "id": "95bfa0ba0ca08529",
        "type": "function",
        "z": "57111ca025f638be",
        "d": true,
        "g": "f6ba6aa35208baae",
        "name": "Sensor Roles",
        "func": "\n\nlet roles = [];\nmsg.payload.forEach(function (value) {\n     roles.push(value.role);\n});\n\nglobal.set('SENSOR_ROLES', roles);\n\nnode.status({fill:\"green\",shape:\"ring\",text:\"Roles chargés\"});\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 110,
        "wires": [
            [
                "aecd825fcf9a94de"
            ]
        ]
    },
    {
        "id": "e4aecc6f336ce4bc",
        "type": "link out",
        "z": "57111ca025f638be",
        "g": "590af8aa1ccb96c4",
        "name": "New data",
        "mode": "link",
        "links": [
            "6c48e35750a5c6be"
        ],
        "x": 1005,
        "y": 540,
        "wires": []
    },
    {
        "id": "8244db89f6963d09",
        "type": "sqlite",
        "z": "57111ca025f638be",
        "g": "590af8aa1ccb96c4",
        "mydb": "628739f370d1726d",
        "sqlquery": "fixed",
        "sql": "SELECT *\nFROM DATA_VIEW\nwhere id_temperature_data = (SELECT last_insert_rowid());",
        "name": "Get last ID",
        "x": 880,
        "y": 540,
        "wires": [
            [
                "e4aecc6f336ce4bc",
                "2174f125045eff9a"
            ]
        ]
    },
    {
        "id": "438ddc13e515c438",
        "type": "inject",
        "z": "57111ca025f638be",
        "g": "f53bba5e293da6fb",
        "name": "Météo ",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 740,
        "wires": [
            [
                "bed8c9ea7fe6b13c"
            ]
        ]
    },
    {
        "id": "bed8c9ea7fe6b13c",
        "type": "openweathermap",
        "z": "57111ca025f638be",
        "g": "f53bba5e293da6fb",
        "name": "Météo locale",
        "wtype": "current",
        "lon": "",
        "lat": "",
        "city": "Montreal",
        "country": "CA",
        "language": "fr",
        "x": 320,
        "y": 740,
        "wires": [
            [
                "0bd7f81e66d83a2a"
            ]
        ]
    },
    {
        "id": "0bd7f81e66d83a2a",
        "type": "function",
        "z": "57111ca025f638be",
        "g": "f53bba5e293da6fb",
        "name": "Params",
        "func": "\nmsg.params = { \n    $temperature:msg.payload.tempc,\n    $humidity:msg.payload.humidity\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 740,
        "wires": [
            [
                "562a0ef8b0073349"
            ]
        ]
    },
    {
        "id": "562a0ef8b0073349",
        "type": "sqlite",
        "z": "57111ca025f638be",
        "g": "f53bba5e293da6fb",
        "mydb": "628739f370d1726d",
        "sqlquery": "prepared",
        "sql": "INSERT INTO TEMPERATURE_EXTERNE (\n  temperature,\n  humidity,\n  datetime\n)\nVALUES (\n  $temperature,\n  $humidity,\n  datetime('now', 'localtime')\n);\n",
        "name": "Insert data",
        "x": 640,
        "y": 740,
        "wires": [
            [
                "b5fb53396f247251"
            ]
        ]
    },
    {
        "id": "b5fb53396f247251",
        "type": "debug",
        "z": "57111ca025f638be",
        "g": "f53bba5e293da6fb",
        "name": "debug 108",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 740,
        "wires": []
    },
    {
        "id": "75fb2eb7f4ea83be",
        "type": "sqlite",
        "z": "57111ca025f638be",
        "d": true,
        "g": "f6ba6aa35208baae",
        "mydb": "628739f370d1726d",
        "sqlquery": "fixed",
        "sql": "SELECT role\n  FROM SENSOR_ROLE;",
        "name": "Get sensor roles",
        "x": 720,
        "y": 110,
        "wires": [
            [
                "95bfa0ba0ca08529"
            ]
        ]
    },
    {
        "id": "e3b58894b8cc6969",
        "type": "json",
        "z": "57111ca025f638be",
        "g": "c123dda748f0409f",
        "name": "JSON Config",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 670,
        "y": 2210,
        "wires": [
            [
                "c3a5d758adbd3593",
                "19e3a771f9e0137c"
            ]
        ]
    },
    {
        "id": "c3a5d758adbd3593",
        "type": "mqtt out",
        "z": "57111ca025f638be",
        "g": "c123dda748f0409f",
        "name": "",
        "topic": "dom-sys.server/update_config",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "c6a29fab98717cbb",
        "x": 920,
        "y": 2210,
        "wires": []
    },
    {
        "id": "93c3099696fe4e85",
        "type": "debug",
        "z": "57111ca025f638be",
        "g": "c123dda748f0409f",
        "name": "debug 159",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 420,
        "y": 2250,
        "wires": []
    },
    {
        "id": "c165aa64f3896b8e",
        "type": "function",
        "z": "57111ca025f638be",
        "g": "c123dda748f0409f",
        "name": "Set Gateway message",
        "func": "if (msg.payload == \"OK\") {\n\n   let device =\n   {\n      \"header\": {\n         \"mac\": msg.device.mac,\n         \"type\": \"CONFIG\"\n      },\n      \"device\": {\n         \"id_device\": msg.device.id_device,\n         \"sleep_duration\": msg.device.sleep_duration,\n         \"im_alive_period\": msg.device.im_alive_period,\n         \"sensors\": msg.device.sensors\n      }\n   }\n   msg.payload = device;\n\n   return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 2210,
        "wires": [
            [
                "e3b58894b8cc6969"
            ]
        ]
    },
    {
        "id": "975b275b647b8632",
        "type": "ui-template",
        "z": "57111ca025f638be",
        "g": "c123dda748f0409f",
        "group": "",
        "page": "59f68216b64feef8",
        "ui": "",
        "name": "Dialogue",
        "order": 0,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n  <div class=\"text-center pa-4\">\n    <v-dialog v-model=\"dialog\" width=\"auto\">\n      <template v-slot:activator=\"{ props: activatorProps }\">\n        <v-btn  text=\"Send configuration\" \n          v-show=\"false\"></v-btn>\n      </template>\n      <v-card max-width=\"400\" prepend-icon=\"mdi-update\" text=\"Transmettre les changements au device\"\n        title=\"Transmission de la configuration\">\n        ({{device.id_device}}) - {{device.mac}} - Location:{{device.location}}\n        <template v-slot:actions>\n          <v-btn class=\"ms-auto\" text=\"OK\" @click=\"onOk()\"></v-btn>\n          <v-btn class=\"ms-auto\" text=\"Annuler\" @click=\"dialog = false\"></v-btn>\n        </template>\n      </v-card>\n    </v-dialog>\n  </div>\n</template>\n\n<script>\n  export default {\n    data: () => ({\n      dialog: false,\n      device:{id:\"222\"},\n    }),\n    mounted() {\n      this.dialog = false;\n      this.device = {};\n      console.log(\"mounted\");\n    },\n    activated() {\n      this.dialog = false;\n      this.device = {};\n    },\n\n    watch: {\n      msg: function(){\n        this.dialog = false;\n        if(this.msg.action != undefined && this.msg.action === \"sendConfig\"){\n          if(this.msg.device != undefined){\n            this.device = this.msg.device;\n            this.dialog = true;\n          }\n        }\n      }\n    },\n    methods:{\n      onOk(){\n        this.send({payload: \"OK\", device: this.device});\n        this.dialog = false;\n      },\n    },\n  }\n</script>",
        "storeOutMessages": true,
        "passthru": false,
        "resendOnRefresh": true,
        "templateScope": "widget:page",
        "className": "",
        "x": 190,
        "y": 2210,
        "wires": [
            [
                "c165aa64f3896b8e",
                "93c3099696fe4e85"
            ]
        ]
    },
    {
        "id": "19e3a771f9e0137c",
        "type": "debug",
        "z": "57111ca025f638be",
        "g": "c123dda748f0409f",
        "name": "debug 161",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 2260,
        "wires": []
    },
    {
        "id": "8f34a61029fac0cb",
        "type": "sqlite",
        "z": "57111ca025f638be",
        "g": "b3735df348adb38e",
        "mydb": "628739f370d1726d",
        "sqlquery": "fixed",
        "sql": "SELECT id_location, DEV.mac, description, counter,  max(DV.datetime ) as datetime\nFROM DATA_VIEW DV\nLEFT JOIN\n  DEVICE DEV ON DEV.id_device = DV.id_device\nwhere  DV.datetime > datetime('now', 'localtime', '-48 hours')\ngroup by id_location\norder by id_location, datetime ;",
        "name": "Most recent data temperature",
        "x": 360,
        "y": 3370,
        "wires": [
            [
                "49a66220910d81ef",
                "568e97383e4285fa"
            ]
        ]
    },
    {
        "id": "577fd00e89cbfbe3",
        "type": "debug",
        "z": "57111ca025f638be",
        "g": "b3735df348adb38e",
        "name": "debug 144",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 3410,
        "wires": []
    },
    {
        "id": "88e67d8f05a4d9a5",
        "type": "inject",
        "z": "57111ca025f638be",
        "g": "b3735df348adb38e",
        "name": "Inject",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "900",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 3370,
        "wires": [
            [
                "8f34a61029fac0cb"
            ]
        ]
    },
    {
        "id": "49a66220910d81ef",
        "type": "function",
        "z": "57111ca025f638be",
        "g": "b3735df348adb38e",
        "name": "Vérification du délai",
        "func": "//Envoi une alerte à l'écran si les données ne sont pas reçues \n//  dans un délai acceptable.\nconst devicesMap = global.get('devicesMap');\n\nvar devices = [];\nlet data = msg.payload;\nmsg.payload = \"Vérification des délais.\\n\";\n\ndata.forEach(function (element) {\n  let device = devicesMap.get(element.mac);\n  if (device.sleep_duration > 0) {\n    let dateNow = new Date();\n    let datetime = new Date(element.datetime);\n    let diff = (dateNow.getTime() - datetime.getTime()) / 1000;\n    //Si on dépasse le temps de sleep + 5 minutes.\n    if (diff > (device.sleep_duration + (5 * 60))) {\n      msg.payload = msg.payload + \" -- Délai de réception dépassé. \" + device.mac + \"\\n\\r\";\n      console.log(\"Now:\" + dateNow + \n        \" - Last received:\" + datetime +\n        \"diff: \" + diff);\n      console.log(msg.alert);\n    }\n  }\n});\n\nif (msg.alert != \"\") {\n  if(msg.payload != \"\"){\n    node.log(\"Alert Device: \" + msg.payload);\n    return msg;\n  }\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 3370,
        "wires": [
            [
                "577fd00e89cbfbe3",
                "4970576a104ab876"
            ]
        ]
    },
    {
        "id": "4970576a104ab876",
        "type": "ui-notification",
        "z": "57111ca025f638be",
        "g": "b3735df348adb38e",
        "ui": "d4c9d9e9b37824ea",
        "position": "center center",
        "colorDefault": false,
        "color": "#ff0000",
        "displayTime": "0",
        "showCountdown": true,
        "outputs": 0,
        "allowDismiss": true,
        "dismissText": "Close",
        "raw": true,
        "className": "",
        "name": "Erreur de réception",
        "x": 860,
        "y": 3370,
        "wires": []
    },
    {
        "id": "91ced026339a3eeb",
        "type": "ui-chart",
        "z": "57111ca025f638be",
        "g": "4ac0d347446e702f",
        "group": "ec83ebd45553c336",
        "name": "Température",
        "label": "Température",
        "order": 1,
        "chartType": "line",
        "category": "payload",
        "categoryType": "msg",
        "xAxisLabel": "",
        "xAxisProperty": "x",
        "xAxisPropertyType": "msg",
        "xAxisType": "time",
        "xAxisFormat": "",
        "xAxisFormatType": "HH:mm",
        "xmin": "",
        "xmax": "",
        "yAxisLabel": "",
        "yAxisProperty": "y",
        "yAxisPropertyType": "property",
        "ymin": "",
        "ymax": "",
        "bins": "",
        "action": "replace",
        "stackSeries": false,
        "pointShape": "circle",
        "pointRadius": 4,
        "showLegend": true,
        "removeOlder": "10",
        "removeOlderUnit": "86400",
        "removeOlderPoints": "1000",
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "textColor": [
            "#666666"
        ],
        "textColorDefault": true,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": true,
        "width": "7",
        "height": "4",
        "className": "",
        "x": 1230,
        "y": 2920,
        "wires": [
            []
        ]
    },
    {
        "id": "1c2e8d33bf43083e",
        "type": "sqlite",
        "z": "57111ca025f638be",
        "g": "4ac0d347446e702f",
        "mydb": "628739f370d1726d",
        "sqlquery": "msg.topic",
        "sql": "SELECT id_location, acronyme, temperature, humidity, counter, datetime\nfrom DATA_VIEW\nwhere datetime > datetime($dateSelected) \nAND datetime < datetime($dateSelected, $nbHours) \nand role like 'TEMPERATURE'\nand id_location IN( $idList)\nORDER BY id_sensor, datetime asc;\n\n",
        "name": "Load temp sensor",
        "x": 710,
        "y": 2930,
        "wires": [
            [
                "e0694b109915343b"
            ]
        ]
    },
    {
        "id": "f138d867ef859cef",
        "type": "ui-template",
        "z": "57111ca025f638be",
        "g": "4ac0d347446e702f",
        "group": "d6cf618cb11d3964",
        "page": "",
        "ui": "",
        "name": "Liste Devices",
        "order": 1,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n  <v-card title=\"Devices\" flat> </v-card>\n  <v-data-table v-model=\"selected\" :headers=\"headers\" \n    :items=\"devices\" item-value=\"id_device\" items-per-page=\"10\"\n    density=\"compact\"\n    select-strategy=\"page\" show-select return-object \n    >\n   \n    <template v-slot:bottom>\n      <div class=\"text-center pt-2\">\n        <v-pagination :length=\"pageCount\"></v-pagination>\n      </div>\n    </template>\n  </v-data-table>\n</template>\n\n<script>\n  export default {\n    data: () => ({\n      selected: [],\n      headers: [\n        { title: 'Location', key: 'location', maxWidth:2, sortable: false},\n        { title: 'mac', key: 'mac', maxWidth:2, sortable: false},\n        { title: 'id_device', sortable: false, maxWidth:1, key: 'id_device' },\n        { title: 'id_sensor', key: 'id_sensor', maxWidth:1, sortable: false},\n      ],\n      devices: [],\n    }),\n\n    watch: {\n       msg: function(){\n        this.devices = this.msg.payload\n        this.devices.push({id_device:-1, mac: \"SiteWeb\", location:\"\"});\n      },\n      selected: function () {\n        this.send({devices: this.selected})\n      // flow.set(\"DEVICE-TEST\", this.selected );\n        \n      },\n    },\n    mounted() {\n     // this.devices = this.msg?.payload\n    },\n    computed: {\n      pageCount() {\n        return Math.ceil(this.devices.length / this.itemsPerPage)\n      },\n    },\n  \n  }\n</script>",
        "storeOutMessages": true,
        "passthru": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 480,
        "y": 2980,
        "wires": [
            [
                "6e21b41b46590719"
            ]
        ]
    },
    {
        "id": "caa469a26973d9d2",
        "type": "ui-button",
        "z": "57111ca025f638be",
        "g": "4ac0d347446e702f",
        "group": "d6cf618cb11d3964",
        "name": "",
        "label": "Refresh",
        "order": 2,
        "width": 0,
        "height": 0,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "iconPosition": "left",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 120,
        "y": 2980,
        "wires": [
            [
                "836e4535583ce900"
            ]
        ]
    },
    {
        "id": "568e97383e4285fa",
        "type": "debug",
        "z": "57111ca025f638be",
        "g": "b3735df348adb38e",
        "name": "debug 163",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 3420,
        "wires": []
    },
    {
        "id": "933c6183c294acd4",
        "type": "inject",
        "z": "57111ca025f638be",
        "d": true,
        "g": "f6ba6aa35208baae",
        "name": "Setup",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 120,
        "wires": [
            [
                "fde5194a774e0236",
                "09b6ad2a2bf86dc1"
            ]
        ]
    },
    {
        "id": "8e085f8f049550ac",
        "type": "ui-template",
        "z": "57111ca025f638be",
        "d": true,
        "g": "f6ba6aa35208baae",
        "group": "",
        "page": "59f68216b64feef8",
        "ui": "",
        "name": "CSS - Not use",
        "order": 0,
        "width": 0,
        "height": 0,
        "head": "",
        "format": ".my-class \n\nbutton.v-btn {\n    background-color: red;\n}",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "page:style",
        "className": "",
        "x": 670,
        "y": 70,
        "wires": [
            []
        ]
    },
    {
        "id": "1889b9b8d90b705d",
        "type": "link in",
        "z": "57111ca025f638be",
        "g": "c123dda748f0409f",
        "name": "Send configuration in",
        "links": [
            "71f803b13863282d"
        ],
        "x": 85,
        "y": 2210,
        "wires": [
            [
                "975b275b647b8632"
            ]
        ]
    },
    {
        "id": "aa76751f0c815d88",
        "type": "inject",
        "z": "57111ca025f638be",
        "g": "4ac0d347446e702f",
        "name": "Setup",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "4",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 3020,
        "wires": [
            [
                "836e4535583ce900"
            ]
        ]
    },
    {
        "id": "388cb232c9079e14",
        "type": "ui-chart",
        "z": "57111ca025f638be",
        "g": "4ac0d347446e702f",
        "group": "ec83ebd45553c336",
        "name": "Humidité",
        "label": "Humidité",
        "order": 3,
        "chartType": "line",
        "category": "topic",
        "categoryType": "msg",
        "xAxisLabel": "",
        "xAxisProperty": "x",
        "xAxisPropertyType": "msg",
        "xAxisType": "time",
        "xAxisFormat": "",
        "xAxisFormatType": "ccc HH:mm",
        "yAxisLabel": "",
        "yAxisProperty": "y",
        "ymin": "",
        "ymax": "",
        "action": "replace",
        "stackSeries": false,
        "pointShape": "circle",
        "pointRadius": 4,
        "showLegend": true,
        "removeOlder": "10",
        "removeOlderUnit": "86400",
        "removeOlderPoints": "1000",
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "textColor": [
            "#666666"
        ],
        "textColorDefault": false,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": false,
        "width": "7",
        "height": "4",
        "className": "",
        "x": 1240,
        "y": 3060,
        "wires": [
            []
        ]
    },
    {
        "id": "28c5da6a4d2da8ba",
        "type": "function",
        "z": "57111ca025f638be",
        "g": "4ac0d347446e702f",
        "name": "Charts data",
        "func": "\nlet humidityArray = [];\nlet tempArray = [];\nlet msg1 = {};\nlet msg2 = {};\nlet serieExtArray = [];\n\nmsg.payload.forEach(function (value) {\n    const date = new Date(value.datetime);\n    //Ce cas se produit si le sensor n'a pas fonctionné correctement\n    if (value.humidity != undefined) {\n        tempArray.push({ \"x\": date, \"y\": value.temperature });\n    } else {\n        tempArray.push({ \"x\": date, \"y\": null });\n    }\n    humidityArray.push({ \"x\": date, \"y\": value.humidity });\n});\n\n\nmsg1.topic = msg2.topic = \"SiteWeb\";\n\nmsg1.payload = tempArray;\nmsg1.action = msg2.action = \"append\";\nmsg2.payload = humidityArray;\n\n//node.send(msg);\n\nnode.send([msg1, msg2]);",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 3140,
        "wires": [
            [
                "0866c283bc7f9752"
            ],
            [
                "31e656b176aa6f36"
            ]
        ]
    },
    {
        "id": "98e8f77ab6b80fce",
        "type": "sqlite",
        "z": "57111ca025f638be",
        "g": "4ac0d347446e702f",
        "mydb": "628739f370d1726d",
        "sqlquery": "prepared",
        "sql": "SELECT 'SiteWeb' as location, temperature, humidity, datetime\nFROM TEMPERATURE_EXTERNE\nwhere  datetime BETWEEN datetime($dateSelected) \n     AND  datetime($dateSelected, $nbHours) \norder by datetime asc;",
        "name": "Load temp WEB",
        "x": 730,
        "y": 3140,
        "wires": [
            [
                "28c5da6a4d2da8ba"
            ]
        ]
    },
    {
        "id": "836e4535583ce900",
        "type": "sqlite",
        "z": "57111ca025f638be",
        "g": "4ac0d347446e702f",
        "mydb": "628739f370d1726d",
        "sqlquery": "fixed",
        "sql": "SELECT DE.id_device,\n      DE.mac,\n      SE.id_sensor, \n      LODE.id_location,\n      LOC.location,\n      LOC.description\n  FROM LOCATION LOC\n      JOIN \n      LOCATION_DEVICE LODE ON LODE.id_location = LOC.id_location\n      JOIN \n       DEVICE DE ON DE.id_device = LODE.id_device\n      JOIN\n      SENSOR SE ON SE.id_device = DE.id_device AND SE.id_role == 1\n WHERE EXISTS (\n      SELECT 1\n        FROM TEMPERATURE\n      WHERE id_location = LOC.id_location\n  )",
        "name": "Load devices",
        "x": 300,
        "y": 2980,
        "wires": [
            [
                "f138d867ef859cef"
            ]
        ]
    },
    {
        "id": "0a4b76749339d8cd",
        "type": "function",
        "z": "57111ca025f638be",
        "g": "4ac0d347446e702f",
        "name": "Params",
        "func": "if (msg.topic === \"Slider\") {\n    flow.set('Slider', msg.payload);\n}\nif (msg.topic === \"DatePicker\") {\n    flow.set('DatePicker', msg.payload);\n}\n\nif (msg.devices != undefined) {\n    let status= false;\n    msg.devices.forEach(function (device) {\n        if (device.mac == 'SiteWeb') {\n            status = true;\n        } \n    });\n    context.set('SiteWeb', status);\n}\n\nlet getSiteWeb = context.get('SiteWeb') || false;\n\nif (getSiteWeb) {\n    msg.dateSelected = flow.get('dateSelected');\n    msg.params = {\n        $dateSelected: flow.get('DatePicker'),\n        $nbHours: '+' + flow.get('Slider') + ' hours'\n    }\n\n    return msg;\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 3080,
        "wires": [
            [
                "98e8f77ab6b80fce"
            ]
        ]
    },
    {
        "id": "ea6fbc3a9d80e6ea",
        "type": "comment",
        "z": "57111ca025f638be",
        "g": "4ac0d347446e702f",
        "name": "Graphique temperature",
        "info": "",
        "x": 1240,
        "y": 2960,
        "wires": []
    },
    {
        "id": "fdcf63160f9713c2",
        "type": "comment",
        "z": "57111ca025f638be",
        "g": "4ac0d347446e702f",
        "name": " températures externes - site web",
        "info": "",
        "x": 830,
        "y": 3180,
        "wires": []
    },
    {
        "id": "e0694b109915343b",
        "type": "function",
        "z": "57111ca025f638be",
        "g": "4ac0d347446e702f",
        "name": "Charts Data",
        "func": "let humidityArray = [];\nlet tempArray = [];\nlet msg1 = {};\nlet msg2 = {};\nlet serieExtArray = [];\n\nlet lastIdLocation = 0;\n\nmsg.payload.forEach(function (value) {\n    if (lastIdLocation != value.id_location) {\n        if (lastIdLocation != 0) {\n            msg1.payload = tempArray;\n            msg2.payload = humidityArray;\n            node.send([msg1, msg2]);\n            //on fait append après la 1ère insertion\n            msg1.action = \"append\";\n            msg2.action = \"append\";\n           \n        }\n\n        lastIdLocation = value.id_location;\n        tempArray = [];\n        humidityArray = [];\n\n        msg1.topic = value.acronyme;\n        msg2.topic = value.acronyme;\n    }\n\n    const date = new Date(value.datetime);\n       //Ce cas se produit si le sensor n'a pas fonctionné correctement\n    if (value.humidity != undefined) {\n        tempArray.push({ \"x\": date, \"y\": value.temperature });\n    } else {\n        tempArray.push({ \"x\": date, \"y\": null });\n    }\n    humidityArray.push({ \"x\": date, \"y\": value.humidity });\n});\nif (lastIdLocation == 0) {\n    msg1.action = \"replace\";\n    msg2.action = \"replace\";\n}\nmsg1.payload = tempArray;\nmsg2.payload = humidityArray;\nreturn [msg1, msg2];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 2930,
        "wires": [
            [
                "91ced026339a3eeb",
                "50bc4f6c5feac4f8",
                "a7888e8a0576cd47"
            ],
            [
                "388cb232c9079e14"
            ]
        ],
        "outputLabels": [
            "Temperature",
            "Humidity"
        ]
    },
    {
        "id": "0866c283bc7f9752",
        "type": "delay",
        "z": "57111ca025f638be",
        "g": "4ac0d347446e702f",
        "name": "Délai",
        "pauseType": "delay",
        "timeout": "300",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1060,
        "y": 3100,
        "wires": [
            [
                "91ced026339a3eeb"
            ]
        ]
    },
    {
        "id": "31e656b176aa6f36",
        "type": "delay",
        "z": "57111ca025f638be",
        "g": "4ac0d347446e702f",
        "name": "Délai",
        "pauseType": "delay",
        "timeout": "300",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1060,
        "y": 3150,
        "wires": [
            [
                "388cb232c9079e14"
            ]
        ],
        "info": "Délai\r\nCe délais est ajouté pour que la mise à jour du \r\ngraphique fonctionne.\r\nCeci permets de faire un update du graphique après que les sensors ont été chargés."
    },
    {
        "id": "0c97012507b7fb6d",
        "type": "serial out",
        "z": "57111ca025f638be",
        "d": true,
        "g": "99b0856dd2e01ab4",
        "name": "Serial out",
        "serial": "88425ab7cad6cc83",
        "x": 890,
        "y": 4290,
        "wires": []
    },
    {
        "id": "2b47b1be61752b81",
        "type": "function",
        "z": "57111ca025f638be",
        "d": true,
        "g": "99b0856dd2e01ab4",
        "name": "To serial port",
        "func": "global.set(\"GatewayConfig\", msg.payload);\nmsg.payload = \"@\" + msg.topic + \":\" + msg.payload;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 4290,
        "wires": [
            [
                "0c97012507b7fb6d"
            ]
        ]
    },
    {
        "id": "65ebe7cecc4ac2d8",
        "type": "ui-template",
        "z": "57111ca025f638be",
        "d": true,
        "g": "99b0856dd2e01ab4",
        "group": "9f41fa0923a34ac2",
        "page": "",
        "ui": "",
        "name": "Last config",
        "order": 3,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n  <v-container>\n    <v-row>\n      <v-textarea v-model=\"message\" label=\"Message\" maxlength=\"120\" counter single-line></v-textarea>\n    </v-row>\n    <v-row>\n      <v-btn label=\"Copier data\" @click=\"onSubmit\">Copier data</v-btn>\n    </v-row>\n  </v-container>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        message: '',\n      }\n    },\n    watch: {\n            // watch for any changes of \"count\"\n            msg: function () {\n                this.message = this.msg.payload;\n                //this.message = JSON.stringify(this.msg.payload);\n            }\n        },\n    methods: {\n      onSubmit: function () {\n        \n        this.send({payload: this.message});\n      },\n    },\n  }\n</script>",
        "storeOutMessages": true,
        "passthru": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 320,
        "y": 4290,
        "wires": [
            [
                "469cc2e3af8f2112"
            ]
        ]
    },
    {
        "id": "9ee742908744f209",
        "type": "debug",
        "z": "57111ca025f638be",
        "g": "adca6ef2dfcba80e",
        "name": "debug 172",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 4170,
        "wires": []
    },
    {
        "id": "469cc2e3af8f2112",
        "type": "ui-template",
        "z": "57111ca025f638be",
        "d": true,
        "g": "99b0856dd2e01ab4",
        "group": "9f41fa0923a34ac2",
        "page": "",
        "ui": "",
        "name": "Gateway config",
        "order": 2,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n  <v-form v-model=\"valid\" @submit.prevent=\"onSubmit\">\n    <v-container>\n      <div>\n        NETWORK\n        <v-row dense>\n          <v-col cols=\"6\">\n            <v-switch v-model=\"modeWireless\" color=\"primary\" label=\"Activation réseau\" hide-details></v-switch>\n          </v-col>\n        </v-row>\n      </div>\n      <div>\n        WIFI\n        <v-row dense>\n          <v-col cols=\"6\">\n            <v-text-field v-model=\"config.ssid\" @mousedown:control=\"showConfig\" density=\"compact\" :counter=\"15\"\n              label=\"SSID\" :disabled=\"!modeWireless\"></v-text-field>\n          </v-col>\n\n          <v-col cols=\"6\">\n            <v-text-field v-model=\"config.ssidPwd\" @mousedown:control=\"showConfig\" density=\"compact\" :counter=\"15\"\n              label=\"Mot de passe\" hide-details :disabled=\"!modeWireless\"></v-text-field>\n          </v-col>\n        </v-row>\n      </div>\n      <div>\n        MQTT server\n        <v-row dense>\n          <v-col cols=\"6\" md=\"6\">\n            <v-text-field v-model=\"config.mqttIpAddress\" @mousedown:control=\"showConfig\" density=\"compact\" :counter=\"15\"\n              label=\"Adresse IP\" :disabled=\"!modeWireless\"></v-text-field>\n          </v-col>\n\n          <v-col cols=\"3\" md=\"3\">\n            <v-text-field v-model=\"config.mqttPort\" @mousedown:control=\"showConfig\" density=\"compact\" :counter=\"4\"\n              label=\"Port\"  :disabled=\"!modeWireless\"></v-text-field>\n          </v-col>\n        </v-row>\n      </div>\n      <div>\n        MQTT usager\n        <v-row dense>\n          <v-col cols=\"6\">\n            <v-text-field v-model=\"config.mqttUserId\" @mousedown:control=\"showConfig\" density=\"compact\" :counter=\"15\"\n              label=\"ID\"  :disabled=\"!modeWireless\"></v-text-field>\n          </v-col>\n        </v-row>\n        <v-row dense>\n          <v-col cols=\"6\">\n            <v-text-field v-model=\"config.mqttUser\" @mousedown:control=\"showConfig\" density=\"compact\" :counter=\"15\"\n              label=\"User\"  :disabled=\"!modeWireless\"></v-text-field>\n          </v-col>\n          <v-col cols=\"6\">\n            <v-text-field v-model=\"config.mqttPassword\" @mousedown:control=\"showConfig\" density=\"compact\" :counter=\"15\"\n              label=\"Mot de passe\"  :disabled=\"!modeWireless\">\n            </v-text-field>\n          </v-col>\n        </v-row>\n      </div>\n      <v-container>\n        <v-textarea v-model=\"message\" :readonly=\"true\" label=\"Message\" maxlength=\"120\" counter single-line></v-textarea>\n      </v-container>\n      <v-row>\n        <v-btn type=\"submit\" :loading=\"loading\">OK</v-btn>\n      </v-row>\n    </v-container>\n  </v-form>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        valid: false,\n        modeWireless: true,\n        config: {\n          ssid: '',\n          ssidPwd: '',\n          mqttIpAddress: '',\n          mqttPort: '',\n          mqttUserId: '',\n          mqttUser: '',\n          mqttPassword: '',\n        },\n       \n        message: '',\n        loading: false\n      }\n    },\n    watch: {\n      // watch for any changes of \"count\"\n      msg: function () {\n          //this.message = this.msg.payload;\n          this.message = this.msg.payload;\n          const msgConfig = JSON.parse(this.msg.payload);\n          //this.send(msgConfig);\n          this.modeWireless = msgConfig.modeWireless;\n          this.config.ssid = msgConfig.data.ssid;\n          this.config.ssidPwd = msgConfig.data.ssidPwd;\n\n          this.config.mqttIpAddress = msgConfig.data.mqttIpAddress;\n          this.config.mqttPort = msgConfig.data.mqttPort;\n\n          this.config.mqttUserId = msgConfig.data.mqttUserId;\n          this.config.mqttUser = msgConfig.data.mqttUser;\n          this.config.mqttPassword = msgConfig.data.mqttPassword;\n\n      },\n    },\n    methods: {\n      showConfig: function () {\n        this.message = JSON.stringify(this.config, null, 4)\n      },\n      onSubmit: function () {\n        //this.loading = true;\n        //setTimeout(() => (this.loading = false), 2000);\n\n        let infoObj = {\n          \"header\": { \"type\": \"ConfigGateway\", \"modeWireless\": this.modeWireless },\n          \"data\": this.config \n        };\n        \n        this.message = \"Topic: dom-sys.server/gateway_config\\n \"\n          + \"Config:\\n\" + JSON.stringify(infoObj, null, 4);\n     \n        this.send({payload: JSON.stringify(infoObj), topic:\"dom-sys.server/gateway_config\"});\n      },\n    },\n  }\n</script>",
        "storeOutMessages": true,
        "passthru": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 500,
        "y": 4290,
        "wires": [
            [
                "2b47b1be61752b81"
            ]
        ]
    },
    {
        "id": "5826ad71ca8be439",
        "type": "inject",
        "z": "57111ca025f638be",
        "d": true,
        "g": "99b0856dd2e01ab4",
        "name": "SetConfig",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "GatewayConfig",
        "payloadType": "global",
        "x": 140,
        "y": 4290,
        "wires": [
            [
                "65ebe7cecc4ac2d8"
            ]
        ]
    },
    {
        "id": "6c48e35750a5c6be",
        "type": "link in",
        "z": "57111ca025f638be",
        "g": "4ac0d347446e702f",
        "name": "link in 1",
        "links": [
            "e4aecc6f336ce4bc"
        ],
        "x": 505,
        "y": 3140,
        "wires": [
            [
                "59157c73ba907ed4"
            ]
        ]
    },
    {
        "id": "53915f2f274e75b9",
        "type": "comment",
        "z": "57111ca025f638be",
        "g": "b3735df348adb38e",
        "name": "À développer",
        "info": "À développer",
        "x": 150,
        "y": 3420,
        "wires": []
    },
    {
        "id": "72f534142f1ef687",
        "type": "mqtt in",
        "z": "57111ca025f638be",
        "g": "2ff47af73d8a3d20",
        "name": "",
        "topic": "dom-sys.sensor/#",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "c6a29fab98717cbb",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 3650,
        "wires": [
            [
                "33e27730c229d679",
                "bd481b8dd3e88e7d"
            ]
        ]
    },
    {
        "id": "3e8251f62ce3c3c7",
        "type": "function",
        "z": "57111ca025f638be",
        "g": "2ff47af73d8a3d20",
        "name": "GatewayLog",
        "func": "\nlet message = JSON.stringify(msg.payload);\n\nswitch (msg.topic) {\n    case \"dom-sys.sensor/status\":\n        msg.params = {\n            $mac: msg.mac,\n            $log: message,\n            $topic: msg.topic,\n            $event_type: msg.payload.header.type,\n            $counter: msg.payload.header.counter,\n            $version: msg.payload.header.version\n        }\n        return msg;\n\n    default:\n        \n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 3700,
        "wires": [
            [
                "97c2bcd44f43299c"
            ]
        ]
    },
    {
        "id": "97c2bcd44f43299c",
        "type": "sqlite",
        "z": "57111ca025f638be",
        "g": "2ff47af73d8a3d20",
        "mydb": "628739f370d1726d",
        "sqlquery": "prepared",
        "sql": "INSERT INTO SYSTEM_LOG (\n    id_device,\n    id_event_type,\n    log,\n    topic,\n    counter,\n    version,\n    datetime\n)\nVALUES (\n  ( SELECT id_device \n    FROM DEVICE \n    WHERE DEVICE.mac LIKE $mac ),\n  ( SELECT id_event_type\n    FROM EVENT_TYPE\n    WHERE event_type LIKE $event_type),\n  $log,\n  $topic,\n  $counter,\n  $version,\n  datetime('now', 'localtime')\n);\n",
        "name": "SystemLog",
        "x": 700,
        "y": 3700,
        "wires": [
            []
        ]
    },
    {
        "id": "bd481b8dd3e88e7d",
        "type": "function",
        "z": "57111ca025f638be",
        "g": "2ff47af73d8a3d20",
        "name": "Device exist",
        "func": "let devicesMap = global.get('devicesMap')|| new Map();\nmsg.mac = msg.payload.header.mac;\n\nmsg.device = devicesMap.get(msg.mac);\n\nif(msg.device == null){\n    //Si le device n'est pas dans la liste il faut créer une \n    // nouvelle configuration.\n     return [msg, null];\n}else{\n    return [null, msg];\n}\n\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 3650,
        "wires": [
            [
                "b46d7561a233fae7",
                "f91b976e245dae35"
            ],
            [
                "3e8251f62ce3c3c7",
                "ee416b1f0f20e4d8"
            ]
        ],
        "outputLabels": [
            "Nouveau device",
            "Device Existe"
        ]
    },
    {
        "id": "8d1c099b642472fa",
        "type": "sqlite",
        "z": "57111ca025f638be",
        "g": "2ff47af73d8a3d20",
        "mydb": "628739f370d1726d",
        "sqlquery": "prepared",
        "sql": "INSERT INTO DEVICE (\n   mac,\n   sleep_duration,\n   im_alive_period,\n   datetime\n)\nVALUES (\n   $mac,\n   30,\n   3600,\n   datetime('now', 'localtime') \n);\n",
        "name": "Insert DEVICE",
        "x": 770,
        "y": 3580,
        "wires": [
            [
                "a147248bb7549068",
                "e168397444a4efa5"
            ]
        ]
    },
    {
        "id": "f37c33f5cc57547c",
        "type": "inject",
        "z": "57111ca025f638be",
        "g": "2ff47af73d8a3d20",
        "name": "Test",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "dom-sys.sensor/status",
        "payload": "{\"header\":{\"mac\":\"01:02:03:04:05:06\",\"type\":\"START_SIGNAL\",\"version\":1,\"counter\":5,\"error\":\"\"},\"data\":{\"cycle_duration\":0}}",
        "payloadType": "json",
        "x": 190,
        "y": 3710,
        "wires": [
            [
                "bd481b8dd3e88e7d"
            ]
        ]
    },
    {
        "id": "a147248bb7549068",
        "type": "link out",
        "z": "57111ca025f638be",
        "g": "2ff47af73d8a3d20",
        "name": "New device",
        "mode": "link",
        "links": [
            "5e2d481f338e5d45"
        ],
        "x": 925,
        "y": 3580,
        "wires": []
    },
    {
        "id": "ee416b1f0f20e4d8",
        "type": "function",
        "z": "57111ca025f638be",
        "g": "2ff47af73d8a3d20",
        "name": "Send config",
        "func": "let devicesMap = global.get('devicesMap'|| new Map());\n\n\nif(msg.payload.header.type == \"ASK_CONFIG\"){\n    msg.device = devicesMap.get(msg.mac);\n    \n    let device = {\n    \"header\":{\"mac\":msg.mac,\"type\":\"CONFIG\"},\n    \"device\": msg.device\n    }\n    msg.payload = device;\n\n    return msg; \n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 3660,
        "wires": [
            [
                "ba7bd09e9170283f"
            ]
        ]
    },
    {
        "id": "b46d7561a233fae7",
        "type": "delay",
        "z": "57111ca025f638be",
        "g": "2ff47af73d8a3d20",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 590,
        "y": 3630,
        "wires": [
            [
                "ee416b1f0f20e4d8"
            ]
        ]
    },
    {
        "id": "ba7bd09e9170283f",
        "type": "json",
        "z": "57111ca025f638be",
        "g": "2ff47af73d8a3d20",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 900,
        "y": 3660,
        "wires": [
            [
                "ed7c07d39dda883d"
            ]
        ]
    },
    {
        "id": "ed7c07d39dda883d",
        "type": "mqtt out",
        "z": "57111ca025f638be",
        "g": "2ff47af73d8a3d20",
        "name": "",
        "topic": "dom-sys.server/update_config",
        "qos": "1",
        "retain": "true",
        "respTopic": "",
        "contentType": "application/json",
        "userProps": "",
        "correl": "",
        "expiry": "60",
        "broker": "c6a29fab98717cbb",
        "x": 970,
        "y": 3710,
        "wires": []
    },
    {
        "id": "1559f9fd4805b155",
        "type": "link out",
        "z": "57111ca025f638be",
        "g": "abbcf13b0652a794",
        "name": "Liste devices",
        "mode": "link",
        "links": [
            "f18c5b191d337944",
            "4b27a81d9d07a115"
        ],
        "x": 835,
        "y": 250,
        "wires": []
    },
    {
        "id": "5185ef5d8d8f239a",
        "type": "sqlite",
        "z": "57111ca025f638be",
        "g": "abbcf13b0652a794",
        "mydb": "628739f370d1726d",
        "sqlquery": "fixed",
        "sql": "select * from SENSOR_VIEW;",
        "name": "Load Devices",
        "x": 280,
        "y": 250,
        "wires": [
            [
                "79e281a2bc6e4e81",
                "f8df29dd84233a42"
            ]
        ]
    },
    {
        "id": "a64ce37c329514c8",
        "type": "function",
        "z": "57111ca025f638be",
        "g": "abbcf13b0652a794",
        "name": "Save in memory",
        "func": "let devicesMap = msg.payload;\n\nglobal.set('devicesMap', devicesMap);\nnode.send(msg,false);\n\nnode.status({fill:\"green\",shape:\"dot\",text:\"Devices chargés\"});\n\nreturn msg.topic;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 250,
        "wires": [
            [
                "1559f9fd4805b155"
            ]
        ]
    },
    {
        "id": "79e281a2bc6e4e81",
        "type": "subflow:bc1a8754bbd79fc2",
        "z": "57111ca025f638be",
        "g": "abbcf13b0652a794",
        "name": "",
        "x": 500,
        "y": 250,
        "wires": [
            [
                "a64ce37c329514c8"
            ]
        ]
    },
    {
        "id": "5e2d481f338e5d45",
        "type": "link in",
        "z": "57111ca025f638be",
        "g": "abbcf13b0652a794",
        "name": "IN-refresh Devices",
        "links": [
            "836dfbcc857f6e1b",
            "a147248bb7549068",
            "aecd825fcf9a94de",
            "4b59343b5845de12",
            "34394aded35a14f7",
            "287024651fc3c04b"
        ],
        "x": 125,
        "y": 290,
        "wires": [
            [
                "5185ef5d8d8f239a",
                "892a6d47089017b7"
            ]
        ]
    },
    {
        "id": "892a6d47089017b7",
        "type": "debug",
        "z": "57111ca025f638be",
        "g": "abbcf13b0652a794",
        "name": "debug 155",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 290,
        "y": 310,
        "wires": []
    },
    {
        "id": "5079e04311e50d49",
        "type": "link in",
        "z": "57111ca025f638be",
        "g": "4ac0d347446e702f",
        "name": "IN-Chart devices",
        "links": [
            "70beddcc675e5f7b"
        ],
        "x": 75,
        "y": 2940,
        "wires": [
            [
                "5b762b2b39d0624e"
            ]
        ]
    },
    {
        "id": "605ccf88af3850e5",
        "type": "ui-event",
        "z": "57111ca025f638be",
        "g": "587ef4eef498a3b8",
        "ui": "d4c9d9e9b37824ea",
        "name": "",
        "x": 110,
        "y": 4500,
        "wires": [
            [
                "b3720395df4a02fa",
                "70beddcc675e5f7b"
            ]
        ]
    },
    {
        "id": "70beddcc675e5f7b",
        "type": "link out",
        "z": "57111ca025f638be",
        "g": "587ef4eef498a3b8",
        "name": "UI-Control",
        "mode": "link",
        "links": [
            "334fedd962dcc812",
            "5079e04311e50d49",
            "f17a5db9540691db"
        ],
        "x": 225,
        "y": 4500,
        "wires": []
    },
    {
        "id": "b3720395df4a02fa",
        "type": "debug",
        "z": "57111ca025f638be",
        "g": "587ef4eef498a3b8",
        "name": "debug 188",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 260,
        "y": 4460,
        "wires": []
    },
    {
        "id": "5b762b2b39d0624e",
        "type": "function",
        "z": "57111ca025f638be",
        "g": "4ac0d347446e702f",
        "name": "Filtre action",
        "func": "if (msg.topic == \"$pageview\" && msg.payload.page.name ==\"Graphique\" ){\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 2940,
        "wires": [
            [
                "836e4535583ce900"
            ]
        ]
    },
    {
        "id": "f91b976e245dae35",
        "type": "change",
        "z": "57111ca025f638be",
        "g": "2ff47af73d8a3d20",
        "name": "Params",
        "rules": [
            {
                "t": "set",
                "p": "params.$mac",
                "pt": "msg",
                "to": "mac",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 3580,
        "wires": [
            [
                "8d1c099b642472fa"
            ]
        ]
    },
    {
        "id": "bd3f3c3479cd419d",
        "type": "function",
        "z": "57111ca025f638be",
        "g": "2a7669fef789d1e6",
        "name": "Set devices",
        "func": "const devicesMap = global.get('devicesMap')|| [];\n\nmsg.devices = Array.from(devicesMap.values());\nmsg.rolesList = global.get('SENSOR_ROLES')|| [];\n\nmsg.action = \"loadDevices\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 1000,
        "wires": [
            [
                "e114f876591ccfa1",
                "34bfc8c76f04a6d5"
            ]
        ]
    },
    {
        "id": "f18c5b191d337944",
        "type": "link in",
        "z": "57111ca025f638be",
        "g": "2a7669fef789d1e6",
        "name": "IN-Refresh ui-table of devices",
        "links": [
            "1559f9fd4805b155"
        ],
        "x": 275,
        "y": 960,
        "wires": [
            [
                "bd3f3c3479cd419d"
            ]
        ]
    },
    {
        "id": "91a754628498f090",
        "type": "inject",
        "z": "57111ca025f638be",
        "g": "2a7669fef789d1e6",
        "name": "Setup",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "6",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 1040,
        "wires": [
            [
                "bd3f3c3479cd419d"
            ]
        ]
    },
    {
        "id": "d799edabaaf35113",
        "type": "function",
        "z": "57111ca025f638be",
        "g": "2a7669fef789d1e6",
        "name": "Filtre source",
        "func": "if (msg.topic == \"$pageview\" && msg.payload.page.name ==\"Graphique\" ){\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 1000,
        "wires": [
            [
                "bd3f3c3479cd419d"
            ]
        ]
    },
    {
        "id": "334fedd962dcc812",
        "type": "link in",
        "z": "57111ca025f638be",
        "g": "2a7669fef789d1e6",
        "name": "link in 3",
        "links": [
            "70beddcc675e5f7b"
        ],
        "x": 95,
        "y": 1000,
        "wires": [
            [
                "d799edabaaf35113"
            ]
        ]
    },
    {
        "id": "e114f876591ccfa1",
        "type": "link out",
        "z": "57111ca025f638be",
        "g": "2a7669fef789d1e6",
        "name": "Load editor",
        "mode": "link",
        "links": [
            "43c18597783c3def"
        ],
        "x": 545,
        "y": 1000,
        "wires": []
    },
    {
        "id": "cda512180b8c3b67",
        "type": "comment",
        "z": "57111ca025f638be",
        "d": true,
        "g": "36653046b6da3c92",
        "name": "À revoir",
        "info": "",
        "x": 110,
        "y": 3810,
        "wires": []
    },
    {
        "id": "fcfe77fc8451fbb3",
        "type": "ui-template",
        "z": "57111ca025f638be",
        "g": "99b0856dd2e01ab4",
        "group": "9f41fa0923a34ac2",
        "page": "",
        "ui": "",
        "name": "",
        "order": 1,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n    <div>\n        <h2>Section à revoir</h2>\n        <p>  - À l'origine utilisée pour saisir les données de configuration pour se connecter au MQTT.\n        Maintenant tout passe par le port série. </p>\n    </div>\n</template>\n\n\n<style>\n    /* define any styles here - supports raw CSS */\n    .my-class {\n        color: red;\n    }\n</style>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 400,
        "y": 4340,
        "wires": [
            []
        ]
    },
    {
        "id": "f8df29dd84233a42",
        "type": "debug",
        "z": "57111ca025f638be",
        "g": "abbcf13b0652a794",
        "name": "debug 199",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 470,
        "y": 300,
        "wires": []
    },
    {
        "id": "ab77190a3b0808c4",
        "type": "ui-template",
        "z": "57111ca025f638be",
        "g": "b3bc735139a25964",
        "group": "5dfbb318f0d542be",
        "page": "",
        "ui": "",
        "name": "Locations",
        "order": 2,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n  <v-data-table\n    :headers=\"headers\"\n    :items=\"locations\"\n    :sort-by=\"[{ key: 'id', order: 'asc' }]\"\n  >\n    <template v-slot:top>\n      <v-toolbar flat>\n        <v-toolbar-title>Locations</v-toolbar-title>\n        <v-divider class=\"mx-4\" inset vertical></v-divider>\n        <v-spacer></v-spacer>\n        <v-dialog v-model=\"dialog\" max-width=\"500px\">\n          <template v-slot:activator=\"{ props }\">\n            <v-btn class=\"mb-2\" color=\"primary\" dark v-bind=\"props\">\n              Ajouter\n            </v-btn>\n          </template>\n          <v-card>\n            <v-card-title>\n              <span class=\"text-h5\">{{ formTitle }}</span>\n            </v-card-title>\n\n            <v-card-text>\n              <v-container>\n                <v-row>\n                  <v-col cols=\"4\" >\n                    <v-text-field\n                      v-model=\"editedItem.location\"\n                      label=\"Location\"\n                    ></v-text-field>\n                  </v-col>\n                  <v-col cols=\"12\" >\n                    <v-text-field\n                      v-model=\"editedItem.description\"\n                      label=\"Description\"\n                    ></v-text-field>\n                  </v-col>\n                </v-row>\n                <v-row>\n                  <v-col cols=\"8\">\n                    <v-select\n                      v-model=\"device\"\n                      :item-props=\"itemProps\"\n                      :items=\"devices\"\n                      label=\"Device\"\n                    ></v-select>\n                  </v-col>\n                </v-row>\n              </v-container>\n            </v-card-text>\n\n            <v-card-actions>\n              <v-spacer></v-spacer>\n              <v-btn color=\"blue-darken-1\" variant=\"text\" @click=\"close\">\n                Annuler\n              </v-btn>\n              <v-btn color=\"blue-darken-1\" variant=\"text\" @click=\"save\">\n                Sauvegarder\n              </v-btn>\n            </v-card-actions>\n          </v-card>\n        </v-dialog>\n        <v-dialog v-model=\"dialogDelete\" max-width=\"500px\">\n          <v-card>\n            <v-card-title class=\"text-h5\"\n              >Confirmer la destruction?</v-card-title\n            >\n            <v-card-actions>\n              <v-spacer></v-spacer>\n              <v-btn color=\"blue-darken-1\" variant=\"text\" @click=\"closeDelete\"\n                >Annuler</v-btn\n              >\n              <v-btn\n                color=\"blue-darken-1\"\n                variant=\"text\"\n                @click=\"deleteItemConfirm\"\n                >OK</v-btn\n              >\n              <v-spacer></v-spacer>\n            </v-card-actions>\n          </v-card>\n        </v-dialog>\n      </v-toolbar>\n    </template>\n    <template v-slot:item.actions=\"{ item }\">\n      <v-icon class=\"me-2\" size=\"small\" @click=\"editItem(item)\">\n        mdi-pencil\n      </v-icon>\n      <v-icon size=\"small\" @click=\"deleteItem(item)\"> mdi-delete </v-icon>\n    </template>\n    <template v-slot:no-data>\n      <v-btn color=\"primary\" @click=\"initialize\"> Reset </v-btn>\n    </template>\n    <template v-slot:bottom>\n      <div class=\"text-center pt-2\">\n        <v-pagination :length=\"pageCount\"></v-pagination>\n      </div>\n    </template>\n  </v-data-table>\n</template>\n\n<script>\n  export default {\n    data: () => ({\n      dialog: false,\n      dialogDelete: false,\n      headers: [\n        { title: 'ID', key: 'id_location' },\n        { title: 'Location', key: 'location' },\n        { title: 'Description', key: 'description' },\n        {\n          title: 'Device',\n          align: 'center',\n          children: [\n            { title: 'ID', key: 'id_device', align: 'center' },\n            { title: 'Mac', key: 'mac', align: 'center' },\n          ],\n        },\n        { title: 'Actions', key: 'actions', sortable: false },\n      ],\n      locations: [],\n      devices: [],\n      device: {id_device: -1, mac: ''},\n      editedIndex: -1,\n      editedItem: {\n        id: -1,\n        location: '',\n        description: '',\n        id_device: -1,\n        mac:'',\n      },\n      defaultItem: {\n        id: -1,\n        location: '',\n        description: '',\n        id_device: -1, \n        mac: '',\n      },\n      itemsPerPage: 10,\n    }),\n    mounted() {\n      this.locations = this.msg?.locations;\n      this.devices = this.msg?.devices;\n     console.log(\"mounted\");\n    },\n    computed: {\n      formTitle() {\n        return this.editedIndex === -1 ? 'Nouvelle location' : 'Editer location'\n      },\n      pageCount() {\n        return Math.ceil(this.locations.length / this.itemsPerPage)\n      },\n    },\n\n    watch: {\n      //Sur la réception d'un  msg.\n      msg: function(){\n        this.locations = this.msg.locations;\n        this.devices = this.msg.devices;\n        console.log(\"msg received\");\n      },\n      dialog(val) {\n        val || this.close()\n      },\n      dialogDelete(val) {\n        val || this.closeDelete()\n      },\n    },\n\n    created() {\n      this.initialize()\n    },\n\n    methods: {\n      initialize() {\n         \n      },\n      itemProps(item) {\n        return {\n          title: item.mac,\n          subtitle: item.id_device,\n        }\n      },\n      editItem(item) {\n        this.editedIndex = this.locations.indexOf(item)\n        this.editedItem = Object.assign({}, item)\n        this.dialog = true\n      },\n\n      deleteItem(item) {\n        this.editedIndex = this.locations.indexOf(item)\n        this.editedItem = Object.assign({}, item)\n        this.dialogDelete = true\n      },\n\n      deleteItemConfirm() {\n        this.locations.splice(this.editedIndex, 1)\n        this.closeDelete()\n        this.send({type: \"location\",action: \"delete\",location: this.editedItem});\n      },\n\n      close() {\n        this.dialog = false\n        this.$nextTick(() => {\n          this.editedItem = Object.assign({}, this.defaultItem)\n          this.editedIndex = -1\n        })\n      },\n\n      closeDelete() {\n        this.dialogDelete = false\n        this.$nextTick(() => {\n          this.editedItem = Object.assign({}, this.defaultItem)\n          this.editedIndex = -1\n        })\n      },\n\n      save() {\n        this.editedItem.id_device = this.device.id_device\n        this.editedItem.mac = this.device.mac\n        \n        if (this.editedIndex > -1) {\n          Object.assign(this.locations[this.editedIndex], this.editedItem)\n          this.send({type: \"location\",action: \"update\",location: this.editedItem});\n        } else {\n          this.locations.push(this.editedItem)\n          this.send({type: \"location\",action: \"add\",location: this.editedItem});\n        }\n        this.close()\n      },\n    },\n  }\n</script>\n",
        "storeOutMessages": true,
        "passthru": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 640,
        "y": 2520,
        "wires": [
            [
                "9634bf9c54bb399b"
            ]
        ]
    },
    {
        "id": "81b7abe7ef0bf324",
        "type": "function",
        "z": "57111ca025f638be",
        "g": "b3bc735139a25964",
        "name": "Set devices",
        "func": "let payload = msg.payload;\nmsg = {};\nmsg.locations = payload;\n\nconst devicesMap = global.get('devicesMap')|| [];\n\nvar devices = [];\n\ndevicesMap.forEach(function (pDevice) {\n  let device = {};\n  device.id_device = pDevice.id_device;\n  device.mac = pDevice.mac;\n  devices.push(device);\n \n});\n\nmsg.devices = devices;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 2520,
        "wires": [
            [
                "ab77190a3b0808c4"
            ]
        ]
    },
    {
        "id": "b6d93e5a518a187d",
        "type": "sqlite",
        "z": "57111ca025f638be",
        "g": "b3bc735139a25964",
        "mydb": "628739f370d1726d",
        "sqlquery": "fixed",
        "sql": "SELECT LOC.id_location,\n    LOC.location,\n    LOC.description,\n    LOC_D.id_device, \n    DEV.mac\nFROM LOCATION LOC\nleft join LOCATION_DEVICE LOC_D on LOC_D.id_location = LOC.id_location\nleft join DEVICE DEV on DEV.id_device = LOC_D.id_device",
        "name": "Locations",
        "x": 340,
        "y": 2520,
        "wires": [
            [
                "81b7abe7ef0bf324"
            ]
        ]
    },
    {
        "id": "9634bf9c54bb399b",
        "type": "switch",
        "z": "57111ca025f638be",
        "g": "b3bc735139a25964",
        "name": "Action",
        "property": "action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "update",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "add",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "delete",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 770,
        "y": 2520,
        "wires": [
            [
                "d398c2685f10751f"
            ],
            [
                "f3d03b63fe4b9a42"
            ],
            [
                "35ee81ec83130591"
            ]
        ]
    },
    {
        "id": "856c396f768b3a3e",
        "type": "sqlite",
        "z": "57111ca025f638be",
        "g": "b3bc735139a25964",
        "mydb": "628739f370d1726d",
        "sqlquery": "prepared",
        "sql": "INSERT INTO LOCATION (\n    location,\n    description\n    )\nVALUES (\n    $location,\n    $description\n    );\n",
        "name": "Insert ",
        "x": 1040,
        "y": 2520,
        "wires": [
            [
                "fc7b275d96271630"
            ]
        ]
    },
    {
        "id": "f3d03b63fe4b9a42",
        "type": "change",
        "z": "57111ca025f638be",
        "g": "b3bc735139a25964",
        "name": "Params",
        "rules": [
            {
                "t": "set",
                "p": "params.$location",
                "pt": "msg",
                "to": "location.location",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "params.$description",
                "pt": "msg",
                "to": "location.description",
                "tot": "msg"
            },
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "location",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "type",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "action",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 910,
        "y": 2520,
        "wires": [
            [
                "856c396f768b3a3e"
            ]
        ]
    },
    {
        "id": "5608a799bbeed99a",
        "type": "sqlite",
        "z": "57111ca025f638be",
        "g": "b3bc735139a25964",
        "mydb": "628739f370d1726d",
        "sqlquery": "prepared",
        "sql": "DELETE FROM LOCATION\nWHERE id_location = $id_location;",
        "name": "Delete",
        "x": 1040,
        "y": 2570,
        "wires": [
            [
                "fc7b275d96271630"
            ]
        ]
    },
    {
        "id": "35ee81ec83130591",
        "type": "change",
        "z": "57111ca025f638be",
        "g": "b3bc735139a25964",
        "name": "Params",
        "rules": [
            {
                "t": "set",
                "p": "params.$id_location",
                "pt": "msg",
                "to": "location.id_location",
                "tot": "msg"
            },
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "location",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "type",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "action",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 910,
        "y": 2570,
        "wires": [
            [
                "5608a799bbeed99a"
            ]
        ]
    },
    {
        "id": "f17a5db9540691db",
        "type": "link in",
        "z": "57111ca025f638be",
        "g": "b3bc735139a25964",
        "name": "Load locations",
        "links": [
            "70beddcc675e5f7b"
        ],
        "x": 75,
        "y": 2520,
        "wires": [
            [
                "b09a6baa4d77fc24"
            ]
        ]
    },
    {
        "id": "fc7b275d96271630",
        "type": "link out",
        "z": "57111ca025f638be",
        "g": "b3bc735139a25964",
        "name": "call Location-Device",
        "mode": "link",
        "links": [
            "05ef91dab51f8089"
        ],
        "x": 1165,
        "y": 2520,
        "wires": []
    },
    {
        "id": "d398c2685f10751f",
        "type": "change",
        "z": "57111ca025f638be",
        "g": "b3bc735139a25964",
        "name": "Params",
        "rules": [
            {
                "t": "set",
                "p": "params.$id_location",
                "pt": "msg",
                "to": "location.id_location",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "params.$location",
                "pt": "msg",
                "to": "location.location",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "params.$description",
                "pt": "msg",
                "to": "location.description",
                "tot": "msg"
            },
            {
                "t": "delete",
                "p": "type",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "action",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 910,
        "y": 2470,
        "wires": [
            [
                "25b3fec436e514e5"
            ]
        ]
    },
    {
        "id": "25b3fec436e514e5",
        "type": "sqlite",
        "z": "57111ca025f638be",
        "g": "b3bc735139a25964",
        "mydb": "628739f370d1726d",
        "sqlquery": "prepared",
        "sql": "UPDATE LOCATION\nSET location = $location,\n    description = $description\nWHERE id_location = $id_location ;\n\n",
        "name": "Update",
        "x": 1050,
        "y": 2470,
        "wires": [
            [
                "fc7b275d96271630"
            ]
        ]
    },
    {
        "id": "1c35333634deee1a",
        "type": "debug",
        "z": "57111ca025f638be",
        "g": "5e9fb9b860e186cb",
        "name": "debug 201",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 430,
        "y": 2720,
        "wires": []
    },
    {
        "id": "481a8eb90c6cde12",
        "type": "change",
        "z": "57111ca025f638be",
        "g": "5e9fb9b860e186cb",
        "name": "Params",
        "rules": [
            {
                "t": "set",
                "p": "param.$id_location",
                "pt": "msg",
                "to": "location.id_location",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 690,
        "y": 2650,
        "wires": [
            [
                "d416c8d3c0518720"
            ]
        ]
    },
    {
        "id": "43842296b811a69a",
        "type": "sqlite",
        "z": "57111ca025f638be",
        "g": "5e9fb9b860e186cb",
        "mydb": "628739f370d1726d",
        "sqlquery": "prepared",
        "sql": "INSERT OR REPLACE \nINTO LOCATION_DEVICE (\n    id_location,\n    id_device\n    )\nVALUES (\n    $id_location,\n    $id_device\n    )",
        "name": "Insert-Update",
        "x": 860,
        "y": 2700,
        "wires": [
            [
                "335768bf124d0394"
            ]
        ]
    },
    {
        "id": "334518f9a3137cbf",
        "type": "switch",
        "z": "57111ca025f638be",
        "g": "5e9fb9b860e186cb",
        "name": "Location-Device",
        "property": "location.id_device",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "-1",
                "vt": "num"
            },
            {
                "t": "gt",
                "v": "-1",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 510,
        "y": 2680,
        "wires": [
            [
                "481a8eb90c6cde12"
            ],
            [
                "d3cc20dda634a4b0"
            ]
        ],
        "outputLabels": [
            "Delete",
            "Insert-Update"
        ]
    },
    {
        "id": "05ef91dab51f8089",
        "type": "link in",
        "z": "57111ca025f638be",
        "g": "5e9fb9b860e186cb",
        "name": "BD- Location-Device",
        "links": [
            "fc7b275d96271630"
        ],
        "x": 325,
        "y": 2680,
        "wires": [
            [
                "334518f9a3137cbf",
                "1c35333634deee1a"
            ]
        ]
    },
    {
        "id": "d416c8d3c0518720",
        "type": "sqlite",
        "z": "57111ca025f638be",
        "g": "5e9fb9b860e186cb",
        "mydb": "628739f370d1726d",
        "sqlquery": "prepared",
        "sql": "delete from LOCATION_DEVICE \nwhere id_location = $id_location;\n                        ",
        "name": "Delete",
        "x": 890,
        "y": 2650,
        "wires": [
            [
                "335768bf124d0394"
            ]
        ]
    },
    {
        "id": "d3cc20dda634a4b0",
        "type": "change",
        "z": "57111ca025f638be",
        "g": "5e9fb9b860e186cb",
        "name": "Params",
        "rules": [
            {
                "t": "delete",
                "p": "params",
                "pt": "msg"
            },
            {
                "t": "set",
                "p": "params.$id_location",
                "pt": "msg",
                "to": "location.id_location",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "params.$id_device",
                "pt": "msg",
                "to": "location.id_device",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 690,
        "y": 2700,
        "wires": [
            [
                "43842296b811a69a"
            ]
        ]
    },
    {
        "id": "335768bf124d0394",
        "type": "link out",
        "z": "57111ca025f638be",
        "g": "5e9fb9b860e186cb",
        "name": "call Load locations",
        "mode": "link",
        "links": [],
        "x": 1025,
        "y": 2670,
        "wires": []
    },
    {
        "id": "2174f125045eff9a",
        "type": "debug",
        "z": "57111ca025f638be",
        "g": "590af8aa1ccb96c4",
        "name": "debug 202",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 580,
        "wires": []
    },
    {
        "id": "33e27730c229d679",
        "type": "debug",
        "z": "57111ca025f638be",
        "g": "2ff47af73d8a3d20",
        "name": "debug 203",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 270,
        "y": 3600,
        "wires": []
    },
    {
        "id": "aecd825fcf9a94de",
        "type": "link out",
        "z": "57111ca025f638be",
        "d": true,
        "g": "f6ba6aa35208baae",
        "name": "link out 2",
        "mode": "link",
        "links": [
            "5e2d481f338e5d45"
        ],
        "x": 1035,
        "y": 110,
        "wires": []
    },
    {
        "id": "42e44c3404350309",
        "type": "subflow:792784e9fde6f3b4",
        "z": "57111ca025f638be",
        "g": "f6ba6aa35208baae",
        "name": "",
        "x": 250,
        "y": 170,
        "wires": [
            [
                "287024651fc3c04b"
            ]
        ]
    },
    {
        "id": "34bfc8c76f04a6d5",
        "type": "debug",
        "z": "57111ca025f638be",
        "g": "2a7669fef789d1e6",
        "name": "debug 205",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 960,
        "wires": []
    },
    {
        "id": "b09a6baa4d77fc24",
        "type": "function",
        "z": "57111ca025f638be",
        "g": "b3bc735139a25964",
        "name": "Filtre action",
        "func": "if (msg.topic == \"$pageview\" && msg.payload.page.name ==\"Configuration\" ){\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 2520,
        "wires": [
            [
                "b6d93e5a518a187d"
            ]
        ]
    },
    {
        "id": "7fc6273e8dc78f81",
        "type": "sqlite",
        "z": "57111ca025f638be",
        "g": "b0ed271801ea7e6e",
        "mydb": "628739f370d1726d",
        "sqlquery": "prepared",
        "sql": "INSERT INTO SENSOR_ATTRIBUT (\n    id_sensor,\n    name,\n    value)\nVALUES (\n    $id_sensor,\n    $name,\n    $value);\n",
        "name": "Insert Attribut",
        "x": 820,
        "y": 2000,
        "wires": [
            [
                "e37c4f7cb86c4dce"
            ]
        ]
    },
    {
        "id": "e37c4f7cb86c4dce",
        "type": "sqlite",
        "z": "57111ca025f638be",
        "g": "b0ed271801ea7e6e",
        "mydb": "628739f370d1726d",
        "sqlquery": "fixed",
        "sql": "SELECT last_insert_rowid();",
        "name": "Get last ID",
        "x": 990,
        "y": 2000,
        "wires": [
            [
                "6c9f7c455b93752f"
            ]
        ]
    },
    {
        "id": "6c9f7c455b93752f",
        "type": "change",
        "z": "57111ca025f638be",
        "g": "b0ed271801ea7e6e",
        "name": "Get last ID",
        "rules": [
            {
                "t": "set",
                "p": "action",
                "pt": "msg",
                "to": "attributLastId",
                "tot": "str"
            },
            {
                "t": "move",
                "p": "payload[0].last_insert_rowid()",
                "pt": "msg",
                "to": "insertId",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1150,
        "y": 2010,
        "wires": [
            [
                "3e8337de3279a6e3"
            ]
        ]
    },
    {
        "id": "c83f16133216d0cf",
        "type": "do-return",
        "z": "57111ca025f638be",
        "g": "b0ed271801ea7e6e",
        "name": "",
        "mode": "done",
        "saveValue": false,
        "x": 790,
        "y": 2060,
        "wires": []
    },
    {
        "id": "3e8337de3279a6e3",
        "type": "function",
        "z": "57111ca025f638be",
        "g": "b0ed271801ea7e6e",
        "name": "Attributs to insert",
        "func": "if(msg.action == \"attributLastId\"){\n    msg.attribut.id_attribut = msg.insertId;\n}\ndelete msg.attribut;\n\n msg.device.sensors.forEach(function (sensor) {\n    sensor.attributs.forEach(function (attribut) {\n        if(attribut.id_attribut == -1){\n            msg.attribut = attribut;\n             msg.params = {\n                $id_sensor: sensor.id_sensor,\n                $name: attribut.name,\n                $value: attribut.value\n           }\n            return attribut;\n        }\n    });\n});\n\nif(msg.attribut != undefined){\n    return [msg, null];\n}\nreturn [null, msg];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 2010,
        "wires": [
            [
                "7fc6273e8dc78f81"
            ],
            [
                "c83f16133216d0cf"
            ]
        ],
        "outputLabels": [
            "Sensor",
            "Done"
        ]
    },
    {
        "id": "7b9d61eb6156dccd",
        "type": "change",
        "z": "57111ca025f638be",
        "g": "111103eaa0204252",
        "name": "Params",
        "rules": [
            {
                "t": "set",
                "p": "params.$id_device",
                "pt": "msg",
                "to": "device.id_device",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "params.$sleep_duration",
                "pt": "msg",
                "to": "device.sleep_duration",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "params.$im_alive_period",
                "pt": "msg",
                "to": "device.im_alive_period",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 880,
        "y": 1180,
        "wires": [
            [
                "540cfc2a38c73116"
            ]
        ]
    },
    {
        "id": "540cfc2a38c73116",
        "type": "sqlite",
        "z": "57111ca025f638be",
        "g": "111103eaa0204252",
        "mydb": "628739f370d1726d",
        "sqlquery": "prepared",
        "sql": "UPDATE DEVICE \nSET sleep_duration = $sleep_duration,\n  im_alive_period = $im_alive_period,\n  datetime = strftime('%s','now')\nWHERE id_device = $id_device;",
        "name": "Update",
        "x": 1020,
        "y": 1180,
        "wires": [
            [
                "c754a60ba19efacd"
            ]
        ]
    },
    {
        "id": "92f799c2f6ba50c6",
        "type": "switch",
        "z": "57111ca025f638be",
        "g": "111103eaa0204252",
        "name": "Action",
        "property": "action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "update",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "delete",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 720,
        "y": 1210,
        "wires": [
            [
                "7b9d61eb6156dccd"
            ],
            [
                "e6693411bb4faea5"
            ],
            []
        ]
    },
    {
        "id": "e6693411bb4faea5",
        "type": "change",
        "z": "57111ca025f638be",
        "g": "111103eaa0204252",
        "name": "Params",
        "rules": [
            {
                "t": "set",
                "p": "params.$id_device",
                "pt": "msg",
                "to": "device.id_device",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 880,
        "y": 1230,
        "wires": [
            [
                "25b2bcf42a64aea2"
            ]
        ]
    },
    {
        "id": "25b2bcf42a64aea2",
        "type": "sqlite",
        "z": "57111ca025f638be",
        "g": "111103eaa0204252",
        "mydb": "628739f370d1726d",
        "sqlquery": "prepared",
        "sql": "DELETE FROM DEVICE\nWHERE id_device = $id_device;",
        "name": "Delete",
        "x": 1010,
        "y": 1230,
        "wires": [
            [
                "78c16118d6e14e7b"
            ]
        ]
    },
    {
        "id": "c754a60ba19efacd",
        "type": "do-return",
        "z": "57111ca025f638be",
        "g": "111103eaa0204252",
        "name": "",
        "mode": "done",
        "saveValue": false,
        "x": 1150,
        "y": 1180,
        "wires": []
    },
    {
        "id": "78c16118d6e14e7b",
        "type": "do-return",
        "z": "57111ca025f638be",
        "g": "111103eaa0204252",
        "name": "",
        "mode": "abort",
        "saveValue": false,
        "x": 1130,
        "y": 1230,
        "wires": []
    },
    {
        "id": "c3d58f8e5bca1066",
        "type": "do-return",
        "z": "57111ca025f638be",
        "g": "111103eaa0204252",
        "name": "",
        "mode": "done",
        "saveValue": false,
        "x": 730,
        "y": 1270,
        "wires": []
    },
    {
        "id": "1ed5aa676c941167",
        "type": "function",
        "z": "57111ca025f638be",
        "g": "111103eaa0204252",
        "name": "Device",
        "func": "if(msg.changements.deviceToUpdate){\n        msg.action = \"update\";\n        return [msg, null];\n}\n\nreturn [null, msg];\n\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 1230,
        "wires": [
            [
                "92f799c2f6ba50c6"
            ],
            [
                "c3d58f8e5bca1066"
            ]
        ],
        "outputLabels": [
            "Update",
            "Ne rien faire"
        ]
    },
    {
        "id": "8ea9a28d16829721",
        "type": "sqlite",
        "z": "57111ca025f638be",
        "g": "64c4ac8396d7f0f4",
        "mydb": "628739f370d1726d",
        "sqlquery": "prepared",
        "sql": "UPDATE SENSOR\nSET id_role = \n    (SELECT id_role \n     FROM SENSOR_ROLE\n     where role like $sensor_role)\n WHERE id_sensor = $id_sensor;\n",
        "name": "Update Sensor",
        "x": 970,
        "y": 1590,
        "wires": [
            [
                "dabf78c524cc40e1"
            ]
        ]
    },
    {
        "id": "59413bdba1203faa",
        "type": "do-return",
        "z": "57111ca025f638be",
        "g": "64c4ac8396d7f0f4",
        "name": "",
        "mode": "done",
        "saveValue": false,
        "x": 950,
        "y": 1640,
        "wires": []
    },
    {
        "id": "eac87292ec5e26a9",
        "type": "sqlite",
        "z": "57111ca025f638be",
        "g": "64c4ac8396d7f0f4",
        "mydb": "628739f370d1726d",
        "sqlquery": "prepared",
        "sql": "UPDATE SENSOR_ATTRIBUT\nSET name = $name,\n    value = $value\nWHERE id_attribut = $id_attribut;",
        "name": "Update  Attribut",
        "x": 970,
        "y": 1680,
        "wires": [
            [
                "ff75fc44f3cbe7b6"
            ]
        ]
    },
    {
        "id": "be35ffe0569746ab",
        "type": "do",
        "z": "57111ca025f638be",
        "g": "64c4ac8396d7f0f4",
        "name": "Do Update Attributs",
        "tasks": [
            "delete"
        ],
        "mode": "each",
        "each": "changements.attributsToUpdate",
        "eachType": "msg",
        "yield": "value",
        "doneOutput": true,
        "firstValueOutput": false,
        "lastValueOutput": false,
        "outputs": 2,
        "_version": "0.4.1",
        "x": 630,
        "y": 1710,
        "wires": [
            [
                "b123210f7db0e10b"
            ],
            [
                "b7da68673e05346d"
            ]
        ]
    },
    {
        "id": "cd1430b315afff7f",
        "type": "do",
        "z": "57111ca025f638be",
        "g": "64c4ac8396d7f0f4",
        "name": "Do Update Sensors",
        "tasks": [
            "Update"
        ],
        "mode": "each",
        "each": "changements.sensorsToUpdate",
        "eachType": "msg",
        "yield": "value",
        "doneOutput": true,
        "firstValueOutput": false,
        "lastValueOutput": false,
        "outputs": 2,
        "_version": "0.4.1",
        "x": 630,
        "y": 1620,
        "wires": [
            [
                "bc6c6cd719e20f61"
            ],
            [
                "59413bdba1203faa"
            ]
        ]
    },
    {
        "id": "bc6c6cd719e20f61",
        "type": "function",
        "z": "57111ca025f638be",
        "g": "64c4ac8396d7f0f4",
        "name": "Params",
        "func": "\nlet sensor = msg.device.sensors.find(function (value) {\n    return value.id_sensor == msg.payload;\n});\n\nif(sensor != undefined){\n    delete msg.params;\n    msg.params = {\n        $id_sensor: sensor.id_sensor,\n        $sensor_role: sensor.sensor_role\n    }\n\n    return [msg,null];\n}\n\nreturn [null, msg];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 1600,
        "wires": [
            [
                "8ea9a28d16829721"
            ],
            [
                "59413bdba1203faa"
            ]
        ],
        "outputLabels": [
            "Update",
            "Done"
        ]
    },
    {
        "id": "dabf78c524cc40e1",
        "type": "do-return",
        "z": "57111ca025f638be",
        "g": "64c4ac8396d7f0f4",
        "name": "",
        "mode": "done",
        "saveValue": false,
        "x": 1120,
        "y": 1590,
        "wires": []
    },
    {
        "id": "b123210f7db0e10b",
        "type": "function",
        "z": "57111ca025f638be",
        "g": "64c4ac8396d7f0f4",
        "name": "Params",
        "func": "delete msg.params;\n\nmsg.device.sensors.forEach(function (sensor) {\n    sensor.attributs.find(function (value) {\n        if(value.id_attribut === msg.payload){\n            msg.params = {\n                $id_attribut: value.id_attribut,\n                $name: value.name,\n                $value: value.value\n           }\n           return;\n            \n        }\n    });\n});\n\nif(msg.params != undefined){\n    return [msg,null];\n}\n\nreturn [null, msg];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 1690,
        "wires": [
            [
                "eac87292ec5e26a9"
            ],
            [
                "b7da68673e05346d"
            ]
        ],
        "outputLabels": [
            "Update",
            "Dons"
        ]
    },
    {
        "id": "ff75fc44f3cbe7b6",
        "type": "do-return",
        "z": "57111ca025f638be",
        "g": "64c4ac8396d7f0f4",
        "name": "",
        "mode": "done",
        "saveValue": false,
        "x": 1120,
        "y": 1680,
        "wires": []
    },
    {
        "id": "b7da68673e05346d",
        "type": "do-return",
        "z": "57111ca025f638be",
        "g": "64c4ac8396d7f0f4",
        "name": "",
        "mode": "done",
        "saveValue": false,
        "x": 950,
        "y": 1730,
        "wires": []
    },
    {
        "id": "2a792d039db9cefd",
        "type": "do",
        "z": "57111ca025f638be",
        "g": "a5b04cf60d670697",
        "name": "Do Save Data",
        "tasks": [
            "Device changed",
            "AttributsToDelete",
            "SensorsToDelete",
            "SensorsToUpdate",
            "AttributsToUpdate",
            "Insert Sensors",
            "Insert Attributs"
        ],
        "mode": "msg",
        "each": "deviceNew.sensors",
        "eachType": "msg",
        "yield": "indexValue",
        "doneOutput": true,
        "firstValueOutput": false,
        "lastValueOutput": false,
        "outputs": 8,
        "_version": "0.4.1",
        "x": 350,
        "y": 1590,
        "wires": [
            [
                "1ed5aa676c941167"
            ],
            [
                "0d4ac5b91285c29e"
            ],
            [
                "14c57979f8bea78f"
            ],
            [
                "cd1430b315afff7f"
            ],
            [
                "be35ffe0569746ab"
            ],
            [
                "dbc4bd0f4a50d8cb"
            ],
            [
                "3e8337de3279a6e3"
            ],
            [
                "4b59343b5845de12"
            ]
        ]
    },
    {
        "id": "4accc712270537ef",
        "type": "inject",
        "z": "57111ca025f638be",
        "g": "a5b04cf60d670697",
        "name": "Simulation",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 180,
        "y": 1670,
        "wires": [
            [
                "fa7f14bdbb3856df"
            ]
        ]
    },
    {
        "id": "85d647afd37b63fe",
        "type": "change",
        "z": "57111ca025f638be",
        "g": "b0ba40e0b297f67d",
        "name": "Params",
        "rules": [
            {
                "t": "delete",
                "p": "params",
                "pt": "msg"
            },
            {
                "t": "set",
                "p": "params.$id_sensor",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 800,
        "y": 1460,
        "wires": [
            [
                "cd9c88bb81c9febb"
            ]
        ]
    },
    {
        "id": "cd9c88bb81c9febb",
        "type": "sqlite",
        "z": "57111ca025f638be",
        "g": "b0ba40e0b297f67d",
        "mydb": "628739f370d1726d",
        "sqlquery": "prepared",
        "sql": "DELETE FROM SENSOR\nWHERE id_sensor = $id_sensor;",
        "name": "Delete sensor",
        "x": 960,
        "y": 1460,
        "wires": [
            [
                "80119027c1098b18"
            ]
        ]
    },
    {
        "id": "5dc538862649faad",
        "type": "change",
        "z": "57111ca025f638be",
        "g": "b0ba40e0b297f67d",
        "name": "Params",
        "rules": [
            {
                "t": "set",
                "p": "params.$id_attribut",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 810,
        "y": 1380,
        "wires": [
            [
                "628a55e0d9682d2f"
            ]
        ]
    },
    {
        "id": "628a55e0d9682d2f",
        "type": "sqlite",
        "z": "57111ca025f638be",
        "g": "b0ba40e0b297f67d",
        "mydb": "628739f370d1726d",
        "sqlquery": "prepared",
        "sql": "DELETE FROM SENSOR_ATTRIBUT\nWHERE id_attribut = $id_attribut;",
        "name": "Delete attribut",
        "x": 980,
        "y": 1380,
        "wires": [
            [
                "d99eb86e34066d1c"
            ]
        ]
    },
    {
        "id": "8383da9b105ef498",
        "type": "do-return",
        "z": "57111ca025f638be",
        "g": "b0ba40e0b297f67d",
        "name": "",
        "mode": "done",
        "saveValue": false,
        "x": 790,
        "y": 1500,
        "wires": []
    },
    {
        "id": "0d4ac5b91285c29e",
        "type": "do",
        "z": "57111ca025f638be",
        "g": "b0ba40e0b297f67d",
        "name": "Do Delete Attributs",
        "tasks": [
            "delete"
        ],
        "mode": "each",
        "each": "changements.attributsToDelete",
        "eachType": "msg",
        "yield": "value",
        "doneOutput": true,
        "firstValueOutput": false,
        "lastValueOutput": false,
        "outputs": 2,
        "_version": "0.4.1",
        "x": 640,
        "y": 1400,
        "wires": [
            [
                "5dc538862649faad"
            ],
            [
                "6df860f3d88e7e14"
            ]
        ]
    },
    {
        "id": "6df860f3d88e7e14",
        "type": "do-return",
        "z": "57111ca025f638be",
        "g": "b0ba40e0b297f67d",
        "name": "",
        "mode": "done",
        "saveValue": false,
        "x": 800,
        "y": 1420,
        "wires": []
    },
    {
        "id": "d99eb86e34066d1c",
        "type": "do-return",
        "z": "57111ca025f638be",
        "g": "b0ba40e0b297f67d",
        "name": "",
        "mode": "done",
        "saveValue": false,
        "x": 1130,
        "y": 1380,
        "wires": []
    },
    {
        "id": "80119027c1098b18",
        "type": "do-return",
        "z": "57111ca025f638be",
        "g": "b0ba40e0b297f67d",
        "name": "",
        "mode": "done",
        "saveValue": false,
        "x": 1110,
        "y": 1460,
        "wires": []
    },
    {
        "id": "14c57979f8bea78f",
        "type": "do",
        "z": "57111ca025f638be",
        "g": "b0ba40e0b297f67d",
        "name": "Do Delete Sensors",
        "tasks": [
            "delete"
        ],
        "mode": "each",
        "each": "changements.sensorsToDelete",
        "eachType": "msg",
        "yield": "value",
        "doneOutput": true,
        "firstValueOutput": false,
        "lastValueOutput": false,
        "outputs": 2,
        "_version": "0.4.1",
        "x": 630,
        "y": 1480,
        "wires": [
            [
                "85d647afd37b63fe"
            ],
            [
                "8383da9b105ef498"
            ]
        ]
    },
    {
        "id": "fa7f14bdbb3856df",
        "type": "function",
        "z": "57111ca025f638be",
        "g": "a5b04cf60d670697",
        "name": "Simulation",
        "func": "\nmsg = { \"device\": { \"id_device\": 2, \"mac\": \"C0:49:EF:CC:37:4C\", \"sleep_duration\": 1666, \"im_alive_period\": 3600, \n\"sensors\": [{ \"id_sensor\": -1, \"sensor_role\": \"TEMPERATURE\", \n    \"attributs\": [{ \"id_attribut\": 19, \"name\": \"pin\", \"value\": 22 }] }], \n\"sensorsToDelete\": [] }, \"changements\": { \"deviceToUpdate\": false, \"sensorsToUpdate\": [1100, 2200, 3300, 4400], \"attributsToUpdate\": [2000, 3000, 4000], \"sensorsToDelete\": [1190, 1000, 2000, 3000], \"attributsToDelete\": [1780, 1000, 2000, 3000] }, \"_dashboard\": { \"sourceId\": \"457086935cb6673a\", \"templateId\": \"457086935cb6673a\" }, \"_client\": { \"socketId\": \"5UvBo2b05sbT9eP5AAAD\", \"socketIp\": \"169.254.109.98\" }, \"_msgid\": \"9e9c81602daab2d7\" }\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 1610,
        "wires": [
            [
                "2a792d039db9cefd"
            ]
        ]
    },
    {
        "id": "6b6299aacfded0ae",
        "type": "sqlite",
        "z": "57111ca025f638be",
        "g": "e35ebe091943e2a7",
        "mydb": "628739f370d1726d",
        "sqlquery": "prepared",
        "sql": "INSERT INTO SENSOR (\n    id_device,\n    id_role)\nVALUES( \n    $id_device,\n    (   SELECT id_role \n        FROM SENSOR_ROLE\n        where role like $sensor_role)\n);\n",
        "name": "Insert Sensor",
        "x": 810,
        "y": 1840,
        "wires": [
            [
                "d57247b61b1362d0"
            ]
        ]
    },
    {
        "id": "d57247b61b1362d0",
        "type": "sqlite",
        "z": "57111ca025f638be",
        "g": "e35ebe091943e2a7",
        "mydb": "628739f370d1726d",
        "sqlquery": "fixed",
        "sql": "SELECT last_insert_rowid();",
        "name": "Get last ID",
        "x": 980,
        "y": 1840,
        "wires": [
            [
                "686152736de39533"
            ]
        ]
    },
    {
        "id": "686152736de39533",
        "type": "change",
        "z": "57111ca025f638be",
        "g": "e35ebe091943e2a7",
        "name": "Get last id",
        "rules": [
            {
                "t": "set",
                "p": "action",
                "pt": "msg",
                "to": "sensorLastId",
                "tot": "str"
            },
            {
                "t": "move",
                "p": "payload[0].last_insert_rowid()",
                "pt": "msg",
                "to": "insertId",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1140,
        "y": 1850,
        "wires": [
            [
                "dbc4bd0f4a50d8cb"
            ]
        ]
    },
    {
        "id": "dbc4bd0f4a50d8cb",
        "type": "function",
        "z": "57111ca025f638be",
        "g": "e35ebe091943e2a7",
        "name": "sensors to insert",
        "func": "if(msg.action == \"sensorLastId\"){\n    msg.sensor.id_sensor = msg.insertId;\n    delete msg.sensor;\n}\n\n msg.device.sensors.forEach(function (value) {\n    if(value.id_sensor == -1){\n        msg.sensor = value;\n        msg.params = {\n            $id_device: msg.device.id_device,\n            $sensor_role: value.sensor_role\n        }\n        return value;\n    }\n});\n\nif(msg.sensor != undefined){\n    return [msg, null];\n}\nreturn [null, msg];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 1850,
        "wires": [
            [
                "6b6299aacfded0ae"
            ],
            [
                "168280962ca311ee"
            ]
        ],
        "outputLabels": [
            "Sensor",
            "Done"
        ]
    },
    {
        "id": "168280962ca311ee",
        "type": "do-return",
        "z": "57111ca025f638be",
        "g": "e35ebe091943e2a7",
        "name": "",
        "mode": "done",
        "saveValue": false,
        "x": 780,
        "y": 1900,
        "wires": []
    },
    {
        "id": "4b27a81d9d07a115",
        "type": "link in",
        "z": "57111ca025f638be",
        "g": "a5b04cf60d670697",
        "name": "IN-Refresh ui-table of devices",
        "links": [
            "1559f9fd4805b155"
        ],
        "x": 95,
        "y": 1360,
        "wires": [
            [
                "29a7a4f1fa7aa70e"
            ]
        ]
    },
    {
        "id": "29a7a4f1fa7aa70e",
        "type": "function",
        "z": "57111ca025f638be",
        "g": "a5b04cf60d670697",
        "name": "Set devices",
        "func": "const devicesMap = global.get('devicesMap')|| [];\n\nmsg.devices = Array.from(devicesMap.values());\nmsg.rolesList = global.get('SENSOR_ROLES')|| [];\n\nmsg.action = \"loadDevices\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 1360,
        "wires": [
            [
                "457086935cb6673a",
                "15b6652e285ff285"
            ]
        ]
    },
    {
        "id": "457086935cb6673a",
        "type": "ui-template",
        "z": "57111ca025f638be",
        "g": "a5b04cf60d670697",
        "group": "e4203d846baf0d72",
        "page": "",
        "ui": "",
        "name": "Gestion Devices",
        "order": 1,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n  <v-data-table\n    :headers=\"headers\"\n    :items=\"devices\"\n    :items-per-page=\"10\"\n    class=\"elevation-1\"\n  >\n    <template v-slot:top>\n      <v-toolbar flat>\n        <v-toolbar-title>Devices</v-toolbar-title>\n        <v-divider class=\"mx-4\" inset vertical></v-divider>\n        <v-spacer></v-spacer>\n        <v-btn color=\"primary\" dark class=\"mb-2\" @click=\"dataRefresh\">\n          Refresh\n        </v-btn>\n      </v-toolbar>\n      <v-dialog v-model=\"dialog\" max-width=\"800px\">\n        <v-card>\n          <v-card-title>\n            <span class=\"text-h5\">{{ formTitle }}</span>\n          </v-card-title>\n          <v-card-text>\n            <v-container>\n              <v-row>\n                <v-col cols=\"12\" sm=\"6\" md=\"4\">\n                  <v-text-field\n                    v-model=\"editedItem.id_device\"\n                    label=\"Device ID\"\n                    readonly\n                  ></v-text-field>\n                </v-col>\n                <v-col cols=\"12\" sm=\"6\" md=\"4\">\n                  <v-text-field\n                    v-model=\"editedItem.mac\"\n                    label=\"MAC Address\"\n                    readonly\n                  ></v-text-field>\n                </v-col>\n                <v-col cols=\"12\" sm=\"6\" md=\"4\">\n                  <v-text-field\n                    v-model=\"editedItem.location\"\n                    label=\"Location\"\n                    readonly\n                  ></v-text-field>\n                </v-col>\n                <v-col cols=\"12\" sm=\"6\" md=\"4\">\n                  <v-text-field\n                      v-model=\"editedItem.sleep_duration\"\n                      label=\"Sleep duration\"\n                      @update:model-value=\"changeDevice()\"\n                    ></v-text-field>\n                </v-col>\n                <v-col cols=\"12\" sm=\"6\" md=\"4\">\n                  <v-text-field\n                      v-model=\"editedItem.im_alive_period\"\n                      label=\"ImAlive\"\n                      @update:model-value=\"changeDevice()\"\n                    ></v-text-field>\n                </v-col>\n              </v-row>\n              <v-divider class=\"mt-2 mb-4\"></v-divider>\n              <h3 class=\"mb-2\">Sensors</h3>\n              <v-expansion-panels>\n                <v-expansion-panel\n                  v-for=\"(sensor, sensorIndex) in editedItem.sensors\"\n                  :key=\"sensorIndex\"\n                >\n                  <v-expansion-panel-title>\n                    Sensor {{ sensorIndex + 1 }}\n                    <template v-slot:actions>\n                      <v-btn\n                        icon\n                        small\n                        color=\"error\"\n                        @click.stop=\"removeSensor(sensorIndex)\"\n                      >\n                        <v-icon>mdi-delete</v-icon>\n                      </v-btn>\n                    </template>\n                  </v-expansion-panel-title>\n                  <v-expansion-panel-text>\n                    <v-row>\n                      <v-col cols=\"12\" sm=\"6\">\n                        <v-text-field\n                          v-model.number=\"sensor.id_sensor\"\n                          label=\"Sensor ID\"\n                          readonly\n                        ></v-text-field>\n                      </v-col>\n                      <v-col cols=\"12\" sm=\"6\">\n                        <v-select v-model=\"sensor.sensor_role\" :items=\"roles\" \n                          label=\"Rôle\" \n                          @update:model-value=\"updateSensor(sensorIndex)\">\n                        </v-select>\n                      </v-col>\n                    </v-row>\n                    <v-divider class=\"mt-2 mb-4\"></v-divider>\n                    <h4 class=\"mb-2\">attributs</h4>\n                    <v-row\n                      v-for=\"(attr, attrIndex) in sensor.attributs\"\n                      :key=\"attrIndex\"\n                    >\n                      <v-col cols=\"12\" sm=\"4\">\n                        <v-text-field\n                          v-model.number=\"attr.id_attribut\"\n                          label=\"Attribute ID\"\n                          readonly\n                        ></v-text-field>\n                      </v-col>\n                      <v-col cols=\"12\" sm=\"4\">\n                        <v-text-field\n                          v-model=\"attr.name\"\n                          label=\"Attribute Name\"\n                          @update:model-value=\"updateAttribut(sensor, attrIndex)\"\n                        ></v-text-field>\n                      </v-col>\n                      <v-col cols=\"12\" sm=\"3\">\n                        <v-text-field\n                          v-model.number=\"attr.value\"\n                          label=\"Value\"\n                          @update:model-value=\"updateAttribut(sensor, attrIndex)\"\n                        ></v-text-field>\n                      </v-col>\n                      <v-col cols=\"12\" sm=\"1\">\n                        <v-btn\n                          color=\"error\"\n                          small\n                          @click=\"removeAttribute(sensor, attrIndex)\"\n                          >X</v-btn\n                        >\n                      </v-col>\n                    </v-row>\n                    <v-btn color=\"success\" small @click=\"addAttribute(sensor)\"\n                      >Add Attribute</v-btn\n                    >\n                  </v-expansion-panel-text>\n                </v-expansion-panel>\n              </v-expansion-panels>\n              <v-btn color=\"success\" class=\"mt-4\" @click=\"addSensor\"\n                >Add Sensor</v-btn\n              >\n            </v-container>\n          </v-card-text>\n          <v-card-actions>\n            <v-spacer></v-spacer>\n            <v-btn color=\"blue darken-1\" @click=\"close\">Cancel</v-btn>\n            <v-btn color=\"blue darken-1\" @click=\"save\">Save</v-btn>\n          </v-card-actions>\n        </v-card>\n      </v-dialog>\n    </template>\n    <template v-slot:item.actions=\"{ item }\">\n      <v-icon small class=\"mr-2\" @click=\"editItem(item)\"> mdi-pencil </v-icon>\n       <v-icon small class=\"mr-2\" @click=\"sendConfig(item)\"> mdi-rss  </v-icon>\n    </template>\n    <template v-slot:item.sensors=\"{ item }\">\n      {{ item.sensors.length }} sensors\n      <v-tooltip bottom max-width=\"400\">\n        <template v-slot:activator=\"{ props }\">\n          <v-icon small v-bind=\"props\">mdi-information</v-icon>\n        </template>\n        <v-card>\n          <v-card-text>\n            <div\n              v-for=\"(sensor, sIndex) in item.sensors\"\n              :key=\"sensor.id_sensor\"\n              class=\"mb-4\"\n            >\n              <h2>Sensor {{ sIndex + 1 }}:</h2>\n              {{ sensor.id_sensor}} - {{ sensor.sensor_role }}\n              <v-divider class=\"my-2\"></v-divider>\n              <h4>attributs:</h4>\n              <v-table dense>\n                <template v-slot:default>\n                  <tbody>\n                    <tr\n                      v-for=\"attr in sensor.attributs\"\n                      :key=\"attr.id_attribut\"\n                    >\n                      <td>{{ attr.id_attribut }}</td>\n                      <td>{{ attr.name }}</td>\n                      <td>{{ attr.value }}</td>\n                    </tr>\n                  </tbody>\n                </template>\n              </v-table>\n            </div>\n          </v-card-text>\n        </v-card>\n      </v-tooltip>\n    </template>\n        <template v-slot:bottom>\n          <div class=\"text-center pt-2\">\n            <v-pagination :length=\"pageCount\"></v-pagination>\n          </div>\n        </template>\n  </v-data-table>\n</template>\n\n<script>\n  export default {\n    data: () => ({\n      dialog: false,\n      headers: [\n        { title: 'Device ID', key: 'id_device' },\n        { title: 'MAC Address', key: 'mac' },\n        { title: 'Location', key: 'location' },\n        { title: 'Sleep', key: 'sleep_duration' },\n        { title: 'ImAlive', key: 'im_alive_period' },\n        { title: 'Sensors', key: 'sensors' },\n        { title: 'Actions', key: 'actions', sortable: false },\n      ],\n      devices: [ ],\n      editedIndex: -1,\n      editedItem: {\n        id_device: 0,\n        mac: '',\n        sleep_duration: 0,\n        im_alive_period: 0,\n        location: '',\n        sensors: [],\n      },\n      defaultItem: {\n        id_device: 0,\n        mac: '',\n        sleep_duration: 0,\n        im_alive_period: 0,\n        location: '',\n        sensors: [],\n      },\n      changements: {\n        deviceToUpdate: false,\n        sensorsToUpdate: [],\n        attributsToUpdate: [],\n        sensorsToDelete: [],\n        attributsToDelete: [],\n      },\n      roles: ['INDETERMINE'],\n      itemsPerPage: 10,\n    }),\n  watch: {\n    //Sur la réception d'un msg.\n    msg: function(){\n     // this.locations = this.msg.locations;\n      this.devices = this.msg.devices;\n      this.roles = this.msg.rolesList;\n      console.log(\"msg received\");\n    },\n  },\n\n  computed: {\n      formTitle() {\n        return this.editedIndex === -1 ? 'Ajouter Device' : 'Edit Device'\n      },\n\n      pageCount() {\n        return  1; // Math.ceil(this.devices.length / this.itemsPerPage)\n      },\n    },\n\n    created() {\n    },\n\n    methods: {\n      dataRefresh() {\n        this.send({action: \"dataRefresh\"});\n      },\n\n      sendConfig(item){\n        this.send({action: \"sendConfig\", device: item});\n      },\n\n      editItem(item) {\n        this.editedIndex = this.devices.indexOf(item)\n        this.editedItem = JSON.parse(JSON.stringify(item))\n        this.editedItem.sensorsToDelete = []\n        this.dialog = true\n      },\n\n      close() {\n        this.dialog = false\n        this.$nextTick(() => {\n          this.editedItem = JSON.parse(JSON.stringify(this.defaultItem))\n          this.editedIndex = -1\n        })\n        this.changements.deviceToUpdate = false\n        this.changements.sensorsToDelete = []\n        this.changements.sensorsToUpdate = []\n        this.changements.attributsToDelete = []\n        this.changements.attributsToUpdate = []\n      },\n\n      save() {\n        if (this.editedIndex > -1) {\n          this.send({action: \"dataSave\", device: this.editedItem, changements: this.changements});\n          Object.assign(this.devices[this.editedIndex], this.editedItem)\n        } else {\n          this.send({action: \"Unknown\", payload: \"editedIndex == -1 - Quoi faire\"});\n          this.devices.push(this.editedItem)\n        }\n        this.close()\n      },\n\n      changeDevice() {\n        this.changements.deviceToUpdate = true\n      },\n    \n      addSensor() {\n        this.editedItem.sensors.push({\n          id_sensor: -1,\n          name: \"INDETERMINE\",\n          attributs: [],\n        })\n      },\n     \n      removeSensor(index) {\n        let idSensor = this.editedItem.sensors[index].id_sensor\n        \n        if (!this.changements.sensorsToDelete.includes(idSensor)) {\n          this.changements.sensorsToDelete.push(idSensor)\n        }\n       \n        this.editedItem.sensors.splice(index, 1)\n      },\n\n      updateSensor(index) {\n        let idSensor = this.editedItem.sensors[index].id_sensor\n        \n        if(idSensor != -1){\n          if (!this.changements.sensorsToUpdate.includes(idSensor)) {\n            this.changements.sensorsToUpdate.push(idSensor)\n          }\n        }\n      },\n      \n      updateAttribut(sensor, attrIndex) {\n        let idAttribut = sensor.attributs[attrIndex].id_attribut\n\n        if(idAttribut != -1){\n          if (!this.changements.attributsToUpdate.includes(idAttribut)) {\n            this.changements.attributsToUpdate.push(idAttribut)\n          }\n        }\n      },\n\n      addAttribute(sensor) {\n        sensor.attributs.push({\n          id_attribut: -1,\n          name: '',\n          value: 0,\n        })\n      },\n\n      removeAttribute(sensor, attrIndex) {\n        let idAttribut = sensor.attributs[attrIndex].id_attribut\n        \n        if (!this.changements.attributsToDelete.includes(idAttribut)) {\n        this.changements.attributsToDelete.push(idAttribut)\n        }\n        \n        sensor.attributs.splice(attrIndex, 1)\n      },\n    },\n  }\n</script>\n",
        "storeOutMessages": true,
        "passthru": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 180,
        "y": 1410,
        "wires": [
            [
                "b98212ab05e58762"
            ]
        ]
    },
    {
        "id": "4b59343b5845de12",
        "type": "link out",
        "z": "57111ca025f638be",
        "g": "a5b04cf60d670697",
        "name": "Request - Refresh Device",
        "mode": "link",
        "links": [
            "5e2d481f338e5d45"
        ],
        "x": 435,
        "y": 1730,
        "wires": []
    },
    {
        "id": "b98212ab05e58762",
        "type": "switch",
        "z": "57111ca025f638be",
        "g": "a5b04cf60d670697",
        "name": "",
        "property": "action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "dataRefresh",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "sendConfig",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "dataSave",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 180,
        "y": 1500,
        "wires": [
            [
                "34394aded35a14f7"
            ],
            [
                "71f803b13863282d"
            ],
            [
                "2a792d039db9cefd"
            ],
            [
                "90a076f3b5779d84"
            ]
        ]
    },
    {
        "id": "34394aded35a14f7",
        "type": "link out",
        "z": "57111ca025f638be",
        "g": "a5b04cf60d670697",
        "name": "Request - Refresh Device",
        "mode": "link",
        "links": [
            "5e2d481f338e5d45"
        ],
        "x": 355,
        "y": 1430,
        "wires": []
    },
    {
        "id": "90a076f3b5779d84",
        "type": "debug",
        "z": "57111ca025f638be",
        "g": "a5b04cf60d670697",
        "name": "debug 212",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 370,
        "y": 1500,
        "wires": []
    },
    {
        "id": "71f803b13863282d",
        "type": "link out",
        "z": "57111ca025f638be",
        "g": "a5b04cf60d670697",
        "name": "Send configuration out",
        "mode": "link",
        "links": [
            "1889b9b8d90b705d"
        ],
        "x": 355,
        "y": 1460,
        "wires": []
    },
    {
        "id": "15b6652e285ff285",
        "type": "debug",
        "z": "57111ca025f638be",
        "g": "a5b04cf60d670697",
        "name": "debug 213",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 390,
        "y": 1360,
        "wires": []
    },
    {
        "id": "e168397444a4efa5",
        "type": "debug",
        "z": "57111ca025f638be",
        "g": "2ff47af73d8a3d20",
        "name": "debug 214",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 3620,
        "wires": []
    },
    {
        "id": "7e16302c92c374f6",
        "type": "sqlite",
        "z": "57111ca025f638be",
        "g": "590af8aa1ccb96c4",
        "mydb": "628739f370d1726d",
        "sqlquery": "prepared",
        "sql": " SELECT id_location\nFROM LOCATION_DEVICE \nwhere id_device = (\n  select id_device \n  from SENSOR \n  where id_sensor = $id_sensor);\n",
        "name": "Get location",
        "x": 710,
        "y": 480,
        "wires": [
            [
                "63fc615bfac2e331"
            ]
        ]
    },
    {
        "id": "e57ce7fb3618696f",
        "type": "change",
        "z": "57111ca025f638be",
        "g": "590af8aa1ccb96c4",
        "name": "Params",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "temperature",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "params.$id_sensor",
                "pt": "msg",
                "to": "temperature.data.id_sensor",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 480,
        "wires": [
            [
                "7e16302c92c374f6"
            ]
        ]
    },
    {
        "id": "63fc615bfac2e331",
        "type": "switch",
        "z": "57111ca025f638be",
        "g": "590af8aa1ccb96c4",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 880,
        "y": 480,
        "wires": [
            [
                "c8184d1d79bb29dc"
            ],
            [
                "f73f445ee8c747ad"
            ]
        ]
    },
    {
        "id": "f73f445ee8c747ad",
        "type": "function",
        "z": "57111ca025f638be",
        "g": "590af8aa1ccb96c4",
        "name": "Location indéfinie",
        "func": "msg.payload = msg.temperature.header.mac + \" -- Location non définie\"\nnode.warn(msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "1967c0792ce84596",
        "type": "ui-button",
        "z": "57111ca025f638be",
        "g": "b3bc735139a25964",
        "group": "5dfbb318f0d542be",
        "name": "",
        "label": "refresh",
        "order": 1,
        "width": 0,
        "height": 0,
        "emulateClick": false,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "iconPosition": "left",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 200,
        "y": 2480,
        "wires": [
            [
                "b6d93e5a518a187d"
            ]
        ]
    },
    {
        "id": "fa06f329ce0a3c15",
        "type": "inject",
        "z": "57111ca025f638be",
        "g": "f6ba6aa35208baae",
        "name": "Setup",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 170,
        "wires": [
            [
                "42e44c3404350309"
            ]
        ]
    },
    {
        "id": "287024651fc3c04b",
        "type": "link out",
        "z": "57111ca025f638be",
        "g": "f6ba6aa35208baae",
        "name": "link out 3",
        "mode": "link",
        "links": [
            "5e2d481f338e5d45"
        ],
        "x": 375,
        "y": 170,
        "wires": []
    },
    {
        "id": "a3b3a725a704ea19",
        "type": "function",
        "z": "57111ca025f638be",
        "g": "4ac0d347446e702f",
        "name": "Params",
        "func": "if (msg.topic === \"Slider\") {\n    flow.set('Slider', msg.payload);\n}\nif (msg.topic === \"DatePicker\") {\n    flow.set('DatePicker', msg.payload);\n}\n\n//On garde en mémoire la liste de mac.\nlet idList = context.get(\"idList\") || [];\n\nif (msg.devices != undefined) {\n    idList = [];\n    msg.devices.forEach(function (device) {\n        if (device.id_sensor != undefined) {\n            idList.push(device.id_location);\n            context.set(\"idList\", idList)\n        }\n    });\n}\n\nlet nbHours;\nlet dateSelected;\n\nnbHours = '+' +  flow.get('Slider') + ' hours'\ndateSelected =  flow.get('DatePicker');\n\n\nmsg.topic = \"SELECT id_location, acronyme, temperature, humidity, counter, datetime\"\n    + \" from DATA_VIEW\"\n    + \" where id_location in ( \" + idList.toString() + \"  )\"\n    + \" AND datetime > datetime('\"+ dateSelected + \"') \"\n    + \" AND datetime < datetime('\"+ dateSelected + \"', '\" + nbHours + \"') \"\n    + \" and role like 'TEMPERATURE'\"\n    + \" ORDER BY id_sensor, datetime asc;\"\n\n//    + \" and datetime > datetime('2024-04-15T04:00:00.000Z', 'localtime', '\" + nbHours + \"' )\"\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 3000,
        "wires": [
            [
                "1c2e8d33bf43083e"
            ]
        ]
    },
    {
        "id": "25c84611b53c2c6f",
        "type": "ui-text-input",
        "z": "57111ca025f638be",
        "g": "4ac0d347446e702f",
        "group": "ec83ebd45553c336",
        "name": "",
        "label": "Date",
        "order": 5,
        "width": 0,
        "height": 0,
        "topic": "topic",
        "topicType": "msg",
        "mode": "datetime-local",
        "tooltip": "",
        "delay": 300,
        "passthru": true,
        "sendOnDelay": true,
        "sendOnBlur": false,
        "sendOnEnter": false,
        "className": "",
        "clearable": false,
        "sendOnClear": false,
        "icon": "",
        "iconPosition": "left",
        "iconInnerPosition": "inside",
        "x": 450,
        "y": 3050,
        "wires": [
            [
                "e982725746f62c93",
                "e36536a63d419b95"
            ]
        ]
    },
    {
        "id": "4e9d0c5c6bb4c0f6",
        "type": "ui-slider",
        "z": "57111ca025f638be",
        "g": "4ac0d347446e702f",
        "group": "ec83ebd45553c336",
        "name": "",
        "label": "Durée",
        "tooltip": "",
        "order": 4,
        "width": "0",
        "height": "0",
        "passthru": true,
        "outs": "end",
        "topic": "topic",
        "topicType": "msg",
        "thumbLabel": "always",
        "showTicks": "always",
        "min": 0,
        "max": "48",
        "step": 1,
        "className": "",
        "iconPrepend": "",
        "iconAppend": "",
        "color": "blue",
        "colorTrack": "green",
        "colorThumb": "",
        "x": 450,
        "y": 3090,
        "wires": [
            [
                "e982725746f62c93",
                "e36536a63d419b95"
            ]
        ]
    },
    {
        "id": "64d643221c0ebd2a",
        "type": "function",
        "z": "57111ca025f638be",
        "g": "4ac0d347446e702f",
        "name": "Set DateTime",
        "func": "const d = new Date();\n\n let dateString = d.toLocaleDateString('fr-ca', {\n            year: 'numeric',\n            month: 'numeric',\n            day: 'numeric'\n          });\n\nmsg.payload = dateString + \" 00:00\";\nmsg.topic = \"DatePicker\";\n\nlet msg2 = {};\nmsg2.payload = 24;\nmsg2.topic = \"Slider\"\n\nflow.set(msg.topic, msg.payload);\nflow.set(msg2.topic, msg2.payload);\n\nreturn [msg, msg2];\n\n//return [null, msg];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 3070,
        "wires": [
            [
                "25c84611b53c2c6f"
            ],
            [
                "4e9d0c5c6bb4c0f6"
            ]
        ]
    },
    {
        "id": "de104099b772919d",
        "type": "inject",
        "z": "57111ca025f638be",
        "g": "4ac0d347446e702f",
        "name": "Default ",
        "props": [
            {
                "p": "DatePicker",
                "v": "",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 00 * * *",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 3070,
        "wires": [
            [
                "64d643221c0ebd2a"
            ]
        ]
    },
    {
        "id": "a48ddca16eceb0d9",
        "type": "function",
        "z": "57111ca025f638be",
        "d": true,
        "g": "4ac0d347446e702f",
        "name": "Params",
        "func": "if (msg.topic === \"Slider\") {\n    flow.set('Slider', msg.payload);\n}\nif (msg.topic === \"DatePicker\") {\n    flow.set('DatePicker', msg.payload);\n}\n\n//On garde en mémoire la liste de mac.\nlet idList = context.get(\"idList\") || [];\n\nif (msg.devices != undefined) {\n    idList = [];\n    msg.devices.forEach(function (device) {\n        if (device.id_sensor != undefined) {\n            idList.push(device.id_location);\n            context.set(\"idList\", idList)\n        }\n    });\n}\n\nlet nbHours;\nlet dateSelected;\n\nnbHours = '+' +  flow.get('Slider') + ' hours'\ndateSelected =  flow.get('DatePicker');\n\n\nmsg.topic = \"SELECT id_location, acronyme, temperature, humidity, counter, datetime\"\n    + \" from DATA_VIEW\"\n    + \" where id_location in ( \" + idList.toString() + \"  )\"\n    + \" AND datetime > datetime('\"+ dateSelected + \"') \"\n    + \" AND datetime < datetime('\"+ dateSelected + \"', '\" + nbHours + \"') \"\n    + \" and role like 'TEMPERATURE'\"\n    + \" ORDER BY id_sensor, datetime asc;\"\n\n//    + \" and datetime > datetime('2024-04-15T04:00:00.000Z', 'localtime', '\" + nbHours + \"' )\"\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 2880,
        "wires": [
            [
                "0f3b19615d2461dc"
            ]
        ]
    },
    {
        "id": "0f3b19615d2461dc",
        "type": "sqlite",
        "z": "57111ca025f638be",
        "d": true,
        "g": "4ac0d347446e702f",
        "mydb": "628739f370d1726d",
        "sqlquery": "msg.topic",
        "sql": "SELECT mac, id_sensor, \ntemperature, humidity, counter, datetime\nfrom DATA_VIEW\nwhere id_device in ( $ids_devices)\nand datetime > datetime('now', 'localtime', $nbHours )\nand role like 'TEMPERATURE'\nORDER BY id_sensor, datetime asc;\n\n\n",
        "name": "Load temp sensor",
        "x": 860,
        "y": 2880,
        "wires": [
            []
        ]
    },
    {
        "id": "d3626a9698f6ee89",
        "type": "function",
        "z": "57111ca025f638be",
        "d": true,
        "g": "4ac0d347446e702f",
        "name": "Params",
        "func": "if (msg.topic === \"Slider\") {\n    flow.set('Slider', msg.payload);\n}\nif (msg.topic === \"DatePicker\") {\n    flow.set('DatePicker', msg.payload);\n}\n\n//On garde en mémoire la liste de mac.\nlet idList = context.get(\"idList\") || [];\n\nif (msg.devices != undefined) {\n    idList = [];\n    msg.devices.forEach(function (device) {\n        if (device.id_sensor != undefined) {\n            idList.push(device.id_location);\n            context.set(\"idList\", idList)\n        }\n    });\n}\n\nlet nbHours;\nlet dateSelected;\n\n//nbHours = '+' +  flow.get('Slider') + ' hours'\n//dateSelected =  flow.get('DatePicker');\n\nmsg.params = {\n    $idList: idList.toString(),\n //   $idList: \" IN (4,6)\",\n    $dateSelected: flow.get('DatePicker'),\n    $nbHours: '+' + flow.get('Slider') + ' hours'\n}\n\n/* msg.topic = \"SELECT id_location, acronyme, temperature, humidity, counter, datetime\"\n    + \" from DATA_VIEW\"\n    + \" where id_location in ( \" + idList.toString() + \"  )\"\n    + \" AND datetime > datetime('\"+ dateSelected + \"') \"\n    + \" AND datetime < datetime('\"+ dateSelected + \"', '\" + nbHours + \"') \"\n    + \" and role like 'TEMPERATURE'\"\n    + \" ORDER BY id_sensor, datetime asc;\"\n */\n//    + \" and datetime > datetime('2024-04-15T04:00:00.000Z', 'localtime', '\" + nbHours + \"' )\"\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 2880,
        "wires": [
            [
                "3f82e6aed13c8507"
            ]
        ]
    },
    {
        "id": "3f82e6aed13c8507",
        "type": "sqlite",
        "z": "57111ca025f638be",
        "d": true,
        "g": "4ac0d347446e702f",
        "mydb": "628739f370d1726d",
        "sqlquery": "prepared",
        "sql": "SELECT id_location, acronyme, temperature, humidity, counter, datetime\nfrom DATA_VIEW\nwhere datetime > datetime($dateSelected) \nAND datetime < datetime($dateSelected, $nbHours) \nand role like 'TEMPERATURE'\nand id_location IN( $idList)\nORDER BY id_sensor, datetime asc;\n\n",
        "name": "Load temp sensor",
        "x": 1250,
        "y": 2880,
        "wires": [
            []
        ]
    },
    {
        "id": "1301edfe0f59a0b1",
        "type": "comment",
        "z": "57111ca025f638be",
        "g": "4ac0d347446e702f",
        "name": "Graphique humidité",
        "info": "",
        "x": 1240,
        "y": 3100,
        "wires": []
    },
    {
        "id": "50bc4f6c5feac4f8",
        "type": "debug",
        "z": "57111ca025f638be",
        "g": "4ac0d347446e702f",
        "name": "debug 222",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 2990,
        "wires": []
    },
    {
        "id": "a7888e8a0576cd47",
        "type": "ui-chart",
        "z": "57111ca025f638be",
        "g": "4ac0d347446e702f",
        "group": "ec83ebd45553c336",
        "name": "",
        "label": "chart",
        "order": 2,
        "chartType": "line",
        "category": "Slider",
        "categoryType": "str",
        "xAxisLabel": "",
        "xAxisProperty": "",
        "xAxisPropertyType": "property",
        "xAxisType": "time",
        "xAxisFormat": "",
        "xAxisFormatType": "auto",
        "xmin": "",
        "xmax": "",
        "yAxisLabel": "",
        "yAxisProperty": "",
        "yAxisPropertyType": "property",
        "ymin": "",
        "ymax": "",
        "bins": "",
        "action": "append",
        "stackSeries": false,
        "pointShape": "circle",
        "pointRadius": 4,
        "showLegend": true,
        "removeOlder": 1,
        "removeOlderUnit": "3600",
        "removeOlderPoints": "",
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "textColor": [
            "#666666"
        ],
        "textColorDefault": true,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": true,
        "width": 6,
        "height": 8,
        "className": "",
        "x": 1230,
        "y": 3010,
        "wires": [
            []
        ]
    },
    {
        "id": "da939ff73faa3d33",
        "type": "serial in",
        "z": "797d9b2a7151f089",
        "g": "fa8d72ad90e71a48",
        "name": "Serial in",
        "serial": "88425ab7cad6cc83",
        "x": 140,
        "y": 130,
        "wires": [
            [
                "edba9caae115a851",
                "41e9b0574e55c0c8",
                "76b97aaea830e452",
                "16e678c55b9af1c2"
            ]
        ]
    },
    {
        "id": "16071ac81dfe26dd",
        "type": "mqtt out",
        "z": "797d9b2a7151f089",
        "g": "fa8d72ad90e71a48",
        "name": "",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "c6a29fab98717cbb",
        "x": 590,
        "y": 130,
        "wires": []
    },
    {
        "id": "edba9caae115a851",
        "type": "function",
        "z": "797d9b2a7151f089",
        "g": "fa8d72ad90e71a48",
        "name": "To MQTT",
        "func": "\nlet message = \"\";\nmessage = msg.payload;\n\n// Si les conditions ne sont pas valides le message est rejeté.\nif(message.length > 0){\n    if (message.startsWith(\"@\")){\n        let index = message.indexOf(\":\");\n        \n        if(index >= 0){\n            msg.topic = message.substring(1, index);\n            msg.payload = message.substring(index+1).trimEnd();\n            return msg;\n        }\n    }\n\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 130,
        "wires": [
            [
                "16071ac81dfe26dd"
            ]
        ]
    },
    {
        "id": "51ee3605ff9d80e0",
        "type": "file",
        "z": "797d9b2a7151f089",
        "g": "fa8d72ad90e71a48",
        "name": "Logger ESP",
        "filename": "/home/pi-md/log/esp32.log",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 490,
        "y": 210,
        "wires": [
            []
        ]
    },
    {
        "id": "41e9b0574e55c0c8",
        "type": "function",
        "z": "797d9b2a7151f089",
        "g": "fa8d72ad90e71a48",
        "name": "Add Date",
        "func": "\n\nif(msg.payload.trim().length > 0){\n\n  //Les messages commençant par @ sont des commandes destinées au serveur.\n  //Elles sont enregistrées sans ajouter de date.\n  if(msg.payload.charAt(0) !=  \"@\" \n    && msg.payload.charAt(0) != \"-\" && msg.payload.charAt(0) != \" \"){\n\n    const regex = /\\[ *[0-9]+\\](.*)/;\n    msg.match = regex.exec(msg.payload);\n    msg.payload = msg.match[1]; \n\n\n    let date = new Date();\n    let dateString = date.toLocaleDateString('fr-ca', {month: 'numeric', day: 'numeric'});\n    let timeString = date.toTimeString().slice(0, 8);\n\n    msg.payload = \"[\" + dateString + \" \" + timeString + \"]\" \n          + \" \" + msg.payload + '\\n'\n  }\n\n  return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 210,
        "wires": [
            [
                "51ee3605ff9d80e0"
            ]
        ]
    },
    {
        "id": "855c0e1ea702f2cf",
        "type": "watch",
        "z": "797d9b2a7151f089",
        "g": "beefa0c6950593db",
        "name": "Surveiller fichier log",
        "files": "/home/pi-md/log/esp32.log",
        "recursive": "",
        "x": 190,
        "y": 300,
        "wires": [
            [
                "b4133a029132e1bc"
            ]
        ]
    },
    {
        "id": "f1f19a0d827e452e",
        "type": "exec",
        "z": "797d9b2a7151f089",
        "g": "beefa0c6950593db",
        "command": "logrotate -s /home/pi-md/log/status /home/pi-md/log/logrotate.conf",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "LogRotate",
        "x": 600,
        "y": 300,
        "wires": [
            [
                "2b905ff025d2f0a9"
            ],
            [
                "2b905ff025d2f0a9"
            ],
            []
        ]
    },
    {
        "id": "b4133a029132e1bc",
        "type": "function",
        "z": "797d9b2a7151f089",
        "g": "beefa0c6950593db",
        "name": "Executer rotation log",
        "func": "if(msg.size > 1000000){\n    return msg;\n\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 300,
        "wires": [
            [
                "f1f19a0d827e452e"
            ]
        ]
    },
    {
        "id": "d2b39a2251d4d124",
        "type": "serial out",
        "z": "797d9b2a7151f089",
        "g": "d0932bcd6a5ec1f6",
        "name": "Serial out",
        "serial": "88425ab7cad6cc83",
        "x": 710,
        "y": 640,
        "wires": []
    },
    {
        "id": "848f84e24987bc2f",
        "type": "debug",
        "z": "797d9b2a7151f089",
        "g": "d0932bcd6a5ec1f6",
        "name": "debug 33",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 600,
        "wires": []
    },
    {
        "id": "4aafe259275fd99f",
        "type": "delay",
        "z": "797d9b2a7151f089",
        "g": "d0932bcd6a5ec1f6",
        "name": "",
        "pauseType": "rate",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": ".5",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 510,
        "y": 640,
        "wires": [
            [
                "d2b39a2251d4d124",
                "848f84e24987bc2f"
            ]
        ]
    },
    {
        "id": "7a1a4351ec72b9b3",
        "type": "function",
        "z": "797d9b2a7151f089",
        "g": "d0932bcd6a5ec1f6",
        "name": "To serial port",
        "func": "\n\nmsg.payload = \"@\" + msg.topic + \"::\" + msg.payload;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 640,
        "wires": [
            [
                "4aafe259275fd99f"
            ]
        ]
    },
    {
        "id": "e27a25756c4ae984",
        "type": "mqtt in",
        "z": "797d9b2a7151f089",
        "g": "d0932bcd6a5ec1f6",
        "name": "",
        "topic": "dom-sys.server/#",
        "qos": "1",
        "datatype": "utf8",
        "broker": "c6a29fab98717cbb",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 170,
        "y": 640,
        "wires": [
            [
                "7a1a4351ec72b9b3"
            ]
        ]
    },
    {
        "id": "b07bf152a6d21710",
        "type": "catch",
        "z": "797d9b2a7151f089",
        "g": "e53915e26e2f69d5",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 130,
        "y": 1600,
        "wires": [
            [
                "c2a5a48d61080e22"
            ]
        ]
    },
    {
        "id": "c2a5a48d61080e22",
        "type": "debug",
        "z": "797d9b2a7151f089",
        "g": "e53915e26e2f69d5",
        "name": "Catch ",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 370,
        "y": 1600,
        "wires": []
    },
    {
        "id": "76b97aaea830e452",
        "type": "debug",
        "z": "797d9b2a7151f089",
        "g": "fa8d72ad90e71a48",
        "name": "debug 181",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 440,
        "y": 90,
        "wires": []
    },
    {
        "id": "68020bb809a9d64b",
        "type": "mqtt in",
        "z": "797d9b2a7151f089",
        "d": true,
        "g": "5d89e93885229fe1",
        "name": "",
        "topic": "dom-sys.gw/#",
        "qos": "0",
        "datatype": "auto",
        "broker": "c6a29fab98717cbb",
        "nl": false,
        "rap": false,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 1430,
        "wires": [
            [
                "558eb47c0c8cd19f"
            ]
        ]
    },
    {
        "id": "01804589863ba34e",
        "type": "inject",
        "z": "797d9b2a7151f089",
        "d": true,
        "g": "5d89e93885229fe1",
        "name": "Test",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"status\":\"ESPNOW_DATA\", \"type\":\"START_SIGNAL\",\"mac\":\"C8:C9:A3:C8:35:9C\"}",
        "payloadType": "str",
        "x": 150,
        "y": 1480,
        "wires": [
            [
                "558eb47c0c8cd19f"
            ]
        ]
    },
    {
        "id": "558eb47c0c8cd19f",
        "type": "function",
        "z": "797d9b2a7151f089",
        "d": true,
        "g": "5d89e93885229fe1",
        "name": "Dispatcher",
        "func": "//node.warn(msg);\n\nswitch (msg.topic) {\n    case \"dom-sys.gw/status\":\n        switch (msg.payload) {\n            case \"IM_ALIVE\":\n                //on ne log pas ce message\n                return [msg, null, null];\n                break;\n            case \"GATEWAY_START\":\n            case \"GATEWAY_RESTART\":\n                msg.params = {\n                    $EventType: msg.payload,\n                    $EventData: \"\"\n                }\n                return [msg, msg, null];\n                break;\n            default:\n                msgInconnu();\n        }\n        break;\n    case \"dom-sys.gw/request\":\n        break;\n    default:\n        msgInconnu();\n}\n\nfunction msgInconnu() {\n    msg.topic = \"Passerelle\"\n    msg.payload = \"Message statut inconnu: \" + msg.payload;\n    return [null, null, msg];\n}\n",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1460,
        "wires": [
            [],
            [
                "27d79d1a4af37e13"
            ],
            [
                "c1c1ebd04c6e798e"
            ]
        ],
        "outputLabels": [
            "IM_ALIVE",
            "TO LOG",
            "INCONNU"
        ]
    },
    {
        "id": "9bb6a0be709aef65",
        "type": "trigger",
        "z": "797d9b2a7151f089",
        "g": "5d89e93885229fe1",
        "name": "ImAlive",
        "op1": "IM_ALIVE",
        "op2": "IM_ALIVE_MISSING",
        "op1type": "str",
        "op2type": "str",
        "duration": "12",
        "extend": true,
        "overrideDelay": false,
        "units": "min",
        "reset": "",
        "bytopic": "topic",
        "topic": "topic",
        "outputs": 1,
        "x": 530,
        "y": 1330,
        "wires": [
            [
                "d23177f02750759c",
                "0bdbc43f27e4bb08"
            ]
        ]
    },
    {
        "id": "d23177f02750759c",
        "type": "function",
        "z": "797d9b2a7151f089",
        "g": "5d89e93885229fe1",
        "name": "Statut server",
        "func": "switch (msg.payload) {\n    case \"IM_ALIVE_MISSING\":\n        node.status({ fill: \"red\", shape: \"ring\", text: \"IM_ALIVE_MISSING\" });\n\n        msg.payload = \"IM_ALIVE_MISSING\";\n        msg.icon = \"visibility_off\";\n        msg.color = \"red\";\n        \n        msg.params = {\n            $EventType: \"ERROR\",\n            $EventData: msg.payload\n        }\n        return [msg, msg];\n\n    case \"IM_ALIVE\":\n        node.status({ fill: \"green\", shape: \"ring\", text: \"IM_ALIVE_OK\" });\n        msg.payload = \"IM_ALIVE\";\n        msg.icon = \"visibility\";\n        msg.color = \"green\";        \n        return [msg, null];\n\n    default:\n        msg.payload = \"Passerelle\";\n        msg.icon = \"visibility_off\";\n        msg.color = \"yellow\";\n}\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 1360,
        "wires": [
            [
                "4805c368e2c34a0c"
            ],
            [
                "a2df31a6143f0148",
                "27d79d1a4af37e13"
            ]
        ],
        "outputLabels": [
            "IM_ALIVE_OK",
            "IM_ALIVE_ERROR"
        ]
    },
    {
        "id": "0bdbc43f27e4bb08",
        "type": "debug",
        "z": "797d9b2a7151f089",
        "g": "5d89e93885229fe1",
        "name": "debug 103",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 1310,
        "wires": []
    },
    {
        "id": "a2df31a6143f0148",
        "type": "debug",
        "z": "797d9b2a7151f089",
        "g": "5d89e93885229fe1",
        "name": "debug 102",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 1370,
        "wires": []
    },
    {
        "id": "60d4bb2262ebf375",
        "type": "comment",
        "z": "797d9b2a7151f089",
        "g": "5d89e93885229fe1",
        "name": "À revoir - Structurer le message du Gateway",
        "info": "",
        "x": 850,
        "y": 1450,
        "wires": []
    },
    {
        "id": "27d79d1a4af37e13",
        "type": "sqlite",
        "z": "797d9b2a7151f089",
        "d": true,
        "g": "5d89e93885229fe1",
        "mydb": "628739f370d1726d",
        "sqlquery": "prepared",
        "sql": "INSERT INTO SYSTEM_LOG (\n    id_device,\n    id_event_type,\n    log,\n    topic,\n    counter,\n    version,\n    datetime\n)\nVALUES (\n  $id_device,\n  $log,\n  $topic,\n  $counter,\n  $version,\n  datetime('now', 'localtime')\n);\n",
        "name": "SystemLog",
        "x": 920,
        "y": 1420,
        "wires": [
            []
        ]
    },
    {
        "id": "c1c1ebd04c6e798e",
        "type": "ui-notification",
        "z": "797d9b2a7151f089",
        "d": true,
        "g": "5d89e93885229fe1",
        "ui": "d4c9d9e9b37824ea",
        "position": "top right",
        "colorDefault": true,
        "color": "#000000",
        "displayTime": "0",
        "showCountdown": true,
        "outputs": 0,
        "allowDismiss": true,
        "dismissText": "Close",
        "raw": false,
        "className": "",
        "name": "",
        "x": 600,
        "y": 1470,
        "wires": []
    },
    {
        "id": "4805c368e2c34a0c",
        "type": "ui-led",
        "z": "797d9b2a7151f089",
        "g": "5d89e93885229fe1",
        "name": "",
        "group": "fd9c7176b0a431e9",
        "order": 1,
        "width": "0",
        "height": "0",
        "label": "GW - I'm alive",
        "labelPlacement": "left",
        "labelAlignment": "flex-start",
        "states": [
            {
                "value": "IM_ALIVE_MISSING",
                "valueType": "str",
                "color": "#ff0000"
            },
            {
                "value": "IM_ALIVE",
                "valueType": "str",
                "color": "#00ff00"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "square",
        "showBorder": true,
        "showGlow": true,
        "x": 930,
        "y": 1330,
        "wires": []
    },
    {
        "id": "1784ee5849a07738",
        "type": "status",
        "z": "797d9b2a7151f089",
        "g": "8feba00f9cb9532b",
        "name": "Status Serial port",
        "scope": [
            "56d1fae213c30e8a",
            "da939ff73faa3d33",
            "d2b39a2251d4d124",
            "7a1a4351ec72b9b3",
            "5fc3dcdaa67d4078"
        ],
        "x": 160,
        "y": 1160,
        "wires": [
            [
                "526010976c842e2c"
            ]
        ]
    },
    {
        "id": "44e59e8574df7bf8",
        "type": "ui-led",
        "z": "797d9b2a7151f089",
        "g": "8feba00f9cb9532b",
        "name": "",
        "group": "fd9c7176b0a431e9",
        "order": 2,
        "width": "0",
        "height": "0",
        "label": "Port série",
        "labelPlacement": "left",
        "labelAlignment": "flex-start",
        "states": [
            {
                "value": "stopped",
                "valueType": "str",
                "color": "#ff0000"
            },
            {
                "value": "connected",
                "valueType": "str",
                "color": "#00ff00"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "square",
        "showBorder": true,
        "showGlow": true,
        "x": 540,
        "y": 1160,
        "wires": []
    },
    {
        "id": "526010976c842e2c",
        "type": "function",
        "z": "797d9b2a7151f089",
        "g": "8feba00f9cb9532b",
        "name": "Statut port série",
        "func": "\n//msg.class=\"my-class\"\n\nswitch (msg.status.text) {\n   case \"node-red:common.status.connected\":\n      msg.payload = \"connected\";\n      return msg;\n   case \"node-red:common.status.connecting\":\n      msg.payload = \"connecting\";\n      return msg;\n   case \"node-red:common.status.not-connected\":\n      msg.payload = \"stopped\";\n    //  msg.class=\"my-class\"\n      return msg;\n  \n   default:\n      //msg.payload = msg.status.text;\n}\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 1160,
        "wires": [
            [
                "44e59e8574df7bf8",
                "0cbbba078e7506a7"
            ]
        ]
    },
    {
        "id": "0cbbba078e7506a7",
        "type": "debug",
        "z": "797d9b2a7151f089",
        "g": "8feba00f9cb9532b",
        "name": "debug 164",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 560,
        "y": 1200,
        "wires": []
    },
    {
        "id": "0efe0dc629d83c81",
        "type": "status",
        "z": "797d9b2a7151f089",
        "g": "70160f0a7636882f",
        "name": "Status MQTT",
        "scope": [
            "16071ac81dfe26dd",
            "68020bb809a9d64b",
            "e27a25756c4ae984"
        ],
        "x": 160,
        "y": 860,
        "wires": [
            [
                "d95bc61b71d72cb2",
                "0f27b5b866c9b4a4"
            ]
        ]
    },
    {
        "id": "375f5d90204152ea",
        "type": "function",
        "z": "797d9b2a7151f089",
        "g": "70160f0a7636882f",
        "name": "Statut MQTT",
        "func": "\nswitch (msg.status.text) {\n   case \"node-red:common.status.connected\":\n\n      msg.payload = \"connected\";\n      //Pour la gestion du délai\n      msg.reset = 1;\n      msg.delay = 0;\n      break;\n   case \"node-red:common.status.connecting\":\n      msg.payload = \"connecting\";\n      msg.delay = 10000;\n      break;\n   case \"node-red:common.status.disconnected\":\n      msg.payload = \"disconnected\";\n      break;\n   default:\n      msg.payload = msg.status.text;\n}\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 860,
        "wires": [
            [
                "037ff0d4ccce8f8a",
                "441a41af679a65f8",
                "b06e8d799cfe5b7e"
            ]
        ]
    },
    {
        "id": "037ff0d4ccce8f8a",
        "type": "debug",
        "z": "797d9b2a7151f089",
        "g": "70160f0a7636882f",
        "name": "Status MQTT",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 760,
        "y": 820,
        "wires": [],
        "info": "# Plus grand"
    },
    {
        "id": "d95bc61b71d72cb2",
        "type": "debug",
        "z": "797d9b2a7151f089",
        "g": "70160f0a7636882f",
        "name": "Status MQTT 1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 330,
        "y": 820,
        "wires": [],
        "info": "# Plus grand"
    },
    {
        "id": "441a41af679a65f8",
        "type": "ui-led",
        "z": "797d9b2a7151f089",
        "g": "70160f0a7636882f",
        "name": "Statut MQTT",
        "group": "fd9c7176b0a431e9",
        "order": 3,
        "width": "0",
        "height": "0",
        "label": "MQTT",
        "labelPlacement": "left",
        "labelAlignment": "flex-start",
        "states": [
            {
                "value": "disconnected",
                "valueType": "str",
                "color": "#ff0000"
            },
            {
                "value": "connected",
                "valueType": "str",
                "color": "#00ff00"
            },
            {
                "value": "connecting",
                "valueType": "str",
                "color": "#ffffa4"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "square",
        "showBorder": true,
        "showGlow": true,
        "x": 750,
        "y": 870,
        "wires": []
    },
    {
        "id": "3f153da6282bee3d",
        "type": "exec",
        "z": "797d9b2a7151f089",
        "g": "5426475307091e39",
        "command": "sudo systemctl restart mosquitto",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Mosquitto restart",
        "x": 580,
        "y": 1010,
        "wires": [
            [
                "93ac05f20fb98b77"
            ],
            [
                "93ac05f20fb98b77"
            ],
            []
        ]
    },
    {
        "id": "0f27b5b866c9b4a4",
        "type": "rbe",
        "z": "797d9b2a7151f089",
        "g": "70160f0a7636882f",
        "name": "Vérifier statut",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "status",
        "topi": "topic",
        "x": 360,
        "y": 860,
        "wires": [
            [
                "375f5d90204152ea",
                "2298e5a1f57713dc"
            ]
        ]
    },
    {
        "id": "b06e8d799cfe5b7e",
        "type": "delay",
        "z": "797d9b2a7151f089",
        "g": "5426475307091e39",
        "name": "Delay Restart",
        "pauseType": "delayv",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 360,
        "y": 1000,
        "wires": [
            [
                "3f153da6282bee3d"
            ]
        ]
    },
    {
        "id": "1e15606728d3ede4",
        "type": "inject",
        "z": "797d9b2a7151f089",
        "g": "5426475307091e39",
        "name": "Restart",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 380,
        "y": 1040,
        "wires": [
            [
                "3f153da6282bee3d"
            ]
        ]
    },
    {
        "id": "e1f758553dcda8db",
        "type": "inject",
        "z": "797d9b2a7151f089",
        "g": "70160f0a7636882f",
        "name": "Green",
        "props": [
            {
                "p": "status",
                "v": "{\"fill\":\"green\",\"shape\":\"dot\",\"text\":\"node-red:common.status.connected\",\"source\":{\"id\":\"68020bb809a9d64b\",\"type\":\"mqtt in\"}}",
                "vt": "json"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 960,
        "wires": [
            [
                "0f27b5b866c9b4a4"
            ]
        ]
    },
    {
        "id": "2298e5a1f57713dc",
        "type": "debug",
        "z": "797d9b2a7151f089",
        "g": "70160f0a7636882f",
        "name": "debug 183",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 820,
        "wires": []
    },
    {
        "id": "8064670dc96dfa2d",
        "type": "inject",
        "z": "797d9b2a7151f089",
        "g": "70160f0a7636882f",
        "name": "Red",
        "props": [
            {
                "p": "status",
                "v": "{\"fill\":\"red\",\"shape\":\"ring\",\"text\":\"node-red:common.status.disconnected\",\"source\":{\"id\":\"68020bb809a9d64b\",\"type\":\"mqtt in\"}}",
                "vt": "json"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 930,
        "wires": [
            [
                "0f27b5b866c9b4a4"
            ]
        ]
    },
    {
        "id": "4e4b504034ad202f",
        "type": "inject",
        "z": "797d9b2a7151f089",
        "g": "70160f0a7636882f",
        "name": "Yellow",
        "props": [
            {
                "p": "status",
                "v": "{\"fill\":\"yellow\",\"shape\":\"ring\",\"text\":\"node-red:common.status.connecting\",\"source\":{\"id\":\"68020bb809a9d64b\",\"type\":\"mqtt in\"}}",
                "vt": "json"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 900,
        "wires": [
            [
                "0f27b5b866c9b4a4"
            ]
        ]
    },
    {
        "id": "b261acdf1fd36081",
        "type": "mqtt in",
        "z": "797d9b2a7151f089",
        "g": "5d89e93885229fe1",
        "name": "",
        "topic": "dom-sys.gw/status",
        "qos": "0",
        "datatype": "auto",
        "broker": "c6a29fab98717cbb",
        "nl": false,
        "rap": false,
        "rh": 0,
        "inputs": 0,
        "x": 170,
        "y": 1350,
        "wires": [
            [
                "2105846b8c12cb48"
            ]
        ]
    },
    {
        "id": "2105846b8c12cb48",
        "type": "function",
        "z": "797d9b2a7151f089",
        "g": "5d89e93885229fe1",
        "name": "Dispatcher",
        "func": "\nswitch (msg.payload) {\n    case \"IM_ALIVE\":\n        //on ne log pas ce message\n        return [msg, null, null];\n        break;\n    case \"GATEWAY_START\":\n    case \"GATEWAY_RESTART\":\n        msg.params = {\n            $EventType: msg.payload,\n            $EventData: \"\"\n        }\n        return [msg, msg, null];\n        break;\n    default:\n        msgInconnu();\n}\n\n\nfunction msgInconnu() {\n    msg.topic = \"Passerelle\"\n    msg.payload = \"Message statut inconnu: \" + msg.payload;\n    return [null, null, msg];\n}\n",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 1350,
        "wires": [
            [
                "9bb6a0be709aef65"
            ],
            [],
            []
        ],
        "outputLabels": [
            "IM_ALIVE",
            "TO LOG",
            "INCONNU"
        ]
    },
    {
        "id": "8023d15b2d55ccda",
        "type": "inject",
        "z": "797d9b2a7151f089",
        "g": "5d89e93885229fe1",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "IM_ALIVE",
        "payloadType": "str",
        "x": 170,
        "y": 1310,
        "wires": [
            [
                "2105846b8c12cb48"
            ]
        ]
    },
    {
        "id": "93ac05f20fb98b77",
        "type": "subflow:d770df178aec257a",
        "z": "797d9b2a7151f089",
        "g": "5426475307091e39",
        "name": "",
        "x": 800,
        "y": 1010,
        "wires": []
    },
    {
        "id": "2b905ff025d2f0a9",
        "type": "debug",
        "z": "797d9b2a7151f089",
        "g": "beefa0c6950593db",
        "name": "debug 177",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 300,
        "wires": []
    },
    {
        "id": "426044f103a446eb",
        "type": "ui-text-input",
        "z": "797d9b2a7151f089",
        "d": true,
        "g": "869ebc417f12da40",
        "group": "5b69d242410edd23",
        "name": "Afficher",
        "label": "ESP32 log",
        "order": 4,
        "width": "9",
        "height": "12",
        "topic": "topic",
        "topicType": "msg",
        "mode": "textarea",
        "delay": 300,
        "passthru": false,
        "sendOnDelay": false,
        "sendOnBlur": false,
        "sendOnEnter": false,
        "className": "",
        "x": 780,
        "y": 430,
        "wires": [
            []
        ]
    },
    {
        "id": "8f01265513527bfe",
        "type": "function",
        "z": "797d9b2a7151f089",
        "g": "869ebc417f12da40",
        "name": "Buffer",
        "func": "let lines = flow.get(\"esplog32\") || [];\n//let lines = [];\nconst max = 200;\n\nlines.unshift(msg.payload + '\\n');\n\nif(lines.length  >= max){\n    lines.pop();\n}\n\nmsg.payload = lines;\n\nflow.set(\"esplog32\", lines);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 430,
        "wires": [
            [
                "507aba2cb3094c7f"
            ]
        ]
    },
    {
        "id": "a51e48a550bcf90a",
        "type": "tail-file",
        "z": "797d9b2a7151f089",
        "g": "869ebc417f12da40",
        "filename": "/home/pi-md/log/esp32.log",
        "createFile": false,
        "mode": "",
        "encoding": "utf-8",
        "split": true,
        "separator": "",
        "fromBeginning": false,
        "flushAtEOF": false,
        "rememberLast": true,
        "limitSize": true,
        "maxBytes": "",
        "skipBlank": false,
        "useTrim": true,
        "sendError": false,
        "interval": "1000",
        "name": "",
        "x": 260,
        "y": 430,
        "wires": [
            [
                "50d31eaa2bed55ab",
                "8f01265513527bfe"
            ]
        ]
    },
    {
        "id": "2681d73e9020159d",
        "type": "ui-text",
        "z": "797d9b2a7151f089",
        "d": true,
        "g": "869ebc417f12da40",
        "group": "5b69d242410edd23",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "La ligne du haut est  la plus récente.",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#717171",
        "className": "",
        "x": 720,
        "y": 390,
        "wires": []
    },
    {
        "id": "507aba2cb3094c7f",
        "type": "ui-template",
        "z": "797d9b2a7151f089",
        "g": "869ebc417f12da40",
        "group": "5b69d242410edd23",
        "page": "",
        "ui": "",
        "name": "Afficher fichier",
        "order": 2,
        "width": "10",
        "height": "4",
        "head": "",
        "format": "<template>\n  <v-container fluid>\n    <v-row>\n      <v-col cols=\"12\">\n        <v-textarea\n          :model-value=\"value\"\n          label=\"ESPLOG\"\n          rows=\"20\"\n          no-resize\n          variant=\"filled\"\n          shaped\n        ></v-textarea>\n      </v-col>\n    </v-row>\n  </v-container>\n</template>\n<script>\n  export default {\n    data: () => ({\n      value: ''\n    }),\n    watch: {\n      msg: function(){\n        this.value = this.msg.payload\n      },\n    }\n  }\n</script>\n",
        "storeOutMessages": true,
        "passthru": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 620,
        "y": 430,
        "wires": [
            []
        ]
    },
    {
        "id": "50d31eaa2bed55ab",
        "type": "debug",
        "z": "797d9b2a7151f089",
        "g": "869ebc417f12da40",
        "name": "debug 215",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 380,
        "wires": []
    },
    {
        "id": "9bef50d59cc9996a",
        "type": "debug",
        "z": "797d9b2a7151f089",
        "g": "fa8d72ad90e71a48",
        "name": "debug 216",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 180,
        "wires": []
    },
    {
        "id": "16e678c55b9af1c2",
        "type": "function",
        "z": "797d9b2a7151f089",
        "g": "fa8d72ad90e71a48",
        "name": "Erreurs",
        "func": "msg.payload.search(\"[E]\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 170,
        "wires": [
            []
        ]
    },
    {
        "id": "285f01bc26e7389b",
        "type": "inject",
        "z": "8c02b6694634723d",
        "g": "066292f6cf9cbfbf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 07 * * 1,4",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 100,
        "wires": [
            [
                "b8a01e4d889f9ee9"
            ]
        ]
    },
    {
        "id": "b8a01e4d889f9ee9",
        "type": "restart",
        "z": "8c02b6694634723d",
        "g": "066292f6cf9cbfbf",
        "name": "",
        "x": 360,
        "y": 100,
        "wires": []
    },
    {
        "id": "798c8432df02e379",
        "type": "sqlite",
        "z": "8c02b6694634723d",
        "g": "836f1c5e6a99b853",
        "mydb": "628739f370d1726d",
        "sqlquery": "fixed",
        "sql": "delete FROM SYSTEM_LOG\nwhere  datetime < datetime('now', 'localtime', '-2 days')",
        "name": "Delete SYS_LOG > 2 jours",
        "x": 730,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "1f65d9d6029c1383",
        "type": "inject",
        "z": "8c02b6694634723d",
        "g": "836f1c5e6a99b853",
        "name": "Ménage SYSLOG",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 09 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 260,
        "wires": [
            [
                "f71406035e082c3c"
            ]
        ]
    },
    {
        "id": "e9d695451b8cd4d1",
        "type": "inject",
        "z": "8c02b6694634723d",
        "g": "836f1c5e6a99b853",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 350,
        "wires": [
            [
                "bd7fea0d471990a7"
            ]
        ]
    },
    {
        "id": "267b2d2e30b9fb61",
        "type": "sqlite",
        "z": "8c02b6694634723d",
        "g": "836f1c5e6a99b853",
        "mydb": "628739f370d1726d",
        "sqlquery": "fixed",
        "sql": "delete FROM SYSTEM_LOG\n WHERE id_device = 3",
        "name": "Delete SYS_LOG id_device = 3",
        "x": 710,
        "y": 350,
        "wires": [
            []
        ]
    },
    {
        "id": "f71406035e082c3c",
        "type": "sqlite",
        "z": "8c02b6694634723d",
        "g": "836f1c5e6a99b853",
        "mydb": "628739f370d1726d",
        "sqlquery": "fixed",
        "sql": "SELECT count(*)\nFROM SYSTEM_LOG\nwhere  datetime < datetime('now', 'localtime', '-2 days')",
        "name": "Count Delete SYS_LOG ",
        "x": 460,
        "y": 260,
        "wires": [
            [
                "80653104c09f9d63",
                "798c8432df02e379"
            ]
        ]
    },
    {
        "id": "80653104c09f9d63",
        "type": "debug",
        "z": "8c02b6694634723d",
        "g": "836f1c5e6a99b853",
        "name": "debug 146",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 310,
        "wires": []
    },
    {
        "id": "bd7fea0d471990a7",
        "type": "sqlite",
        "z": "8c02b6694634723d",
        "g": "836f1c5e6a99b853",
        "mydb": "628739f370d1726d",
        "sqlquery": "fixed",
        "sql": "SELECT count(*)\nFROM SYSTEM_LOG\n WHERE id_device = 3\n-- where  datetime < datetime('now', 'localtime', '-2 days')",
        "name": "Count Delete SYS_LOG ",
        "x": 420,
        "y": 350,
        "wires": [
            [
                "267b2d2e30b9fb61",
                "80653104c09f9d63"
            ]
        ]
    },
    {
        "id": "6549eeb2ee54469e",
        "type": "do",
        "z": "8c02b6694634723d",
        "g": "32755367b37500ea",
        "name": "",
        "tasks": [
            "backup",
            "Dump SQL",
            "Backup-Details",
            "SQL-Details"
        ],
        "mode": "msg",
        "each": "",
        "eachType": "msg",
        "yield": "keyValue",
        "doneOutput": true,
        "firstValueOutput": false,
        "lastValueOutput": false,
        "outputs": 5,
        "_version": "0.4.1",
        "x": 260,
        "y": 680,
        "wires": [
            [
                "ddbf68cc2831b078"
            ],
            [
                "355a62cb5ec1c3f7"
            ],
            [
                "3c9152fcedecb5d3"
            ],
            [
                "41855605fb91a00e"
            ],
            [
                "0cb004ace0eed48d"
            ]
        ]
    },
    {
        "id": "a00b7f1773b75f0d",
        "type": "exec",
        "z": "8c02b6694634723d",
        "g": "32755367b37500ea",
        "command": "",
        "addpay": "command",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 590,
        "y": 630,
        "wires": [
            [
                "544099c20ffe1462",
                "7a81c3381e392550",
                "47a1113ec0ec1e9b"
            ],
            [
                "47a1113ec0ec1e9b"
            ],
            []
        ]
    },
    {
        "id": "d7464cc80855fbd1",
        "type": "inject",
        "z": "8c02b6694634723d",
        "g": "32755367b37500ea",
        "name": "Start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 09 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 680,
        "wires": [
            [
                "6549eeb2ee54469e"
            ]
        ]
    },
    {
        "id": "43051fac9db47469",
        "type": "do-return",
        "z": "8c02b6694634723d",
        "g": "32755367b37500ea",
        "name": "",
        "mode": "abort",
        "saveValue": false,
        "x": 1080,
        "y": 650,
        "wires": []
    },
    {
        "id": "544099c20ffe1462",
        "type": "debug",
        "z": "8c02b6694634723d",
        "g": "32755367b37500ea",
        "name": "debug 189",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 590,
        "wires": []
    },
    {
        "id": "a4c2ec9c436689c4",
        "type": "do-return",
        "z": "8c02b6694634723d",
        "g": "32755367b37500ea",
        "name": "",
        "mode": "done",
        "saveValue": false,
        "x": 1240,
        "y": 620,
        "wires": []
    },
    {
        "id": "7a81c3381e392550",
        "type": "switch",
        "z": "8c02b6694634723d",
        "g": "32755367b37500ea",
        "name": "Exec success",
        "property": "rc.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 760,
        "y": 630,
        "wires": [
            [
                "a4c2ec9c436689c4"
            ],
            [
                "43051fac9db47469"
            ]
        ]
    },
    {
        "id": "0cb004ace0eed48d",
        "type": "debug",
        "z": "8c02b6694634723d",
        "g": "32755367b37500ea",
        "name": "debug 191",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 430,
        "y": 790,
        "wires": []
    },
    {
        "id": "355a62cb5ec1c3f7",
        "type": "template",
        "z": "8c02b6694634723d",
        "g": "32755367b37500ea",
        "name": "Dump SQL",
        "field": "command",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "sqlite3 {{{env.DatabasePath}}}/{{{env.DatabaseName}}} .dump | gzip -c > {{{env.DatabasePath}}}/{{{env.DatabaseSqlName}}}",
        "output": "str",
        "x": 430,
        "y": 650,
        "wires": [
            [
                "a00b7f1773b75f0d"
            ]
        ]
    },
    {
        "id": "3c9152fcedecb5d3",
        "type": "template",
        "z": "8c02b6694634723d",
        "g": "32755367b37500ea",
        "name": "File backup info",
        "field": "command",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "stat {{{env.DatabasePath}}}/{{{env.DatabaseBkName}}}",
        "output": "str",
        "x": 450,
        "y": 700,
        "wires": [
            [
                "d395a6c415a67023"
            ]
        ]
    },
    {
        "id": "ddbf68cc2831b078",
        "type": "template",
        "z": "8c02b6694634723d",
        "g": "32755367b37500ea",
        "name": "Backup",
        "field": "command",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "sqlite3 {{{env.DatabasePath}}}/{{{env.DatabaseName}}} \".backup {{{env.DatabasePath}}}/{{{env.DatabaseBkName}}}\"",
        "output": "str",
        "x": 410,
        "y": 610,
        "wires": [
            [
                "a00b7f1773b75f0d"
            ]
        ]
    },
    {
        "id": "d395a6c415a67023",
        "type": "exec",
        "z": "8c02b6694634723d",
        "g": "32755367b37500ea",
        "command": "",
        "addpay": "command",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 630,
        "y": 730,
        "wires": [
            [
                "db5638e57c00e678",
                "47a1113ec0ec1e9b"
            ],
            [
                "47a1113ec0ec1e9b"
            ],
            []
        ]
    },
    {
        "id": "997bea237d58c378",
        "type": "function",
        "z": "8c02b6694634723d",
        "g": "32755367b37500ea",
        "name": "Extraction",
        "func": "let data = {};\nlet dataString = msg.payload;\n\n//Extraction grosseur fichier\nlet index = dataString.search(\"Size:\");\ndataString = dataString.substring(index );\nindex = dataString.indexOf(\"\\t\");\ndata.size = Number(dataString.substring(\"Size:\".length, index));\n\n//Extraction de la date\nindex = dataString.search(\"Modify:\");\ndataString = dataString.substring(index + \"Modify:\".length);\nindex = dataString.indexOf(\"\\n\");\nlet stringDate = dataString.substring(0, index);\nindex = stringDate.indexOf(\".\");\nstringDate = dataString.substring(0, index).trim();\ndata.date = stringDate; //Date.parse(stringDate).toString();\n\n//Nom fichier\nindex = msg.command.lastIndexOf(\"/\");\ndata.fileName = msg.command.substring(index + \"/\".length);\n\nmsg.payload = data;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 770,
        "wires": [
            [
                "a77a1fd598ea37f3"
            ]
        ]
    },
    {
        "id": "db5638e57c00e678",
        "type": "switch",
        "z": "8c02b6694634723d",
        "g": "32755367b37500ea",
        "name": "Exec success",
        "property": "rc.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 790,
        "y": 720,
        "wires": [
            [
                "997bea237d58c378"
            ],
            [
                "43051fac9db47469"
            ]
        ]
    },
    {
        "id": "41855605fb91a00e",
        "type": "template",
        "z": "8c02b6694634723d",
        "g": "32755367b37500ea",
        "name": "File SQL info",
        "field": "command",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "stat {{{env.DatabasePath}}}/{{{env.DatabaseSqlName}}}",
        "output": "str",
        "x": 450,
        "y": 740,
        "wires": [
            [
                "d395a6c415a67023"
            ]
        ]
    },
    {
        "id": "a77a1fd598ea37f3",
        "type": "change",
        "z": "8c02b6694634723d",
        "g": "32755367b37500ea",
        "name": "Params",
        "rules": [
            {
                "t": "set",
                "p": "params.$file_name",
                "pt": "msg",
                "to": "payload.fileName",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "params.$file_size",
                "pt": "msg",
                "to": "payload.size",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "params.$file_date",
                "pt": "msg",
                "to": "payload.date",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1000,
        "y": 770,
        "wires": [
            [
                "363e4e7cfed7fbdd"
            ]
        ]
    },
    {
        "id": "363e4e7cfed7fbdd",
        "type": "sqlite",
        "z": "8c02b6694634723d",
        "g": "32755367b37500ea",
        "mydb": "628739f370d1726d",
        "sqlquery": "prepared",
        "sql": "INSERT INTO LOG_BD_BACKUP (\n   file_name,\n   file_size,\n   file_date,\n   datetime\n)\nVALUES (\n   $file_name, \n   $file_size,\n   $file_date,\n   datetime('now', 'localtime') \n);\n",
        "name": "Insert LOG_BD_BACKUP",
        "x": 940,
        "y": 820,
        "wires": [
            [
                "a4c2ec9c436689c4",
                "b21a80440cfc98d5"
            ]
        ]
    },
    {
        "id": "b21a80440cfc98d5",
        "type": "debug",
        "z": "8c02b6694634723d",
        "g": "32755367b37500ea",
        "name": "debug 195",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 820,
        "wires": []
    },
    {
        "id": "0eaa724239370bca",
        "type": "comment",
        "z": "8c02b6694634723d",
        "g": "32755367b37500ea",
        "name": "Backup nodered.db + Dump SQL",
        "info": "Les résultats des copies sont sauvegardées en BD.",
        "x": 310,
        "y": 570,
        "wires": []
    },
    {
        "id": "47a1113ec0ec1e9b",
        "type": "subflow:d770df178aec257a",
        "z": "8c02b6694634723d",
        "g": "32755367b37500ea",
        "name": "",
        "x": 780,
        "y": 680,
        "wires": []
    },
    {
        "id": "d54da9e0b749cd05",
        "type": "comment",
        "z": "f178d5dee9c95e1e",
        "g": "82315bf5181c153a",
        "name": "Backup SENSOR_TEMPERATURE",
        "info": "",
        "x": 200,
        "y": 60,
        "wires": []
    },
    {
        "id": "798ffc9e016269b2",
        "type": "sqlite",
        "z": "f178d5dee9c95e1e",
        "g": "82315bf5181c153a",
        "mydb": "628739f370d1726d",
        "sqlquery": "fixed",
        "sql": "DELETE FROM TEMPERATURE_BK\n where  datetime < datetime('now', 'localtime', '-700 days');\n",
        "name": "Purge BK",
        "x": 300,
        "y": 100,
        "wires": [
            [
                "bde4a4eb4ecc2c4b"
            ]
        ]
    },
    {
        "id": "bdde4536ecd2cd3b",
        "type": "inject",
        "z": "f178d5dee9c95e1e",
        "g": "82315bf5181c153a",
        "name": "Backup",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 00 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 100,
        "wires": [
            [
                "798ffc9e016269b2"
            ]
        ]
    },
    {
        "id": "bde4a4eb4ecc2c4b",
        "type": "sqlite",
        "z": "f178d5dee9c95e1e",
        "g": "82315bf5181c153a",
        "mydb": "628739f370d1726d",
        "sqlquery": "fixed",
        "sql": "INSERT INTO TEMPERATURE_BK \n    SELECT *\n    FROM TEMPERATURE\n    WHERE id_temperature_data > \n        (SELECT CASE WHEN max(id_temperature_data) \n            IS NULL THEN 0 ELSE max(id_temperature_data) END\n        FROM TEMPERATURE_BK);",
        "name": "Copy data to BK",
        "x": 480,
        "y": 100,
        "wires": [
            [
                "719f22c2cd97bccb",
                "453ffd1c35c1e04b"
            ]
        ]
    },
    {
        "id": "0814428a1abfd17a",
        "type": "inject",
        "z": "f178d5dee9c95e1e",
        "g": "82315bf5181c153a",
        "name": "Optimiser le data",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "01 00 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 200,
        "wires": [
            [
                "453ffd1c35c1e04b"
            ]
        ]
    },
    {
        "id": "453ffd1c35c1e04b",
        "type": "sqlite",
        "z": "f178d5dee9c95e1e",
        "g": "82315bf5181c153a",
        "mydb": "628739f370d1726d",
        "sqlquery": "fixed",
        "sql": "SELECT *\nFROM TEMPERATURE\nwhere  datetime < datetime('now', 'localtime', '-2 days')\n-- WHERE id_sensor = 5\norder by id_location, datetime ;",
        "name": "SELECT TEMPERATURE",
        "x": 410,
        "y": 200,
        "wires": [
            [
                "12915a94e841aa51"
            ]
        ]
    },
    {
        "id": "12915a94e841aa51",
        "type": "function",
        "z": "f178d5dee9c95e1e",
        "g": "82315bf5181c153a",
        "name": "Filtrer ",
        "func": "\nlet lastDataKept = {};\nmsg.toKeep = [];\nmsg.toDelete = [];\nlet msg1 = {};\n\nmsg.payload.forEach(function (data) {\n    if (Math.abs(data.temperature - lastDataKept.temperature) < 0.4) {\n        msg.toDelete.push(data.id_temperature_data);\n        msg1.params = {\n            $id_temperature_data: data.id_temperature_data\n        }\n        node.send([msg1, null]\n);\n    } else {\n        lastDataKept = data;\n        msg.toKeep.push(data);\n    }\n});\n\nreturn [null, msg]\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 200,
        "wires": [
            [
                "4aa2a4f5c888b257",
                "ccfde0c94ee7c74c"
            ],
            [
                "e15536583e9491fc",
                "69e746f64c3d00bd"
            ]
        ],
        "info": "On conserve seulement les écarts de .4 degré entre deux données consécutives."
    },
    {
        "id": "4aa2a4f5c888b257",
        "type": "debug",
        "z": "f178d5dee9c95e1e",
        "g": "82315bf5181c153a",
        "name": "debug 120",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 140,
        "wires": []
    },
    {
        "id": "ccfde0c94ee7c74c",
        "type": "sqlite",
        "z": "f178d5dee9c95e1e",
        "g": "82315bf5181c153a",
        "mydb": "628739f370d1726d",
        "sqlquery": "prepared",
        "sql": "DELETE FROM TEMPERATURE\nWHERE id_temperature_data = $id_temperature_data",
        "name": "Delete data",
        "x": 770,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "719f22c2cd97bccb",
        "type": "debug",
        "z": "f178d5dee9c95e1e",
        "g": "82315bf5181c153a",
        "name": "debug 122",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 100,
        "wires": []
    },
    {
        "id": "36fe564307c47f87",
        "type": "comment",
        "z": "f178d5dee9c95e1e",
        "g": "82315bf5181c153a",
        "name": "Détruit les données de plus de 2 jours ayant un écart < .4",
        "info": "",
        "x": 270,
        "y": 160,
        "wires": []
    },
    {
        "id": "fab8a6f816b520df",
        "type": "sqlite",
        "z": "f178d5dee9c95e1e",
        "g": "39f5d1f224b9de66",
        "mydb": "628739f370d1726d",
        "sqlquery": "fixed",
        "sql": "DELETE FROM TEMPERATURE_EXTERNE_BK\n where  datetime < datetime('now', 'localtime', '-200 days');\n",
        "name": "Purge BK",
        "x": 310,
        "y": 410,
        "wires": [
            [
                "f42a210a627d4892"
            ]
        ]
    },
    {
        "id": "c044209948e618c4",
        "type": "comment",
        "z": "f178d5dee9c95e1e",
        "g": "39f5d1f224b9de66",
        "name": "Backup SENSOR_TEMPERATURE",
        "info": "",
        "x": 210,
        "y": 370,
        "wires": []
    },
    {
        "id": "8672f704d063ce96",
        "type": "inject",
        "z": "f178d5dee9c95e1e",
        "g": "39f5d1f224b9de66",
        "name": "Backup",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 00 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 410,
        "wires": [
            [
                "fab8a6f816b520df"
            ]
        ]
    },
    {
        "id": "f42a210a627d4892",
        "type": "sqlite",
        "z": "f178d5dee9c95e1e",
        "g": "39f5d1f224b9de66",
        "mydb": "628739f370d1726d",
        "sqlquery": "fixed",
        "sql": "INSERT INTO TEMPERATURE_EXTERNE_BK \n    SELECT *\n    FROM TEMPERATURE_EXTERNE\n    -- Récupération des données dont le ID > MaxId du backup\n    WHERE id_temp_externe > \n        (SELECT CASE WHEN max(id_temp_externe) \n            IS NULL THEN 0 ELSE max(id_temp_externe) END\n        FROM TEMPERATURE_EXTERNE_BK);",
        "name": "Copy data to BK",
        "x": 490,
        "y": 410,
        "wires": [
            [
                "3fe8d56b817b414a",
                "f47d039d1dd75fac"
            ]
        ]
    },
    {
        "id": "fbf0991c6a35cb15",
        "type": "inject",
        "z": "f178d5dee9c95e1e",
        "g": "39f5d1f224b9de66",
        "name": "Optimiser le data",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "01 00 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 510,
        "wires": [
            [
                "f47d039d1dd75fac"
            ]
        ]
    },
    {
        "id": "f47d039d1dd75fac",
        "type": "sqlite",
        "z": "f178d5dee9c95e1e",
        "g": "39f5d1f224b9de66",
        "mydb": "628739f370d1726d",
        "sqlquery": "fixed",
        "sql": "SELECT *\nFROM TEMPERATURE_EXTERNE\nwhere  datetime < datetime('now', 'localtime', '-7 days')\norder by datetime asc;",
        "name": "SELECT TEMPERATURE",
        "x": 420,
        "y": 510,
        "wires": [
            [
                "ac605ca570a82bf0"
            ]
        ]
    },
    {
        "id": "ac605ca570a82bf0",
        "type": "function",
        "z": "f178d5dee9c95e1e",
        "g": "39f5d1f224b9de66",
        "name": "Filtrer ",
        "func": "\nlet lastDataKept = {};\nmsg.toKeep = [];\nmsg.toDelete = [];\nlet msg1 = {};\n\nmsg.payload.forEach(function (data) {\n    if (Math.abs(data.temperature - lastDataKept.temperature) < 1) {\n        msg.toDelete.push(data.id_temp_externe);\n        msg1.params = {\n            $id_temp_externe: data.id_temp_externe\n        }\n        node.send([msg1, null]\n);\n    } else {\n        lastDataKept = data;\n        msg.toKeep.push(data);\n    }\n});\n\nreturn [null, msg]\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 510,
        "wires": [
            [
                "8305de33a78a638d",
                "f75951de629e39ef"
            ],
            [
                "d8158d9f04711bf9"
            ]
        ],
        "info": "On conserve seulement les écarts de .4 degré entre deux données consécutives."
    },
    {
        "id": "8305de33a78a638d",
        "type": "debug",
        "z": "f178d5dee9c95e1e",
        "g": "39f5d1f224b9de66",
        "name": "debug 165",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 450,
        "wires": []
    },
    {
        "id": "f75951de629e39ef",
        "type": "sqlite",
        "z": "f178d5dee9c95e1e",
        "g": "39f5d1f224b9de66",
        "mydb": "628739f370d1726d",
        "sqlquery": "prepared",
        "sql": "DELETE FROM TEMPERATURE_EXTERNE\nWHERE id_temp_externe = $id_temp_externe",
        "name": "Delete data",
        "x": 780,
        "y": 490,
        "wires": [
            []
        ]
    },
    {
        "id": "3fe8d56b817b414a",
        "type": "debug",
        "z": "f178d5dee9c95e1e",
        "g": "39f5d1f224b9de66",
        "name": "debug 166",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 410,
        "wires": []
    },
    {
        "id": "513935f0533c6b43",
        "type": "comment",
        "z": "f178d5dee9c95e1e",
        "g": "39f5d1f224b9de66",
        "name": "Détruit les données de plus de 7 jours ayant un écart < .4",
        "info": "",
        "x": 280,
        "y": 470,
        "wires": []
    },
    {
        "id": "401aeaa9442abd6e",
        "type": "subflow:d770df178aec257a",
        "z": "f178d5dee9c95e1e",
        "g": "82315bf5181c153a",
        "name": "",
        "x": 950,
        "y": 230,
        "wires": []
    },
    {
        "id": "e15536583e9491fc",
        "type": "debug",
        "z": "f178d5dee9c95e1e",
        "g": "82315bf5181c153a",
        "name": "debug 196",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 270,
        "wires": []
    },
    {
        "id": "930fd420dc0bc27a",
        "type": "subflow:d770df178aec257a",
        "z": "f178d5dee9c95e1e",
        "g": "39f5d1f224b9de66",
        "name": "",
        "x": 800,
        "y": 560,
        "wires": []
    },
    {
        "id": "69e746f64c3d00bd",
        "type": "template",
        "z": "f178d5dee9c95e1e",
        "g": "82315bf5181c153a",
        "name": "Rapport",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Data temperature\n  Rows read: {{payload.length}} -- Rows keep: {{toKeep.length}} -- Rows deleted: {{toDelete.length}}",
        "output": "str",
        "x": 770,
        "y": 230,
        "wires": [
            [
                "401aeaa9442abd6e"
            ]
        ]
    },
    {
        "id": "d8158d9f04711bf9",
        "type": "template",
        "z": "f178d5dee9c95e1e",
        "g": "39f5d1f224b9de66",
        "name": "Rapport",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Data temperature externe\n  Rows read: {{payload.length}} -- Rows keep: {{toKeep.length}} -- Rows deleted: {{toDelete.length}}",
        "output": "str",
        "x": 640,
        "y": 560,
        "wires": [
            [
                "930fd420dc0bc27a"
            ]
        ]
    },
    {
        "id": "7f206d7175eeb9c6",
        "type": "inject",
        "z": "a9c9090b.478498",
        "d": true,
        "g": "49aed5c6020fd230",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 60,
        "wires": [
            [
                "db981d4c910296e4"
            ]
        ]
    },
    {
        "id": "db981d4c910296e4",
        "type": "function",
        "z": "a9c9090b.478498",
        "d": true,
        "g": "49aed5c6020fd230",
        "name": "function 20",
        "func": "msg.payload = [\n          {\n            name: 'Frozen Yogurt',\n            calories: 159,\n            fat: 6.0,\n            carbs: 24,\n            protein: 4.0,\n            iron: 1,\n          },\n          {\n            name: 'Ice cream sandwich',\n            calories: 237,\n            fat: 9.0,\n            carbs: 37,\n            protein: 4.3,\n            iron: 1,\n          },\n          {\n            name: 'Eclair',\n            calories: 262,\n            fat: 16.0,\n            carbs: 23,\n            protein: 6.0,\n            iron: 7,\n          },\n          {\n            name: 'Cupcake',\n            calories: 305,\n            fat: 3.7,\n            carbs: 67,\n            protein: 4.3,\n            iron: 8,\n          },\n          {\n            name: 'Gingerbread',\n            calories: 356,\n            fat: 16.0,\n            carbs: 49,\n            protein: 3.9,\n            iron: 16,\n          },\n          {\n            name: 'Jelly bean',\n            calories: 375,\n            fat: 0.0,\n            carbs: 94,\n            protein: 0.0,\n            iron: 0,\n          },\n          {\n            name: 'Lollipop',\n            calories: 392,\n            fat: 0.2,\n            carbs: 98,\n            protein: 0,\n            iron: 2,\n          },\n          {\n            name: 'Honeycomb',\n            calories: 408,\n            fat: 3.2,\n            carbs: 87,\n            protein: 6.5,\n            iron: 45,\n          },\n          {\n            name: 'Donut',\n            calories: 452,\n            fat: 25.0,\n            carbs: 51,\n            protein: 4.9,\n            iron: 22,\n          },\n          {\n            name: 'KitKat',\n            calories: 518,\n            fat: 26.0,\n            carbs: 65,\n            protein: 7,\n            iron: 6,\n          }\n        ];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 50,
        "wires": [
            [
                "b73ee2792d4f5473"
            ]
        ]
    },
    {
        "id": "50cc735154d103a3",
        "type": "catch",
        "z": "a9c9090b.478498",
        "d": true,
        "g": "49aed5c6020fd230",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 150,
        "y": 230,
        "wires": [
            [
                "987a44bd9a6154e7"
            ]
        ]
    },
    {
        "id": "987a44bd9a6154e7",
        "type": "debug",
        "z": "a9c9090b.478498",
        "d": true,
        "g": "49aed5c6020fd230",
        "name": "debug 148",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 320,
        "y": 230,
        "wires": []
    },
    {
        "id": "b73ee2792d4f5473",
        "type": "ui-template",
        "z": "a9c9090b.478498",
        "d": true,
        "g": "49aed5c6020fd230",
        "group": "5b69d242410edd23",
        "page": "",
        "ui": "",
        "name": "TEST Alert",
        "order": 6,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n    <!-- Any HTML can go here -->\n    <button class=\"my-class\" onclick=\"onClick1()\">TEST Alert</button>\n</template>\n\n<script>\n   // export default {\n  //  data: () => ({\n      \n     \n  //  }),\n      /* Write any JavaScript here */\n    // add our onClick function to the window object to make it accessible by the HTML <button>\n    window.onClick1 = function () {\n        alert('Button has been clicked')\n    }\n\n    // Use send() function to pass on data back into Node-RED:\n    this.send('Component has loaded')\n\n    // Subscribe to the incoming msg's\n    this.$socket.on('msg-input:' + this.id, function(msg) {\n        // do stuff with the message\n        alert('BT1 message received: ' + msg.payload)\n    })\n //   }\n</script>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 600,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "47f5073909bee0a2",
        "type": "ui-template",
        "z": "a9c9090b.478498",
        "g": "49aed5c6020fd230",
        "group": "5b69d242410edd23",
        "page": "",
        "ui": "",
        "name": "Bouton barre du haut",
        "order": 7,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n    <Teleport v-if=\"mounted\" to=\"#app-bar-actions\">\n        <v-btn>My Action</v-btn>\n    </Teleport>\n</template>\n<script>\n    export default {\n        data() {\n            return {\n                mounted: false\n            }\n        },\n        mounted() {\n            this.mounted = true\n        }\n    }\n</script>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 270,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "993a1d17b68cf824",
        "type": "restart",
        "z": "a9c9090b.478498",
        "d": true,
        "g": "d186a865f8290820",
        "name": "",
        "x": 670,
        "y": 1610,
        "wires": []
    },
    {
        "id": "33160e7dad384fd2",
        "type": "inject",
        "z": "a9c9090b.478498",
        "g": "d186a865f8290820",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 450,
        "y": 1570,
        "wires": [
            [
                "993a1d17b68cf824",
                "355572eae47bb5b8"
            ]
        ]
    },
    {
        "id": "7be8e9a5f812950b",
        "type": "rpi-mouse",
        "z": "a9c9090b.478498",
        "g": "d186a865f8290820",
        "name": "",
        "butt": "1",
        "x": 270,
        "y": 1600,
        "wires": [
            []
        ]
    },
    {
        "id": "355572eae47bb5b8",
        "type": "shutdown",
        "z": "a9c9090b.478498",
        "g": "d186a865f8290820",
        "name": "",
        "x": 660,
        "y": 1570,
        "wires": []
    },
    {
        "id": "ecbccd54980ecba4",
        "type": "rpi-gpio in",
        "z": "a9c9090b.478498",
        "d": true,
        "g": "d186a865f8290820",
        "name": "",
        "pin": "15",
        "intype": "tri",
        "debounce": "25",
        "read": false,
        "bcm": true,
        "x": 370,
        "y": 1640,
        "wires": [
            []
        ]
    },
    {
        "id": "67442326259348aa",
        "type": "debug",
        "z": "a9c9090b.478498",
        "g": "d186a865f8290820",
        "name": "debug 175",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 1610,
        "wires": []
    },
    {
        "id": "9d011191721fd81a",
        "type": "serial in",
        "z": "a9c9090b.478498",
        "d": true,
        "g": "d186a865f8290820",
        "name": "",
        "serial": "338b8e1916d50651",
        "x": 650,
        "y": 1660,
        "wires": [
            [
                "67442326259348aa"
            ]
        ]
    },
    {
        "id": "6079638d.df403c",
        "type": "inject",
        "z": "a9c9090b.478498",
        "g": "d186a865f8290820",
        "name": "",
        "props": [
            {
                "p": "payload",
                "v": "0",
                "vt": "num"
            },
            {
                "p": "topic",
                "v": "",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 140,
        "y": 1690,
        "wires": [
            [
                "87129503.c7b358"
            ]
        ]
    },
    {
        "id": "87129503.c7b358",
        "type": "rbe",
        "z": "a9c9090b.478498",
        "g": "d186a865f8290820",
        "name": "report-by-exception",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 350,
        "y": 1710,
        "wires": [
            [
                "5e2ffc27.c61dd4"
            ]
        ]
    },
    {
        "id": "5e2ffc27.c61dd4",
        "type": "debug",
        "z": "a9c9090b.478498",
        "g": "d186a865f8290820",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 560,
        "y": 1710,
        "wires": []
    },
    {
        "id": "2dc49f96.3070c",
        "type": "inject",
        "z": "a9c9090b.478498",
        "g": "d186a865f8290820",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 140,
        "y": 1730,
        "wires": [
            [
                "87129503.c7b358"
            ]
        ]
    },
    {
        "id": "3747ef966e4122fd",
        "type": "ui-template",
        "z": "a9c9090b.478498",
        "d": true,
        "group": "5b69d242410edd23",
        "page": "",
        "ui": "",
        "name": "",
        "order": 8,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n  <v-data-table\n    :headers=\"headers\"\n    :items=\"devices\"\n    :items-per-page=\"5\"\n    class=\"elevation-1\"\n  >\n    <template v-slot:top>\n      <v-toolbar flat>\n        <v-toolbar-title>Devices</v-toolbar-title>\n        <v-divider class=\"mx-4\" inset vertical></v-divider>\n        <v-spacer></v-spacer>\n        <v-btn color=\"primary\" dark class=\"mb-2\" @click=\"addNewItem\">\n          Add New Device\n        </v-btn>\n      </v-toolbar>\n      <v-dialog v-model=\"dialog\" max-width=\"800px\">\n        <v-card>\n          <v-card-title>\n            <span class=\"text-h5\">{{ formTitle }}</span>\n          </v-card-title>\n          <v-card-text>\n            <v-container>\n              <v-row>\n                <v-col cols=\"12\" sm=\"6\" md=\"4\">\n                  <v-text-field\n                    v-model=\"editedItem.id_device\"\n                    label=\"Device ID\"\n                  ></v-text-field>\n                </v-col>\n                <v-col cols=\"12\" sm=\"6\" md=\"4\">\n                  <v-text-field\n                    v-model=\"editedItem.mac_address\"\n                    label=\"MAC Address\"\n                  ></v-text-field>\n                </v-col>\n                <v-col cols=\"12\" sm=\"6\" md=\"4\">\n                  <v-select\n                    v-model=\"editedItem.location\"\n                    :items=\"locations\"\n                    label=\"Location\"\n                  ></v-select>\n                </v-col>\n                <v-col cols=\"12\" sm=\"6\" md=\"4\">\n                  <v-select\n                    v-model=\"editedItem.status\"\n                    :items=\"['Online', 'Offline', 'Maintenance']\"\n                    label=\"Status\"\n                  ></v-select>\n                </v-col>\n              </v-row>\n              <v-divider class=\"mt-2 mb-4\"></v-divider>\n              <h3 class=\"mb-2\">Sensors</h3>\n              <v-expansion-panels>\n                <v-expansion-panel\n                  v-for=\"(sensor, sensorIndex) in editedItem.sensors\"\n                  :key=\"sensorIndex\"\n                >\n                  <v-expansion-panel-title>\n                    Sensor {{ sensorIndex + 1 }}\n                    <template v-slot:actions>\n                      <v-btn\n                        icon\n                        small\n                        color=\"error\"\n                        @click.stop=\"removeSensor(sensorIndex)\"\n                      >\n                        <v-icon>mdi-delete</v-icon>\n                      </v-btn>\n                    </template>\n                  </v-expansion-panel-title>\n                  <v-expansion-panel-text>\n                    <v-row>\n                      <v-col cols=\"12\" sm=\"6\">\n                        <v-text-field\n                          v-model.number=\"sensor.id_sensor\"\n                          label=\"Sensor ID\"\n                        ></v-text-field>\n                      </v-col>\n                      <v-col cols=\"12\" sm=\"6\">\n                        <v-text-field\n                          v-model=\"sensor.name\"\n                          label=\"Sensor Name\"\n                        ></v-text-field>\n                      </v-col>\n                    </v-row>\n                    <v-divider class=\"mt-2 mb-4\"></v-divider>\n                    <h4 class=\"mb-2\">Attributes</h4>\n                    <v-row\n                      v-for=\"(attr, attrIndex) in sensor.attributes\"\n                      :key=\"attrIndex\"\n                    >\n                      <v-col cols=\"12\" sm=\"4\">\n                        <v-text-field\n                          v-model.number=\"attr.id_attr\"\n                          label=\"Attribute ID\"\n                        ></v-text-field>\n                      </v-col>\n                      <v-col cols=\"12\" sm=\"4\">\n                        <v-text-field\n                          v-model=\"attr.name\"\n                          label=\"Attribute Name\"\n                        ></v-text-field>\n                      </v-col>\n                      <v-col cols=\"12\" sm=\"3\">\n                        <v-text-field\n                          v-model.number=\"attr.value\"\n                          label=\"Value\"\n                        ></v-text-field>\n                      </v-col>\n                      <v-col cols=\"12\" sm=\"1\">\n                        <v-btn\n                          color=\"error\"\n                          small\n                          @click=\"removeAttribute(sensor, attrIndex)\"\n                          >X</v-btn\n                        >\n                      </v-col>\n                    </v-row>\n                    <v-btn color=\"success\" small @click=\"addAttribute(sensor)\"\n                      >Add Attribute</v-btn\n                    >\n                  </v-expansion-panel-text>\n                </v-expansion-panel>\n              </v-expansion-panels>\n              <v-btn color=\"success\" class=\"mt-4\" @click=\"addSensor\"\n                >Add Sensor</v-btn\n              >\n            </v-container>\n          </v-card-text>\n          <v-card-actions>\n            <v-spacer></v-spacer>\n            <v-btn color=\"blue darken-1\" @click=\"close\">Cancel</v-btn>\n            <v-btn color=\"blue darken-1\" @click=\"save\">Save</v-btn>\n          </v-card-actions>\n        </v-card>\n      </v-dialog>\n    </template>\n    <template v-slot:item.actions=\"{ item }\">\n      <v-icon small class=\"mr-2\" @click=\"editItem(item)\"> mdi-pencil </v-icon>\n    </template>\n    <template v-slot:item.status=\"{ item }\">\n      <v-chip :color=\"getStatusColor(item.status)\" small>\n        {{ item.status }}\n      </v-chip>\n    </template>\n    <template v-slot:item.sensors=\"{ item }\">\n      {{ item.sensors.length }} sensors\n      <v-tooltip bottom max-width=\"400\">\n        <template v-slot:activator=\"{ props }\">\n          <v-icon small v-bind=\"props\">mdi-information</v-icon>\n        </template>\n        <v-card>\n          <v-card-text>\n            <div\n              v-for=\"(sensor, sIndex) in item.sensors\"\n              :key=\"sensor.id_sensor\"\n              class=\"mb-4\"\n            >\n              <h2>Sensor {{ sIndex + 1 }}:</h2>\n              {{ sensor.id_sensor}} - {{ sensor.name }}\n              <v-divider class=\"my-2\"></v-divider>\n              <h4>Attributes:</h4>\n              <v-table dense>\n                <template v-slot:default>\n                  <tbody>\n                    <tr v-for=\"attr in sensor.attributes\" :key=\"attr.id_attr\">\n                      <td>{{ attr.id_attr }}</td>\n                      <td>{{ attr.name }}</td>\n                      <td>{{ attr.value.toFixed(2) }}</td>\n                    </tr>\n                  </tbody>\n                </template>\n              </v-table>\n            </div>\n          </v-card-text>\n        </v-card>\n      </v-tooltip>\n    </template>\n  </v-data-table>\n</template>\n\n<script>\n  export default {\n    data: () => ({\n      dialog: false,\n      headers: [\n        { text: 'Device ID', value: 'id_device' },\n        { text: 'MAC Address', value: 'mac_address' },\n        { text: 'Location', value: 'location' },\n        { text: 'Status', value: 'status' },\n        { text: 'Sensors', value: 'sensors' },\n        { text: 'Actions', value: 'actions', sortable: false },\n      ],\n      devices: [],\n      editedIndex: -1,\n      editedItem: {\n        id_device: 0,\n        mac_address: '',\n        location: '',\n        status: 'Offline',\n        sensors: [],\n      },\n      defaultItem: {\n        id_device: 0,\n        mac_address: '',\n        location: '',\n        status: 'Offline',\n        sensors: [],\n      },\n      locations: ['PlaceA', 'Cuisine', 'Chambre', 'Terrasse'],\n    }),\n\n    computed: {\n      formTitle() {\n        return this.editedIndex === -1 ? 'New Device' : 'Edit Device'\n      },\n    },\n\n    created() {\n      this.addRandomDevices(3)\n    },\n    \n    mounted() {\n      this.addRandomDevices(3)\n    },\n\n    methods: {\n      addRandomDevices(count) {\n        const statuses = ['Online', 'Offline', 'Maintenance']\n        const sensorNames = ['Temperature', 'Humidity', 'Pressure', 'Light']\n        const attributeNames = ['Min', 'Max', 'Average', 'Current']\n        for (let i = 0; i < count; i++) {\n          const sensorCount = Math.floor(Math.random() * 3) + 1 // 1 to 3 sensors per device\n          const sensors = []\n          for (let j = 0; j < sensorCount; j++) {\n            const attributeCount = Math.floor(Math.random() * 3) + 1 // 1 to 3 attributes per sensor\n            const attributes = []\n            for (let k = 0; k < attributeCount; k++) {\n              attributes.push({\n                id_attr: this.generateRandomId(),\n                name: attributeNames[\n                  Math.floor(Math.random() * attributeNames.length)\n                ],\n                value: Math.random() * 100,\n              })\n            }\n            sensors.push({\n              id_sensor: this.generateRandomId(),\n              name: sensorNames[Math.floor(Math.random() * sensorNames.length)],\n              attributes: attributes,\n            })\n          }\n          this.devices.push({\n            id_device: this.generateRandomId(),\n            mac_address: this.generateRandomMac(),\n            location:\n              this.locations[Math.floor(Math.random() * this.locations.length)],\n            status: statuses[Math.floor(Math.random() * statuses.length)],\n            sensors: sensors,\n          })\n        }\n      },\n\n      generateRandomId() {\n        return Math.floor(Math.random() * 10000)\n      },\n\n      generateRandomMac() {\n        return 'XX:XX:XX:XX:XX:XX'.replace(/X/g, () => {\n          return '0123456789ABCDEF'.charAt(Math.floor(Math.random() * 16))\n        })\n      },\n\n      getStatusColor(status) {\n        if (status === 'Online') return 'green'\n        if (status === 'Offline') return 'red'\n        return 'orange'\n      },\n\n      addNewItem() {\n        this.editedIndex = -1\n        this.editedItem = JSON.parse(JSON.stringify(this.defaultItem))\n        this.dialog = true\n      },\n\n      editItem(item) {\n        this.editedIndex = this.devices.indexOf(item)\n        this.editedItem = JSON.parse(JSON.stringify(item))\n        this.dialog = true\n      },\n\n      close() {\n        this.dialog = false\n        this.$nextTick(() => {\n          this.editedItem = JSON.parse(JSON.stringify(this.defaultItem))\n          this.editedIndex = -1\n        })\n      },\n      removeSensor(index) {\n        this.editedItem.sensors.splice(index, 1)\n      },\n\n\n      save() {\n        if (this.editedIndex > -1) {\n          Object.assign(this.devices[this.editedIndex], this.editedItem)\n        } else {\n          this.devices.push(this.editedItem)\n        }\n        this.close()\n      },\n\n      addSensor() {\n        this.editedItem.sensors.push({\n          id_sensor: this.generateRandomId(),\n          name: '',\n          attributes: [],\n        })\n      },\n\n      addAttribute(sensor) {\n        sensor.attributes.push({\n          id_attr: this.generateRandomId(),\n          name: '',\n          value: 0,\n        })\n      },\n\n      removeAttribute(sensor, attrIndex) {\n        sensor.attributes.splice(attrIndex, 1)\n      },\n    },\n  }\n</script>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 140,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "03409f4c678bf6af",
        "type": "ui-markdown",
        "z": "a9c9090b.478498",
        "d": true,
        "g": "d186a865f8290820",
        "group": "5b69d242410edd23",
        "name": "",
        "order": 5,
        "width": 0,
        "height": 0,
        "content": "# Markdown Content\n\nGoes here...",
        "className": "",
        "x": 880,
        "y": 1670,
        "wires": [
            []
        ]
    },
    {
        "id": "c9031ce11cdbdb03",
        "type": "function",
        "z": "a9c9090b.478498",
        "name": "Simulation",
        "func": "\nmsg = { \"device\": { \"id_device\": 2, \"mac\": \"C0:49:EF:CC:37:4C\", \"sleep_duration\": 1666, \"im_alive_period\": 3600, \n\"sensors\": [{ \"id_sensor\": -1, \"sensor_role\": \"TEMPERATURE\", \n    \"attributs\": [{ \"id_attribut\": 19, \"name\": \"pin\", \"value\": 22 }] }, \n    { \"id_sensor\": -1, \"sensor_role\": \"TEMPERATURE\", \n    \"attributs\": [{ \"id_attribut\": 19, \"name\": \"pin\", \"value\": 22 }] }], \n\"sensorsToDelete\": [] }, \"changements\": { \"deviceToUpdate\": false, \"sensorsToUpdate\": [1100, 2200, 3300, 4400], \"attributsToUpdate\": [2000, 3000, 4000], \"sensorsToDelete\": [1190, 1000, 2000, 3000], \"attributsToDelete\": [1780, 1000, 2000, 3000] }, \"_dashboard\": { \"sourceId\": \"457086935cb6673a\", \"templateId\": \"457086935cb6673a\" }, \"_client\": { \"socketId\": \"5UvBo2b05sbT9eP5AAAD\", \"socketIp\": \"169.254.109.98\" }, \"_msgid\": \"9e9c81602daab2d7\" }\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 1490,
        "wires": [
            [
                "45bd715516f670af"
            ]
        ]
    },
    {
        "id": "507d080a20d6ad8d",
        "type": "inject",
        "z": "a9c9090b.478498",
        "name": "Simulation",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 1500,
        "wires": [
            [
                "c9031ce11cdbdb03"
            ]
        ]
    },
    {
        "id": "45bd715516f670af",
        "type": "split",
        "z": "a9c9090b.478498",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "sensor",
        "property": "device.sensors",
        "x": 550,
        "y": 1490,
        "wires": [
            [
                "befd847ae4e19935"
            ]
        ]
    },
    {
        "id": "befd847ae4e19935",
        "type": "debug",
        "z": "a9c9090b.478498",
        "name": "debug 211",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 1490,
        "wires": []
    },
    {
        "id": "a5e04c4acd4c7138",
        "type": "ui-button",
        "z": "a9c9090b.478498",
        "group": "9508bb8465b1b1e5",
        "name": "Trigger Notification",
        "label": "Send Notification",
        "order": 1,
        "width": "3",
        "height": "1",
        "emulateClick": false,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "iconPosition": "left",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "buttonColor": "green",
        "textColor": "white",
        "iconColor": "",
        "x": 220,
        "y": 610,
        "wires": [
            [
                "7b506d35fcfd9b97"
            ]
        ]
    },
    {
        "id": "7b506d35fcfd9b97",
        "type": "function",
        "z": "a9c9090b.478498",
        "name": "function 6",
        "func": "msg.payload = \"Notification Triggered!\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 610,
        "wires": [
            [
                "67c307711a8f6f52"
            ]
        ]
    },
    {
        "id": "67c307711a8f6f52",
        "type": "ui-notification",
        "z": "a9c9090b.478498",
        "ui": "d4c9d9e9b37824ea",
        "position": "center center",
        "colorDefault": true,
        "color": "#000000",
        "displayTime": "5",
        "showCountdown": true,
        "outputs": 1,
        "allowDismiss": true,
        "dismissText": "Close",
        "raw": false,
        "className": "",
        "name": "submit-notification",
        "x": 580,
        "y": 610,
        "wires": [
            []
        ]
    },
    {
        "id": "2fc1b1df36c382eb",
        "type": "inject",
        "z": "a9c9090b.478498",
        "name": "Default ",
        "props": [
            {
                "p": "DatePicker",
                "v": "",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 500,
        "wires": [
            [
                "a828407042c3efd5"
            ]
        ]
    },
    {
        "id": "ad697d6a7f8a4461",
        "type": "ui-text-input",
        "z": "a9c9090b.478498",
        "group": "5277f2969e4df951",
        "name": "",
        "label": "Date",
        "order": 1,
        "width": 0,
        "height": 0,
        "topic": "topic",
        "topicType": "msg",
        "mode": "datetime-local",
        "tooltip": "",
        "delay": 300,
        "passthru": true,
        "sendOnDelay": false,
        "sendOnBlur": true,
        "sendOnEnter": true,
        "className": "",
        "clearable": true,
        "sendOnClear": true,
        "icon": "",
        "iconPosition": "left",
        "iconInnerPosition": "inside",
        "x": 490,
        "y": 470,
        "wires": [
            [
                "debd32c6e6fe892d",
                "9500b9aa1654ab56"
            ]
        ]
    },
    {
        "id": "d1b3ab2a4f634c99",
        "type": "ui-slider",
        "z": "a9c9090b.478498",
        "group": "5277f2969e4df951",
        "name": "",
        "label": "slider",
        "tooltip": "",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "end",
        "topic": "topic",
        "topicType": "msg",
        "thumbLabel": "true",
        "showTicks": "always",
        "min": 0,
        "max": "96",
        "step": 1,
        "className": "",
        "iconPrepend": "",
        "iconAppend": "",
        "color": "",
        "colorTrack": "",
        "colorThumb": "",
        "x": 490,
        "y": 510,
        "wires": [
            [
                "debd32c6e6fe892d",
                "9e460a88103cf32e"
            ]
        ]
    },
    {
        "id": "a8ec6b648da1a39a",
        "type": "inject",
        "z": "a9c9090b.478498",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "11",
        "payloadType": "num",
        "x": 200,
        "y": 390,
        "wires": [
            []
        ]
    },
    {
        "id": "a828407042c3efd5",
        "type": "function",
        "z": "a9c9090b.478498",
        "name": "Set DateTime",
        "func": "const d = new Date();\n\n let dateString = d.toLocaleDateString('fr-ca', {\n            year: 'numeric',\n            month: 'numeric',\n            day: 'numeric'\n          });\n\nmsg.payload = dateString + \" 00:00\";\nmsg.topic = \"DatePicker\";\n\nlet msg2 = {};\nmsg2.payload = 24;\nmsg2.topic = \"Slider\"\n\nflow.set(msg.topic, msg.payload);\nflow.set(msg2.topic, msg2.payload);\n\nreturn [msg, msg2];\n\n//return [null, msg];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 500,
        "wires": [
            [
                "ad697d6a7f8a4461"
            ],
            [
                "d1b3ab2a4f634c99"
            ]
        ]
    },
    {
        "id": "debd32c6e6fe892d",
        "type": "function",
        "z": "a9c9090b.478498",
        "name": "Params",
        "func": "if (msg.topic === \"Slider\") {\n    flow.set('Slider', msg.payload);\n}\nif (msg.topic === \"DatePicker\") {\n    flow.set('DatePicker', msg.payload);\n}\n\n//On garde en mémoire la liste de mac.\nlet idList = context.get(\"idList\") || [];\n\nif (msg.devices != undefined) {\n    idList = [];\n    msg.devices.forEach(function (device) {\n        if (device.id_sensor != undefined) {\n            idList.push(device.id_location);\n            context.set(\"idList\", idList)\n        }\n    });\n}\n\nlet nbHours;\nlet dateSelected;\n\nnbHours = '+' +  flow.get('Slider') + ' hours'\ndateSelected =  flow.get('DatePicker');\n\n\nmsg.topic = \"SELECT id_location, acronyme, temperature, humidity, counter, datetime\"\n    + \" from DATA_VIEW\"\n    + \" where id_location in ( \" + idList.toString() + \"  )\"\n    + \" AND datetime > datetime('\"+ dateSelected + \"', 'localtime') \"\n    + \" AND datetime < datetime('\"+ dateSelected + \"', 'localtime', '\" + nbHours + \"') \"\n    + \" and role like 'TEMPERATURE'\"\n    + \" ORDER BY id_sensor, datetime asc;\"\n\n//    + \" and datetime > datetime('2024-04-15T04:00:00.000Z', 'localtime', '\" + nbHours + \"' )\"\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 410,
        "wires": [
            [
                "5cc55aecf3ee8575"
            ]
        ]
    },
    {
        "id": "5cc55aecf3ee8575",
        "type": "debug",
        "z": "a9c9090b.478498",
        "name": "debug 221",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 380,
        "wires": []
    },
    {
        "id": "9500b9aa1654ab56",
        "type": "debug",
        "z": "a9c9090b.478498",
        "name": "debug 219",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 480,
        "wires": []
    },
    {
        "id": "9e460a88103cf32e",
        "type": "debug",
        "z": "a9c9090b.478498",
        "name": "debug 220",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 520,
        "wires": []
    },
    {
        "id": "9a358fede99924d0",
        "type": "ui-button-group",
        "z": "a9c9090b.478498",
        "name": "",
        "group": "5b69d242410edd23",
        "order": 1,
        "width": 6,
        "height": 1,
        "label": "button group",
        "rounded": false,
        "useThemeColors": true,
        "passthru": false,
        "options": [
            {
                "label": "1",
                "icon": "",
                "value": "option_0",
                "valueType": "str",
                "color": "#009933"
            },
            {
                "label": "2",
                "icon": "",
                "value": "option_1",
                "valueType": "str",
                "color": "#999999"
            },
            {
                "label": "3",
                "icon": "",
                "value": "option_2",
                "valueType": "str",
                "color": "#ff6666"
            }
        ],
        "topic": "topic",
        "topicType": "msg",
        "x": 1000,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "4389fdd1091783d4",
        "type": "ui-template",
        "z": "ec6678ccf32cce98",
        "d": true,
        "g": "dfaa0e84286af4c3",
        "group": "e4203d846baf0d72",
        "page": "",
        "ui": "",
        "name": "Éditeur device",
        "order": 2,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n  <v-layout class=\"rounded rounded-md\">\n    <v-app-bar color=\"surface-variant\" title=\"Configuration Device\">\n      <v-btn append-icon=\"mdi-send-circle\" position=\"static\" text=\"Send to device\" variant=\"outlined\" color=\"primary\"\n        @click=\"sendToDevice()\"></v-btn>\n      <v-btn append-icon=\"mdi-refresh\" position=\"static\" text=\"Refresh\" variant=\"outlined\" color=\"primary\"\n        @click=\"refreshBD()\"></v-btn>\n    </v-app-bar>\n\n    <v-navigation-drawer location=\"left\" border=\"1\" width=\"350\">\n      <v-card class=\"mx-auto pa-1\" min-height=\"500\">\n        <v-list bg-color=\"grey-lighten-2\" max-width=\"350\">\n          <v-list-subheader>Devices</v-list-subheader>\n          <v-list-item v-for=\"(item, i) in devices\" :key=\"item.id_device\" color=\"primary\" rounded=\"xl\"\n            @click=\"device = item\">\n            {{ item.id_device }} - {{ item.mac }} \n            <v-btn icon=\"mdi:mdi-delete\" border=\"true\" color=\"blue-grey-darken-1\" size=\"small\" @click=\"deleteDevice()\"></v-btn>\n          </v-list-item>\n        </v-list>\n      </v-card>\n\n    </v-navigation-drawer>\n\n    <v-main >\n      <!-- ========================================================================= -->\n      <!-- Device -->\n      <v-card min-height=\"500\">\n        <v-container class=\"bg-blue-grey-darken-1 pa-5 ma-1\">\n          <v-card class=\"text-Left pa-1 text-caption\" color=\"blue-grey-lighten-2\" title=\"Device\">\n            <v-card-text>\n              {{ device.id_device }} - {{ device.mac }}</v-card-text>\n          </v-card>\n          <v-row>\n            <v-col cols=\"3\">\n              <v-text-field v-model=\"device.location\" label=\"Location\" required density=\"compact\"></v-text-field>\n            </v-col>\n            <v-col cols=\"2\">\n              <v-text-field v-model=\"device.sleep_duration\" label=\"Sleep\" type=\"number\" hide-details required\n                density=\"compact\" />\n            </v-col>\n            <v-col cols=\"2\">\n              <v-text-field v-model=\"device.im_alive_period\" label=\"ImAlive\" type=\"number\" hide-details required\n                density=\"compact\">\n              </v-text-field>\n            </v-col>\n            <v-col cols=\"1\">\n              <v-icon small @click=\"updateDevice()\" icon=\"mdi:mdi-content-save\" :disabled=\"deviceChange\" />\n            </v-col>\n          </v-row>\n        </v-container>\n        <!-- ========================================================================= -->\n        <!-- Sensors -->\n        <v-card class=\"pa-2 ma-1 text-h12\" color=\"blue-grey-lighten-2\" max-width=\"600\">\n          <v-row>\n            <v-col cols=\"2\"> Sensors</v-col>\n            <v-col cols=\"3\">\n              <v-icon small @click=\"addSensor()\"> mdi-plus-circle </v-icon>\n            </v-col>\n          </v-row>\n        </v-card>\n        <v-container class=\"bg-blue-grey-darken-1 mb-1 ma-1\" v-for=\"(sensor, index) in device.sensors\"\n          :key=\"sensor.id_sensor\">\n          <v-row>\n            <v-col cols=\"1\" offset=\"1\" align-self=\"start\">\n              <v-text-field :model-value=\"sensor.id_sensor\" hide-details disabled density=\"compact\"\n                bg-color=\"bg-blue-grey-darken-2\"></v-text-field>\n            </v-col>\n            <v-col cols=\"3\">\n              <v-select v-model=\"sensor.sensor_role\" :items=\"rolesList\" label=\"Rôle\" return-object single-line density=\"compact\">\n              </v-select>\n            </v-col>\n            <v-col cols=\"2\">\n              <v-icon small @click=\"deleteSensor(sensor, index)\" icon=\"mdi:mdi-delete\"></v-icon>\n              <v-icon small @click=\"saveSensor(device, sensor)\" icon=\"mdi:mdi-content-save\"></v-icon>\n            </v-col>\n          </v-row>\n\n          <!-- ================================== Attributs ======================================= -->\n          <!-- En tête -->\n          <v-card class=\"pa-2 ma-1 text-h12\" color=\"blue-grey-lighten-2\">\n            <v-row>\n              <v-col cols=\"2\"> Attributs</v-col>\n              <v-col cols=\"3\">\n                <v-icon small @click=\"addAttribut(sensor)\" icon=\"mdi:mdi-plus-circle\" />\n              </v-col>\n            </v-row>\n          </v-card>\n          <!-- Attributs -- Liste des attributs -->\n          <v-container class=\"bg-blue-grey-darken-1 mb-0\" v-for=\"(attribut, attIndex) in sensor.attributs\">\n            <v-row>\n              <v-col cols=\"1\" offset=\"1\" align-self=\"start\">\n                <v-text-field :model-value=\"attribut.id_attribut\" hide-details disabled density=\"compact\"\n                  bg-color=\"bg-blue-grey-darken-2\"></v-text-field>\n              </v-col>\n              <v-col cols=\"3\">\n                <v-text-field v-model=\"attribut.name\" label=\"Nom\" hide-details required density=\"compact\">\n                </v-text-field>\n              </v-col>\n              <v-col cols=\"3\">\n                <v-text-field v-model=\"attribut.value\" label=\"Valeur\" hide-details required density=\"compact\">\n                </v-text-field>\n              </v-col>\n              <!-- Attributs -- Liste des actions -->\n              <v-col cols=\"2\">\n                <v-icon small @click=\"deleteAttribut(sensor, attribut, attIndex)\" icon=\"mdi:mdi-delete\"> </v-icon>\n                <v-icon small @click=\"saveAttribut(sensor, attribut)\" icon=\"mdi:mdi-content-save\"></v-icon>\n              </v-col>\n            </v-row>\n          </v-container>\n        </v-container>\n      </v-card>\n    </v-main>\n  </v-layout>\n</template>\n\n<script>\n  export default {\n    data: () => ({\n    devices: [],\n    device: {},\n    deviceId: -1,\n    deviceChange: false,\n    attributToUpdate: {},    \n    sensorToUpdate: {},\n    rolesList: [\"ND\"],\n    \n    }),\n    mounted() {\n      this.devices = this.msg?.devices;\n     console.log(\"mounted\");\n    },\n    updated(){\n      this.send({message:\"updated\"});\n    },\n    onInput(){\n      this.send({message:\"onInput\"});\n    },\n    watch: {\n      msg: function(){\n        switch(this.msg.action){\n          case \"loadDevices\":\n            this.rolesList = this.msg.rolesList;\n            this.devices = this.msg.devices;\n            break;\n          case  \"attributLastId\":\n             this.attributToUpdate.id_attribut = this.msg.insertId;\n            break;\n           case  \"sensorLastId\":\n             this.sensorToUpdate.id_sensor = this.msg.insertId;\n            break;\n         default:\n           \n        }\n        \n      }\n    },\n    methods: {\n      refreshBD() {\n            this.send({type: \"refreshBD\"});\n      },\n      sendToDevice() {\n        this.send({type: \"configuration\",action: \"send\",device: this.device});\n        \n      },\n      updateDevice() {\n        this.send({type: \"device\",action: \"update\",device: this.device});\n      },\n      deleteDevice() {\n        this.send({type: \"device\",action:\"delete\",device: this.device});\n      },      \n      saveSensor(device, sensor) {\n        if(sensor.id_sensor === -1){\n          this.sensorToUpdate = sensor;\n          this.send({type: \"sensor\",action:\"insert\",device: device, sensor: sensor});\n        }else{\n          this.send({type: \"sensor\",action:\"update\",device: device, sensor: sensor});\n        }\n      },\n      saveAttribut(sensor, attribut) {\n        this.attributToUpdate = attribut;\n\n        if (attribut.id_attribut == -1) {\n          console.log(\"Ajout attribut à la BD\")\n          this.send({type: \"attribut\",action:\"insert\",id_sensor: sensor.id_sensor, attribut: attribut});\n        }else{\n          this.send({type:\"attribut\", action:\"update\", attribut: attribut});\n        }\n      },\n      updateSensor(index) {\n        //Ne fait rien\n      },\n      addSensor() {\n        this.device.sensors.push({\n          id_sensor: -1,\n          attributs: [],\n        })\n      },\n      \n      addAttribut(sensor) {\n        sensor.attributs.push({\n          id_attribut: -1,\n          name: 'XXX',\n          value: 0\n        });\n        console.log('test')\n      },\n      deleteSensor(sensor, index) {\n        let x = this.device.sensors.splice(index, 1)\n        this.send({type: \"sensor\",action:\"delete\",sensor:sensor});\n      },\n      deleteAttribut(sensor, attribut, attIndex) {\n        let x = sensor.attributs.splice(attIndex, 1);\n        this.send({type: \"attribut\", action: \"delete\", attribut: attribut});\n      },\n    },\n  }\n</script>",
        "storeOutMessages": true,
        "passthru": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 250,
        "y": 200,
        "wires": [
            [
                "8243b44d05178527",
                "5281a6741f7934e9"
            ]
        ]
    },
    {
        "id": "8243b44d05178527",
        "type": "switch",
        "z": "ec6678ccf32cce98",
        "g": "dfaa0e84286af4c3",
        "name": "Type data",
        "property": "type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "device",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "sensor",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "attribut",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "refreshBD",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "configuration",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": true,
        "outputs": 6,
        "x": 200,
        "y": 340,
        "wires": [
            [
                "c4e724fa73826a50"
            ],
            [
                "64aab75dcd444ffc"
            ],
            [
                "e1a553834b10e213"
            ],
            [
                "836dfbcc857f6e1b"
            ],
            [
                "0beb5ac9e1a01e39"
            ],
            []
        ]
    },
    {
        "id": "43c18597783c3def",
        "type": "link in",
        "z": "ec6678ccf32cce98",
        "g": "dfaa0e84286af4c3",
        "name": "IN-EditeurDevice",
        "links": [
            "c019c31104c9e3fb",
            "e114f876591ccfa1"
        ],
        "x": 135,
        "y": 200,
        "wires": [
            [
                "4389fdd1091783d4"
            ]
        ]
    },
    {
        "id": "836dfbcc857f6e1b",
        "type": "link out",
        "z": "ec6678ccf32cce98",
        "g": "dfaa0e84286af4c3",
        "name": "Request - Refresh Device",
        "mode": "link",
        "links": [
            "5e2d481f338e5d45"
        ],
        "x": 315,
        "y": 440,
        "wires": []
    },
    {
        "id": "0beb5ac9e1a01e39",
        "type": "link out",
        "z": "ec6678ccf32cce98",
        "g": "dfaa0e84286af4c3",
        "name": "Send configuration out",
        "mode": "link",
        "links": [],
        "x": 285,
        "y": 470,
        "wires": []
    },
    {
        "id": "94a25f5f0f5bbf85",
        "type": "change",
        "z": "ec6678ccf32cce98",
        "g": "fb3df188fb17ca18",
        "name": "Params",
        "rules": [
            {
                "t": "set",
                "p": "params.$id_device",
                "pt": "msg",
                "to": "device.id_device",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "params.$sleep_duration",
                "pt": "msg",
                "to": "device.sleep_duration",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "params.$im_alive_period",
                "pt": "msg",
                "to": "device.im_alive_period",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 180,
        "wires": [
            [
                "05ca023428f3e56d"
            ]
        ]
    },
    {
        "id": "05ca023428f3e56d",
        "type": "sqlite",
        "z": "ec6678ccf32cce98",
        "g": "fb3df188fb17ca18",
        "mydb": "628739f370d1726d",
        "sqlquery": "prepared",
        "sql": "UPDATE DEVICE \nSET sleep_duration = $sleep_duration,\n  im_alive_period = $im_alive_period,\n  datetime = strftime('%s','now')\nWHERE id_device = $id_device;",
        "name": "Update",
        "x": 780,
        "y": 170,
        "wires": [
            []
        ]
    },
    {
        "id": "c4e724fa73826a50",
        "type": "switch",
        "z": "ec6678ccf32cce98",
        "g": "fb3df188fb17ca18",
        "name": "Action",
        "property": "action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "update",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "delete",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 460,
        "y": 190,
        "wires": [
            [
                "94a25f5f0f5bbf85"
            ],
            [
                "3769bcc99dded902"
            ]
        ]
    },
    {
        "id": "3769bcc99dded902",
        "type": "change",
        "z": "ec6678ccf32cce98",
        "g": "fb3df188fb17ca18",
        "name": "Params",
        "rules": [
            {
                "t": "set",
                "p": "params.$id_device",
                "pt": "msg",
                "to": "device.id_device",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 220,
        "wires": [
            [
                "684ea77c83d9bbdd"
            ]
        ]
    },
    {
        "id": "684ea77c83d9bbdd",
        "type": "sqlite",
        "z": "ec6678ccf32cce98",
        "g": "fb3df188fb17ca18",
        "mydb": "628739f370d1726d",
        "sqlquery": "prepared",
        "sql": "DELETE FROM DEVICE\nWHERE id_device = $id_device;",
        "name": "Delete",
        "x": 770,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "64aab75dcd444ffc",
        "type": "switch",
        "z": "ec6678ccf32cce98",
        "g": "2747294b54d3638e",
        "name": "Action",
        "property": "action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "update",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "insert",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "delete",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 460,
        "y": 360,
        "wires": [
            [
                "28ac10ee8cd542e9"
            ],
            [
                "1ef6f5d174974bb6"
            ],
            [
                "e1085faa4c4230a7"
            ]
        ]
    },
    {
        "id": "28ac10ee8cd542e9",
        "type": "change",
        "z": "ec6678ccf32cce98",
        "g": "2747294b54d3638e",
        "name": "Params",
        "rules": [
            {
                "t": "set",
                "p": "params.$id_sensor",
                "pt": "msg",
                "to": "sensor.id_sensor",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "params.$sensor_role",
                "pt": "msg",
                "to": "sensor.sensor_role",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 600,
        "y": 320,
        "wires": [
            [
                "5b31bf3dedcd5291"
            ]
        ],
        "info": "Update"
    },
    {
        "id": "1ef6f5d174974bb6",
        "type": "change",
        "z": "ec6678ccf32cce98",
        "g": "2747294b54d3638e",
        "name": "Params",
        "rules": [
            {
                "t": "set",
                "p": "params.$id_device",
                "pt": "msg",
                "to": "device.id_device",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "params.$sensor_role",
                "pt": "msg",
                "to": "sensor.sensor_role",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 600,
        "y": 360,
        "wires": [
            [
                "563615fee670206d"
            ]
        ]
    },
    {
        "id": "e1085faa4c4230a7",
        "type": "change",
        "z": "ec6678ccf32cce98",
        "g": "2747294b54d3638e",
        "name": "Params",
        "rules": [
            {
                "t": "set",
                "p": "params.$id_sensor",
                "pt": "msg",
                "to": "sensor.id_sensor",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 600,
        "y": 400,
        "wires": [
            [
                "52ab5441b29220e9"
            ]
        ]
    },
    {
        "id": "52ab5441b29220e9",
        "type": "sqlite",
        "z": "ec6678ccf32cce98",
        "g": "2747294b54d3638e",
        "mydb": "628739f370d1726d",
        "sqlquery": "prepared",
        "sql": "DELETE FROM SENSOR\nWHERE id_sensor = $id_sensor;",
        "name": "Delete",
        "x": 730,
        "y": 410,
        "wires": [
            []
        ]
    },
    {
        "id": "563615fee670206d",
        "type": "sqlite",
        "z": "ec6678ccf32cce98",
        "g": "2747294b54d3638e",
        "mydb": "628739f370d1726d",
        "sqlquery": "prepared",
        "sql": "INSERT INTO SENSOR (\n    id_device,\n    id_role)\nVALUES( \n    $id_device,\n    (   SELECT id_role \n        FROM SENSOR_ROLE\n        where role like $sensor_role)\n);\n",
        "name": "Insert ",
        "x": 730,
        "y": 360,
        "wires": [
            [
                "3ffa0607e4012b62"
            ]
        ]
    },
    {
        "id": "5b31bf3dedcd5291",
        "type": "sqlite",
        "z": "ec6678ccf32cce98",
        "g": "2747294b54d3638e",
        "mydb": "628739f370d1726d",
        "sqlquery": "prepared",
        "sql": "UPDATE SENSOR\nSET id_role = \n    (SELECT id_role \n     FROM SENSOR_ROLE\n     where role like $sensor_role)\n WHERE id_sensor = $id_sensor;\n",
        "name": "Update ",
        "x": 740,
        "y": 310,
        "wires": [
            []
        ]
    },
    {
        "id": "3ffa0607e4012b62",
        "type": "sqlite",
        "z": "ec6678ccf32cce98",
        "g": "2747294b54d3638e",
        "mydb": "628739f370d1726d",
        "sqlquery": "fixed",
        "sql": "SELECT last_insert_rowid();",
        "name": "Get last ID",
        "x": 870,
        "y": 360,
        "wires": [
            [
                "bcfdd06c8e9bf4bf"
            ]
        ]
    },
    {
        "id": "e1a553834b10e213",
        "type": "switch",
        "z": "ec6678ccf32cce98",
        "g": "14aece7b990ed601",
        "name": "Action",
        "property": "action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "update",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "insert",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "delete",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 460,
        "y": 550,
        "wires": [
            [
                "a865f2936640d964"
            ],
            [
                "9438a863f991294a"
            ],
            [
                "7d807c553d8cc4f8"
            ]
        ]
    },
    {
        "id": "a865f2936640d964",
        "type": "change",
        "z": "ec6678ccf32cce98",
        "g": "14aece7b990ed601",
        "name": "Params",
        "rules": [
            {
                "t": "set",
                "p": "params.$id_attribut",
                "pt": "msg",
                "to": "attribut.id_attribut",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "params.$name",
                "pt": "msg",
                "to": "attribut.name",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "params.$value",
                "pt": "msg",
                "to": "attribut.value",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 600,
        "y": 510,
        "wires": [
            [
                "e3e138d6a224ed69"
            ]
        ]
    },
    {
        "id": "9438a863f991294a",
        "type": "change",
        "z": "ec6678ccf32cce98",
        "g": "14aece7b990ed601",
        "name": "Params",
        "rules": [
            {
                "t": "set",
                "p": "params.$id_sensor",
                "pt": "msg",
                "to": "id_sensor",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "params.$name",
                "pt": "msg",
                "to": "attribut.name",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "params.$value",
                "pt": "msg",
                "to": "attribut.value",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 600,
        "y": 550,
        "wires": [
            [
                "8016eb6039e164b2"
            ]
        ]
    },
    {
        "id": "7d807c553d8cc4f8",
        "type": "change",
        "z": "ec6678ccf32cce98",
        "g": "14aece7b990ed601",
        "name": "Params",
        "rules": [
            {
                "t": "set",
                "p": "params.$id_attribut",
                "pt": "msg",
                "to": "attribut.id_attribut",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 600,
        "y": 590,
        "wires": [
            [
                "12e9604421c4d5b1"
            ]
        ]
    },
    {
        "id": "12e9604421c4d5b1",
        "type": "sqlite",
        "z": "ec6678ccf32cce98",
        "g": "14aece7b990ed601",
        "mydb": "628739f370d1726d",
        "sqlquery": "prepared",
        "sql": "DELETE FROM SENSOR_ATTRIBUT\nWHERE id_attribut = $id_attribut;",
        "name": "Delete",
        "x": 730,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "8016eb6039e164b2",
        "type": "sqlite",
        "z": "ec6678ccf32cce98",
        "g": "14aece7b990ed601",
        "mydb": "628739f370d1726d",
        "sqlquery": "prepared",
        "sql": "INSERT INTO SENSOR_ATTRIBUT (\n    id_sensor,\n    name,\n    value)\nVALUES (\n    $id_sensor,\n    $name,\n    $value);\n",
        "name": "Insert ",
        "x": 730,
        "y": 550,
        "wires": [
            [
                "1660a5a757851231"
            ]
        ]
    },
    {
        "id": "e3e138d6a224ed69",
        "type": "sqlite",
        "z": "ec6678ccf32cce98",
        "g": "14aece7b990ed601",
        "mydb": "628739f370d1726d",
        "sqlquery": "prepared",
        "sql": "UPDATE SENSOR_ATTRIBUT\nSET name = $name,\n    value = $value\nWHERE id_attribut = $id_attribut;",
        "name": "Update ",
        "x": 740,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "1660a5a757851231",
        "type": "sqlite",
        "z": "ec6678ccf32cce98",
        "g": "14aece7b990ed601",
        "mydb": "628739f370d1726d",
        "sqlquery": "fixed",
        "sql": "SELECT last_insert_rowid();",
        "name": "Get last ID",
        "x": 870,
        "y": 550,
        "wires": [
            [
                "842a98af577b1697"
            ]
        ]
    },
    {
        "id": "842a98af577b1697",
        "type": "change",
        "z": "ec6678ccf32cce98",
        "g": "33aac660f2f2aaf2",
        "name": "Get last ID",
        "rules": [
            {
                "t": "set",
                "p": "action",
                "pt": "msg",
                "to": "attributLastId",
                "tot": "str"
            },
            {
                "t": "move",
                "p": "payload[0].last_insert_rowid()",
                "pt": "msg",
                "to": "insertId",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1070,
        "y": 470,
        "wires": [
            [
                "c019c31104c9e3fb"
            ]
        ]
    },
    {
        "id": "bcfdd06c8e9bf4bf",
        "type": "change",
        "z": "ec6678ccf32cce98",
        "g": "33aac660f2f2aaf2",
        "name": "Get last id",
        "rules": [
            {
                "t": "set",
                "p": "action",
                "pt": "msg",
                "to": "sensorLastId",
                "tot": "str"
            },
            {
                "t": "move",
                "p": "payload[0].last_insert_rowid()",
                "pt": "msg",
                "to": "insertId",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1070,
        "y": 420,
        "wires": [
            [
                "c019c31104c9e3fb"
            ]
        ]
    },
    {
        "id": "c019c31104c9e3fb",
        "type": "link out",
        "z": "ec6678ccf32cce98",
        "g": "33aac660f2f2aaf2",
        "name": "SendLastId",
        "mode": "link",
        "links": [
            "43c18597783c3def"
        ],
        "x": 1175,
        "y": 440,
        "wires": []
    },
    {
        "id": "5281a6741f7934e9",
        "type": "debug",
        "z": "ec6678ccf32cce98",
        "g": "dfaa0e84286af4c3",
        "name": "debug 206",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 270,
        "y": 130,
        "wires": []
    },
    {
        "id": "306d455509a3747e",
        "type": "inject",
        "z": "aaaa9485612d7317",
        "name": "Inject the sample data",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[{\"timestamp\":\"2024-06-17T10:00:00Z\",\"temperature\":298.15},{\"timestamp\":\"2024-06-17T11:00:00Z\",\"temperature\":299.15},{\"timestamp\":\"2024-06-17T10:30:00Z\",\"temperature\":300.15},{\"timestamp\":\"2024-06-17T10:15:00Z\",\"temperature\":301.15},{\"timestamp\":\"2024-06-17T10:45:00Z\",\"temperature\":303.15},{\"timestamp\":\"2024-06-18T09:00:00Z\",\"temperature\":297.15},{\"timestamp\":\"2024-06-18T10:00:00Z\",\"temperature\":300.15},{\"timestamp\":\"2024-06-18T11:00:00Z\",\"temperature\":301.15},{\"timestamp\":\"2024-06-18T12:00:00Z\",\"temperature\":302.15},{\"timestamp\":\"2024-06-19T10:00:00Z\",\"temperature\":298.15},{\"timestamp\":\"2024-06-19T11:00:00Z\",\"temperature\":299.15}]",
        "payloadType": "json",
        "x": 240,
        "y": 250,
        "wires": [
            [
                "c58e1653fe5511eb"
            ]
        ]
    },
    {
        "id": "c58e1653fe5511eb",
        "type": "function",
        "z": "aaaa9485612d7317",
        "name": "Filtering, mapping, reducing and sorting data with traditional coding",
        "func": "let sensorData = msg.payload;\n\nconst filteredData = sensorData\n    .filter(item => item.timestamp.startsWith(\"2024-06-17\"))\n    .map(item => ({\n        timestamp: item.timestamp,\n        temperature: item.temperature - 273.15\n    }));\n\nfilteredData.sort((a, b) => (a.timestamp > b.timestamp) ? 1 : ((b.timestamp > a.timestamp) ? -1 : 0));\n\nconst totalTemperature = filteredData.reduce((acc, entry) => acc + entry.temperature, 0);\nconst averageTemperature = totalTemperature / filteredData.length;\n\nmsg.payload = {\n    sensorData: filteredData,\n    averageTemperature: averageTemperature\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 250,
        "wires": [
            [
                "827c7d2009eeb046"
            ]
        ]
    },
    {
        "id": "827c7d2009eeb046",
        "type": "debug",
        "z": "aaaa9485612d7317",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1050,
        "y": 250,
        "wires": []
    },
    {
        "id": "e1066547e921d1d6",
        "type": "ui-button",
        "z": "9ecbde4ebaa691ad",
        "group": "f8fdfa146ea2a11b",
        "name": "",
        "label": "Clear Chart Data",
        "order": 3,
        "width": 0,
        "height": 0,
        "emulateClick": false,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "iconPosition": "left",
        "payload": "[]",
        "payloadType": "json",
        "topic": "topic",
        "topicType": "msg",
        "buttonColor": "",
        "textColor": "",
        "iconColor": "",
        "x": 440,
        "y": 180,
        "wires": [
            [
                "dbf0d8fd55c619e2"
            ]
        ]
    },
    {
        "id": "dbf0d8fd55c619e2",
        "type": "ui-chart",
        "z": "9ecbde4ebaa691ad",
        "group": "f8fdfa146ea2a11b",
        "name": "",
        "label": "chart",
        "order": 1,
        "chartType": "line",
        "category": "Slider",
        "categoryType": "str",
        "xAxisLabel": "",
        "xAxisProperty": "",
        "xAxisPropertyType": "property",
        "xAxisType": "time",
        "xAxisFormat": "",
        "xAxisFormatType": "auto",
        "yAxisLabel": "",
        "yAxisProperty": "",
        "yAxisPropertyType": "property",
        "ymin": "",
        "ymax": "",
        "action": "append",
        "pointShape": "circle",
        "pointRadius": 4,
        "showLegend": true,
        "removeOlder": 1,
        "removeOlderUnit": "3600",
        "removeOlderPoints": "",
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "width": 6,
        "height": 8,
        "className": "",
        "x": 600,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "e10d11dda1a8f82a",
        "type": "ui-slider",
        "z": "9ecbde4ebaa691ad",
        "group": "f8fdfa146ea2a11b",
        "name": "",
        "label": "Slider",
        "tooltip": "",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "outs": "all",
        "topic": "topic",
        "topicType": "msg",
        "thumbLabel": "true",
        "showTicks": "always",
        "min": 0,
        "max": 10,
        "step": 1,
        "className": "",
        "iconPrepend": "",
        "iconAppend": "",
        "color": "",
        "colorTrack": "",
        "colorThumb": "",
        "x": 460,
        "y": 220,
        "wires": [
            [
                "dbf0d8fd55c619e2"
            ]
        ]
    }
]