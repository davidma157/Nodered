[
    {
        "id": "57111ca025f638be",
        "type": "tab",
        "label": "Gestion des devices",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "797d9b2a7151f089",
        "type": "tab",
        "label": "I/O to serial",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f178d5dee9c95e1e",
        "type": "tab",
        "label": "Gestion BD",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a9c9090b.478498",
        "type": "tab",
        "label": "Experience",
        "disabled": false,
        "info": ""
    },
    {
        "id": "97407293d780965c",
        "type": "tab",
        "label": "Flux 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "46d1b53664c89cde",
        "type": "tab",
        "label": "Flux 3",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "bc1a8754bbd79fc2",
        "type": "subflow",
        "name": "Map Device",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 100,
                "wires": [
                    {
                        "id": "3efda58226d49848"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 360,
                "y": 100,
                "wires": [
                    {
                        "id": "3efda58226d49848",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "status": {
            "x": 340,
            "y": 40,
            "wires": [
                {
                    "id": "3efda58226d49848",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "82315bf5181c153a",
        "type": "group",
        "z": "f178d5dee9c95e1e",
        "name": "Ménage SENSOR_TEMPERATURE",
        "style": {
            "fill": "#ffffbf",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "798ffc9e016269b2",
            "d54da9e0b749cd05",
            "bdde4536ecd2cd3b",
            "bde4a4eb4ecc2c4b",
            "0814428a1abfd17a",
            "453ffd1c35c1e04b",
            "12915a94e841aa51",
            "4aa2a4f5c888b257",
            "ccfde0c94ee7c74c",
            "719f22c2cd97bccb",
            "36fe564307c47f87",
            "7fc28496b2413508"
        ],
        "x": 34,
        "y": 19,
        "w": 852,
        "h": 262
    },
    {
        "id": "f6ba6aa35208baae",
        "type": "group",
        "z": "57111ca025f638be",
        "name": "Données globales",
        "style": {
            "label": true,
            "color": "#0070c0",
            "fill": "#ffcf3f"
        },
        "nodes": [
            "fde5194a774e0236",
            "0ca0d73d6c97fd4e",
            "09b6ad2a2bf86dc1",
            "6ffc190a90909afc",
            "95bfa0ba0ca08529",
            "75fb2eb7f4ea83be",
            "933c6183c294acd4",
            "8e085f8f049550ac"
        ],
        "x": 44,
        "y": 19,
        "w": 732,
        "h": 222
    },
    {
        "id": "abbcf13b0652a794",
        "type": "group",
        "z": "57111ca025f638be",
        "name": "Rafraichit la liste des devices en mémoire",
        "style": {
            "label": true,
            "color": "#0070c0",
            "stroke": "#0070c0",
            "fill": "#ffffbf"
        },
        "nodes": [
            "1559f9fd4805b155",
            "7e7f74443d618dba",
            "5185ef5d8d8f239a",
            "c577d0a5c186b549",
            "48ced1b64e697455",
            "48340506c8ec6a1e",
            "a64ce37c329514c8",
            "79e281a2bc6e4e81",
            "5e2d481f338e5d45",
            "892a6d47089017b7"
        ],
        "x": 34,
        "y": 709,
        "w": 982,
        "h": 242,
        "info": " - Device: Circuit du micro-contrôleur"
    },
    {
        "id": "5006285fb7392326",
        "type": "group",
        "z": "57111ca025f638be",
        "name": "Réception des données",
        "style": {
            "label": true,
            "color": "#000000",
            "fill": "#b797cf"
        },
        "nodes": [
            "f53bba5e293da6fb",
            "590af8aa1ccb96c4"
        ],
        "x": 28,
        "y": 273,
        "w": 1074,
        "h": 374
    },
    {
        "id": "ac3db6b9ccb43199",
        "type": "group",
        "z": "57111ca025f638be",
        "name": "Catch erreurs",
        "style": {
            "label": true,
            "color": "#000000",
            "fill": "#ffbfbf"
        },
        "nodes": [
            "80973421c6f485ce",
            "3302394b3b687c42"
        ],
        "x": 34,
        "y": 3169,
        "w": 422,
        "h": 82
    },
    {
        "id": "36653046b6da3c92",
        "type": "group",
        "z": "57111ca025f638be",
        "name": "Statuts d'activités",
        "style": {
            "label": true,
            "color": "#0070c0"
        },
        "nodes": [
            "c915ea2a8227a672",
            "33de13a0cbc96465",
            "bc77bc47e5d767ee",
            "b0c9163b98018ad6",
            "bdb9a365e5db2244",
            "eb953df028913fcc",
            "b1961cc8c9a46d65",
            "0abc6f79ff08bbc4",
            "5180a561ec14a9ed",
            "a664ec23f24b83a5"
        ],
        "x": 34,
        "y": 2379,
        "w": 772,
        "h": 282
    },
    {
        "id": "adca6ef2dfcba80e",
        "type": "group",
        "z": "57111ca025f638be",
        "name": "Réception des requêtes de la passerelle",
        "style": {
            "label": true,
            "color": "#0070c0"
        },
        "nodes": [
            "56d1fae213c30e8a",
            "ed0e40f994ac39b6",
            "e81fca2d98b5ccc7",
            "540255522bc77ebb",
            "c1a2983aa0ad8848",
            "0ac1df192d659735",
            "9ee742908744f209"
        ],
        "x": 34,
        "y": 2709,
        "w": 922,
        "h": 202
    },
    {
        "id": "37395d53ca3ec675",
        "type": "group",
        "z": "f178d5dee9c95e1e",
        "name": "A revoir --- Backup de la base de données",
        "style": {
            "label": true,
            "stroke": "#000000",
            "fill": "#ffffbf",
            "color": "#000000"
        },
        "nodes": [
            "a087fa5b04e2ed6a",
            "e9f063af5b3dbd3d",
            "497d93111671d420",
            "571f0fb3a0c1cb2f",
            "e9797086d33dca62",
            "836f1c5e6a99b853",
            "56c53ee58ee22f0a",
            "9abd8010c264a120",
            "d8da1221bf37f16a",
            "f94259e3284b277c"
        ],
        "x": 38,
        "y": 593,
        "w": 844,
        "h": 418
    },
    {
        "id": "429317fe9e4bcd87",
        "type": "group",
        "z": "f178d5dee9c95e1e",
        "name": "A revoir --- Surveillance réception données",
        "style": {
            "label": true
        },
        "nodes": [
            "074648f75d87c22c",
            "02a13a4670cc3b6d",
            "57b46483de958a15",
            "3517ba53be3b782f",
            "ab844b65273cf9b7"
        ],
        "x": 14,
        "y": 1129,
        "w": 852,
        "h": 162
    },
    {
        "id": "49aed5c6020fd230",
        "type": "group",
        "z": "a9c9090b.478498",
        "name": "UI - Test",
        "style": {
            "label": true,
            "fill": "#bfdbef",
            "color": "#001f60"
        },
        "nodes": [
            "7f206d7175eeb9c6",
            "db981d4c910296e4",
            "50cc735154d103a3",
            "987a44bd9a6154e7",
            "b73ee2792d4f5473",
            "47f5073909bee0a2"
        ],
        "x": 54,
        "y": 129,
        "w": 632,
        "h": 262
    },
    {
        "id": "e9631b841926facf",
        "type": "group",
        "z": "57111ca025f638be",
        "name": "Configuration des devices",
        "style": {
            "fill": "#bfdbef",
            "fill-opacity": "0.66",
            "label": true
        },
        "nodes": [
            "c123dda748f0409f",
            "dfaa0e84286af4c3"
        ],
        "x": 18,
        "y": 1003,
        "w": 1274,
        "h": 544
    },
    {
        "id": "b3735df348adb38e",
        "type": "group",
        "z": "57111ca025f638be",
        "name": "Surveillance réception données des sensors",
        "style": {
            "label": true
        },
        "nodes": [
            "8f34a61029fac0cb",
            "577fd00e89cbfbe3",
            "88e67d8f05a4d9a5",
            "49a66220910d81ef",
            "4970576a104ab876",
            "568e97383e4285fa",
            "53915f2f274e75b9"
        ],
        "x": 34,
        "y": 1869,
        "w": 932,
        "h": 132
    },
    {
        "id": "4ac0d347446e702f",
        "type": "group",
        "z": "57111ca025f638be",
        "name": "Chart temperature",
        "style": {
            "fill": "#ffefbf",
            "label": true
        },
        "nodes": [
            "91ced026339a3eeb",
            "44c0d2d81fe59de0",
            "1c2e8d33bf43083e",
            "f138d867ef859cef",
            "caa469a26973d9d2",
            "aa76751f0c815d88",
            "9831a0922b955da6",
            "388cb232c9079e14",
            "28c5da6a4d2da8ba",
            "98e8f77ab6b80fce",
            "836e4535583ce900",
            "0a4b76749339d8cd",
            "ea6fbc3a9d80e6ea",
            "fdcf63160f9713c2",
            "e0694b109915343b",
            "0866c283bc7f9752",
            "31e656b176aa6f36",
            "75ba57a9059087ae",
            "6c48e35750a5c6be"
        ],
        "x": 24,
        "y": 1569,
        "w": 1192,
        "h": 282
    },
    {
        "id": "39f5d1f224b9de66",
        "type": "group",
        "z": "f178d5dee9c95e1e",
        "name": "Ménage TEMPERATURE externe",
        "style": {
            "fill": "#ffffbf",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "fab8a6f816b520df",
            "c044209948e618c4",
            "8672f704d063ce96",
            "f42a210a627d4892",
            "fbf0991c6a35cb15",
            "f47d039d1dd75fac",
            "ac605ca570a82bf0",
            "8305de33a78a638d",
            "f75951de629e39ef",
            "3fe8d56b817b414a",
            "513935f0533c6b43",
            "408b96d47f5f0cce"
        ],
        "x": 44,
        "y": 299,
        "w": 852,
        "h": 262
    },
    {
        "id": "99b0856dd2e01ab4",
        "type": "group",
        "z": "57111ca025f638be",
        "name": "Configuration du Gateway",
        "style": {
            "label": true
        },
        "nodes": [
            "3fbc87fd28231303",
            "0c97012507b7fb6d",
            "95339f57b2961011",
            "8e3b455c0415942a",
            "ed85ba973cfbc3c1",
            "2b47b1be61752b81",
            "65ebe7cecc4ac2d8",
            "5826ad71ca8be439",
            "469cc2e3af8f2112",
            "2c32dee76537bd86"
        ],
        "x": 34,
        "y": 2929,
        "w": 942,
        "h": 212
    },
    {
        "id": "836f1c5e6a99b853",
        "type": "group",
        "z": "f178d5dee9c95e1e",
        "g": "37395d53ca3ec675",
        "name": "Syslog",
        "style": {
            "label": true,
            "fill": "#ffffbf"
        },
        "nodes": [
            "798c8432df02e379",
            "1f65d9d6029c1383",
            "e9d695451b8cd4d1",
            "267b2d2e30b9fb61",
            "f71406035e082c3c",
            "80653104c09f9d63",
            "bd7fea0d471990a7"
        ],
        "x": 64,
        "y": 619,
        "w": 792,
        "h": 172
    },
    {
        "id": "f53bba5e293da6fb",
        "type": "group",
        "z": "57111ca025f638be",
        "g": "5006285fb7392326",
        "name": "Météo externe",
        "style": {
            "stroke": "#ffefbf",
            "label": true,
            "color": "#000000",
            "fill": "#dbcbe7"
        },
        "nodes": [
            "438ddc13e515c438",
            "bed8c9ea7fe6b13c",
            "0bd7f81e66d83a2a",
            "562a0ef8b0073349",
            "b5fb53396f247251"
        ],
        "x": 64,
        "y": 539,
        "w": 872,
        "h": 82
    },
    {
        "id": "590af8aa1ccb96c4",
        "type": "group",
        "z": "57111ca025f638be",
        "g": "5006285fb7392326",
        "name": "Insertion données température",
        "style": {
            "fill": "#dbcbe7",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "1b2663185a65a48f",
            "976b9e48f9690a8d",
            "c8184d1d79bb29dc",
            "7b299ba00a6589b0",
            "4b60c0e64f93d254",
            "92d3ed46ab95f44f",
            "c999883d7b694976",
            "2fa7d3a1d07ea7f0",
            "97610149c73699c4",
            "ab9f8ffd38f55fc7",
            "e4aecc6f336ce4bc",
            "8244db89f6963d09"
        ],
        "x": 54,
        "y": 299,
        "w": 1022,
        "h": 212
    },
    {
        "id": "c123dda748f0409f",
        "type": "group",
        "z": "57111ca025f638be",
        "g": "e9631b841926facf",
        "name": "UI - Transmission configuration au sensor",
        "style": {
            "label": true,
            "fill": "#bfdbef",
            "color": "#001f60"
        },
        "nodes": [
            "e3b58894b8cc6969",
            "c3a5d758adbd3593",
            "93c3099696fe4e85",
            "c165aa64f3896b8e",
            "975b275b647b8632",
            "19e3a771f9e0137c",
            "1889b9b8d90b705d"
        ],
        "x": 44,
        "y": 1389,
        "w": 992,
        "h": 132
    },
    {
        "id": "dfaa0e84286af4c3",
        "type": "group",
        "z": "57111ca025f638be",
        "g": "e9631b841926facf",
        "name": "",
        "style": {
            "fill": "#bfdbef",
            "label": true
        },
        "nodes": [
            "bd3f3c3479cd419d",
            "f18c5b191d337944",
            "4389fdd1091783d4",
            "cdb1a4737e8ff593",
            "91a754628498f090",
            "8243b44d05178527",
            "05ca023428f3e56d",
            "b52f371d567bc95a",
            "12e9604421c4d5b1",
            "8016eb6039e164b2",
            "e3e138d6a224ed69",
            "349ae483ce6b71b1",
            "5b31bf3dedcd5291",
            "563615fee670206d",
            "52ab5441b29220e9",
            "1660a5a757851231",
            "842a98af577b1697",
            "3ffa0607e4012b62",
            "bcfdd06c8e9bf4bf",
            "43c18597783c3def",
            "c019c31104c9e3fb",
            "836dfbcc857f6e1b",
            "6eec73c7bfa2af4a",
            "1aa6fbca987bd56b",
            "9a8147d9bc2db19e",
            "0beb5ac9e1a01e39"
        ],
        "x": 54,
        "y": 1029,
        "w": 1212,
        "h": 342
    },
    {
        "id": "73a1234c821730ec",
        "type": "group",
        "z": "797d9b2a7151f089",
        "name": "Réception/transmission des données via port série/MQTT",
        "style": {
            "label": true,
            "fill": "#c8e7a7",
            "color": "#001f60"
        },
        "nodes": [
            "fa8d72ad90e71a48",
            "d0932bcd6a5ec1f6"
        ],
        "x": 42,
        "y": 33,
        "w": 916,
        "h": 514,
        "info": "# Redirection des donnnées\r\n## Message entrant sur le port série\r\n - On vérifie si les données commence par @\r\n - Si non , on rejette le messge.\r\n - Si oui, on extrait le topic pour l'envoyer vers MQTT.\r\n"
    },
    {
        "id": "fa8d72ad90e71a48",
        "type": "group",
        "z": "797d9b2a7151f089",
        "g": "73a1234c821730ec",
        "name": "Transmission du port série vers MQTT - Logger",
        "style": {
            "label": true,
            "fill": "#e3f3d3",
            "color": "#000000"
        },
        "nodes": [
            "da939ff73faa3d33",
            "16071ac81dfe26dd",
            "edba9caae115a851",
            "51ee3605ff9d80e0",
            "41e9b0574e55c0c8",
            "76b97aaea830e452",
            "beefa0c6950593db"
        ],
        "x": 68,
        "y": 59,
        "w": 864,
        "h": 328
    },
    {
        "id": "d0932bcd6a5ec1f6",
        "type": "group",
        "z": "797d9b2a7151f089",
        "g": "73a1234c821730ec",
        "name": "Transmission du MQTT vers port série",
        "style": {
            "fill": "#e3f3d3",
            "label": true,
            "color": "#001f60"
        },
        "nodes": [
            "d2b39a2251d4d124",
            "848f84e24987bc2f",
            "4aafe259275fd99f",
            "7a1a4351ec72b9b3",
            "e27a25756c4ae984"
        ],
        "x": 74,
        "y": 399,
        "w": 752,
        "h": 122
    },
    {
        "id": "e53915e26e2f69d5",
        "type": "group",
        "z": "797d9b2a7151f089",
        "name": "Catch erreurs",
        "style": {
            "label": true,
            "color": "#000000",
            "fill": "#ffbfbf"
        },
        "nodes": [
            "b07bf152a6d21710",
            "c2a5a48d61080e22"
        ],
        "x": 54,
        "y": 1389,
        "w": 422,
        "h": 82
    },
    {
        "id": "1be746086bdfe3c5",
        "type": "group",
        "z": "797d9b2a7151f089",
        "name": "Statut  dashboard",
        "style": {
            "stroke": "#001f60",
            "label": true,
            "color": "#ff3f3f",
            "fill": "#ffefbf"
        },
        "nodes": [
            "5d89e93885229fe1",
            "8feba00f9cb9532b",
            "70160f0a7636882f"
        ],
        "x": 38,
        "y": 563,
        "w": 1054,
        "h": 794
    },
    {
        "id": "5d89e93885229fe1",
        "type": "group",
        "z": "797d9b2a7151f089",
        "g": "1be746086bdfe3c5",
        "name": "Gateway messages",
        "style": {
            "label": true
        },
        "nodes": [
            "68020bb809a9d64b",
            "01804589863ba34e",
            "558eb47c0c8cd19f",
            "9bb6a0be709aef65",
            "d23177f02750759c",
            "0bdbc43f27e4bb08",
            "a2df31a6143f0148",
            "60d4bb2262ebf375",
            "27d79d1a4af37e13",
            "c1c1ebd04c6e798e",
            "4805c368e2c34a0c",
            "b261acdf1fd36081",
            "2105846b8c12cb48",
            "58258ca1cbedc8f2",
            "8023d15b2d55ccda"
        ],
        "x": 64,
        "y": 1059,
        "w": 1002,
        "h": 272
    },
    {
        "id": "8feba00f9cb9532b",
        "type": "group",
        "z": "797d9b2a7151f089",
        "g": "1be746086bdfe3c5",
        "name": "Statut port série",
        "style": {
            "label": true
        },
        "nodes": [
            "1784ee5849a07738",
            "44e59e8574df7bf8",
            "526010976c842e2c",
            "0cbbba078e7506a7"
        ],
        "x": 64,
        "y": 929,
        "w": 622,
        "h": 122
    },
    {
        "id": "70160f0a7636882f",
        "type": "group",
        "z": "797d9b2a7151f089",
        "g": "1be746086bdfe3c5",
        "name": "Statut MQTT ",
        "style": {
            "label": true
        },
        "nodes": [
            "0efe0dc629d83c81",
            "375f5d90204152ea",
            "037ff0d4ccce8f8a",
            "d95bc61b71d72cb2",
            "441a41af679a65f8",
            "0f27b5b866c9b4a4",
            "5426475307091e39",
            "e1f758553dcda8db",
            "2298e5a1f57713dc",
            "8064670dc96dfa2d",
            "4e4b504034ad202f"
        ],
        "x": 64,
        "y": 589,
        "w": 868,
        "h": 328,
        "info": "# Description\r\n\r\n## Vérifier statut\r\nSi le statut change un message sera émis.\r\n\r\n## Redémarrer Mosquitto\r\nSi le statut n'est pas Connecté un redémarrage de Mosquitto sera exécuté."
    },
    {
        "id": "2ff47af73d8a3d20",
        "type": "group",
        "z": "57111ca025f638be",
        "name": "Sensor messages",
        "style": {
            "label": true
        },
        "nodes": [
            "72f534142f1ef687",
            "3e8251f62ce3c3c7",
            "b34c8e94140bbb12",
            "97c2bcd44f43299c",
            "bd481b8dd3e88e7d",
            "1b2d90fb3207c856",
            "8d1c099b642472fa",
            "3b7b291f93b5dc9a",
            "f37c33f5cc57547c",
            "a147248bb7549068",
            "ac85b8d4daad3a29",
            "ee416b1f0f20e4d8",
            "b46d7561a233fae7",
            "ba7bd09e9170283f",
            "ed7c07d39dda883d",
            "8952a96107cd9181"
        ],
        "x": 34,
        "y": 2059,
        "w": 1192,
        "h": 262
    },
    {
        "id": "beefa0c6950593db",
        "type": "group",
        "z": "797d9b2a7151f089",
        "g": "fa8d72ad90e71a48",
        "name": "Gestion fichier LOG",
        "style": {
            "label": true
        },
        "nodes": [
            "855c0e1ea702f2cf",
            "b4133a029132e1bc",
            "187ba9d2889dfd5c",
            "f1f19a0d827e452e",
            "2b905ff025d2f0a9"
        ],
        "x": 94,
        "y": 231.5,
        "w": 812,
        "h": 129.5
    },
    {
        "id": "5426475307091e39",
        "type": "group",
        "z": "797d9b2a7151f089",
        "g": "70160f0a7636882f",
        "name": "Redémarrer Mosquitto",
        "style": {
            "label": true
        },
        "nodes": [
            "b06e8d799cfe5b7e",
            "1e15606728d3ede4",
            "3f153da6282bee3d",
            "a19214ca2cfc9795"
        ],
        "x": 264,
        "y": 769,
        "w": 642,
        "h": 122
    },
    {
        "id": "6eec73c7bfa2af4a",
        "type": "junction",
        "z": "57111ca025f638be",
        "g": "dfaa0e84286af4c3",
        "x": 1190,
        "y": 1230,
        "wires": [
            [
                "c019c31104c9e3fb"
            ]
        ]
    },
    {
        "id": "9a8147d9bc2db19e",
        "type": "junction",
        "z": "57111ca025f638be",
        "g": "dfaa0e84286af4c3",
        "x": 430,
        "y": 1190,
        "wires": [
            [
                "4389fdd1091783d4"
            ]
        ]
    },
    {
        "id": "c6a29fab98717cbb",
        "type": "mqtt-broker",
        "name": "Localhost MQTT",
        "broker": "localhost",
        "port": "1883",
        "clientid": "nodered",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "5",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "628739f370d1726d",
        "type": "sqlitedb",
        "db": "/home/pi-md/Database/nodered.db",
        "mode": "RW"
    },
    {
        "id": "88425ab7cad6cc83",
        "type": "serial-port",
        "name": "Gateway",
        "serialport": "/dev/ttyUSB0",
        "serialbaud": "115200",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "\\n",
        "bin": "false",
        "out": "char",
        "addchar": "\\n",
        "responsetimeout": "1500"
    },
    {
        "id": "44e231295a59480e",
        "type": "sqlitedb",
        "db": "/home/pi-md/Database/noderedDev.db",
        "mode": "RWC"
    },
    {
        "id": "d4c9d9e9b37824ea",
        "type": "ui-base",
        "name": "UI Base",
        "path": "/dashboard",
        "includeClientData": true,
        "acceptsClientConfig": [
            "ui-notification",
            "ui-control"
        ],
        "showPathInSidebar": false,
        "navigationStyle": "icon"
    },
    {
        "id": "5b69d242410edd23",
        "type": "ui-group",
        "name": "Démo",
        "page": "065a07028704b7c2",
        "width": "6",
        "height": "1",
        "order": -1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "fad2edc179425950",
        "type": "ui-page",
        "name": "Graphique",
        "ui": "d4c9d9e9b37824ea",
        "path": "/Graphique",
        "icon": "mdi-chart-timeline-variant",
        "layout": "grid",
        "theme": "a70602e73bbb2a95",
        "order": 1,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "ec83ebd45553c336",
        "type": "ui-group",
        "name": "Tableau",
        "page": "fad2edc179425950",
        "width": "6",
        "height": "1",
        "order": 2,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "59f68216b64feef8",
        "type": "ui-page",
        "name": "Configuration",
        "ui": "d4c9d9e9b37824ea",
        "path": "/Configuration",
        "icon": "mdi-cogs",
        "layout": "grid",
        "theme": "a70602e73bbb2a95",
        "order": 2,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "a70602e73bbb2a95",
        "type": "ui-theme",
        "name": "Admin Theme",
        "colors": {
            "surface": "#454545",
            "primary": "#d47e1c",
            "bgPage": "#eeeeee",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        },
        "sizes": {
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    },
    {
        "id": "e4203d846baf0d72",
        "type": "ui-group",
        "name": "Device",
        "page": "59f68216b64feef8",
        "width": "10",
        "height": "1",
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "fd9c7176b0a431e9",
        "type": "ui-group",
        "name": "Statut système",
        "page": "2d31725154be688c",
        "width": "2",
        "height": "1",
        "order": 2,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "065a07028704b7c2",
        "type": "ui-page",
        "name": "Page Test",
        "ui": "d4c9d9e9b37824ea",
        "path": "/page3",
        "icon": "mdi-dev-to",
        "layout": "grid",
        "theme": "a70602e73bbb2a95",
        "order": 5,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "d6cf618cb11d3964",
        "type": "ui-group",
        "name": "Devices",
        "page": "fad2edc179425950",
        "width": "5",
        "height": "1",
        "order": 1,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "336cf0cb878743a0",
        "type": "ui-group",
        "name": "Rapport système",
        "page": "2d31725154be688c",
        "width": "6",
        "height": "1",
        "order": 4,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "2d31725154be688c",
        "type": "ui-page",
        "name": "Système",
        "ui": "d4c9d9e9b37824ea",
        "path": "/Systeme",
        "icon": "mdi-alarm-panel-outline",
        "layout": "grid",
        "theme": "a70602e73bbb2a95",
        "order": 3,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "074b315414230834",
        "type": "ui-theme",
        "name": "Theme Name",
        "colors": {
            "surface": "#ffffff",
            "primary": "#0094ce",
            "bgPage": "#eeeeee",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        }
    },
    {
        "id": "1d5e58c3b82f3637",
        "type": "global-config",
        "name": "global-config",
        "env": []
    },
    {
        "id": "bf25a12ddc9940be",
        "type": "ui-page",
        "name": "Outils",
        "ui": "d4c9d9e9b37824ea",
        "path": "/Outils",
        "icon": "mdi-tools",
        "layout": "grid",
        "theme": "a70602e73bbb2a95",
        "order": 4,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "9f41fa0923a34ac2",
        "type": "ui-group",
        "name": "Configuration Gateway",
        "page": "bf25a12ddc9940be",
        "width": "4",
        "height": "3",
        "order": -1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "311f12a4.3d2b9e",
        "type": "mqtt-broker",
        "name": "",
        "broker": "mqtt",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": true,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "338b8e1916d50651",
        "type": "serial-port",
        "name": "GPIO",
        "serialport": "/dev/ttyAMA0",
        "serialbaud": "9600",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "\\n",
        "bin": "false",
        "out": "char",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "babb6d48868671a6",
        "type": "function",
        "z": "bc1a8754bbd79fc2",
        "d": true,
        "name": "Prototype Device",
        "func": "// ------------  SENSOR  ---------------------------\n\nfunction DevSensor(id_sensor, name) {\n  this.id_sensor = id_sensor;\n  this.name = name;\n\n  //node.log(\"constructor Device\");\n  this.functions = [];\n}\n\nDevSensor.prototype.addFunction = function(functon) {\n  if (functon != undefined) {\n    let functionUpdate;\n\n   \n  }\n}\n\nDevSensor.prototype.getId = function() {\n  return this.id_sensor;\n}\n\nglobal.set(\"DevSensor\", DevSensor);\n\n// ------------  DEVICE  ---------------------------\n\nfunction Device(id_device, mac) {\n  this.id_device = id_device;\n  this.mac = mac;\n\n  //node.log(\"constructor Device\");\n  this.sensors = [];\n}\n\nDevice.prototype.setSensor = function(sensor) {\n    \n  if (sensor != undefined) {\n    let rowUpdate = new DevSensor();\n\n    this.sensors.forEach(function (row) {\n      if (row.id_sensor === sensor.id_sensor) {\n        rowUpdate = row;\n        node.warn(\"sensorUpdate\");\n      }\n    });\n\n    this.sensors.push(sensor);\n    if (rowUpdate == undefined) {\n      this.sensors.push(sensor);\n      node.log(\"sensor\");\n    }else{\n      rowUpdate.name = sensor.name\n    }\n  }\n}\n\n\nDevice.prototype.getId = function() {\n  return this.id_device;\n}\n\nglobal.set(\"Device\", Device);\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "3efda58226d49848",
        "type": "function",
        "z": "bc1a8754bbd79fc2",
        "name": "Map Device",
        "func": "//let roles = global.get(\"SENSOR_ROLE\");\n//node.warn(roles);\n\nclass Device {\n  constructor(row) {\n    this.id_device = row.id_device;\n    this.mac = row.mac;\n    this.location = row.location;\n    this.sleep_duration = row.sleep_duration;\n    this.im_alive_period = row.im_alive_period;\n    this.sensors = new Array();\n  }\n  addSensor(data) {\n    let sensor;\n\n    this.sensors.forEach(function (row) {\n      if (row.id_sensor == data.id_sensor) {\n        sensor = row;\n      }\n    });\n    if (sensor == undefined) {\n      sensor = new Sensor(data);\n      this.sensors.push(sensor);\n    }\n    return sensor;\n  }\n  updateSensor(sensor) {\n    node.log(\"Something happened\");\n    this.sensors.forEach(function (row) {\n      if (sensor.id_sensor == row.id_sensor) {\n        row.name = sensor.name;\n      }\n    });\n  }\n  get Id() {\n    return this.id_device;\n  }\n}\n\nclass Sensor {\n  constructor(data) {\n    this.id_sensor = data.id_sensor;\n    this.sensor_role = data.sensor_role;\n    this.attributs = new Array();\n  }\n  addAttribut(data) {\n    if (data.att_name != undefined){\n      let attribut = new Attribut(data);\n      this.attributs.push(attribut);\n    }\n\n  }\n}\nclass Attribut {\n  constructor(data) {\n    if(data.att_name != undefined){\n      this.id_attribut = data.id_attribut;\n      this.name = data.att_name;\n      this.value = data.att_value;\n    }\n  }\n}\n\n// ----------------------------------------------\n//  DEBUT\n\n\nlet rows = msg.payload\n\n//let devicesMap = flow.get(\"devicesMap\");\nlet devicesMap = new Map();\n\nrows.forEach(function (data) {\n \n  let device = devicesMap.get(data.mac);\n \n  if (device == undefined) {\n    device = new Device(data);\n    devicesMap.set(device.mac, device);\n  }\n\n  if (data.id_sensor != undefined) {\n    let sensor = device.addSensor(data);\n    sensor.addAttribut(data);\n  }\n});\n\nmsg.payload = devicesMap;\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "6be6f492df236e0f",
        "type": "function",
        "z": "bc1a8754bbd79fc2",
        "d": true,
        "name": "Map Device object",
        "func": "\nclass Device {\n  constructor(row) {\n    this.id_device = row.id_device;\n    this.mac = row.mac;\n    this.location = row.location;\n    this.sleep_duration = row.sleep_duration;\n    this.im_alive_period = row.im_alive_period;\n    this.modules = new Array();\n  }\n  addModule(data) {\n    let module;\n\n    this.modules.forEach(function (row) {\n      if (row.id_module == data.id_module) {\n        module = row;\n      }\n    });\n    if (module == undefined) {\n      module = new Module(data);\n      this.modules.push(module);\n    }\n    return module;\n  }\n  updateModule(module) {\n    node.log(\"Something happened\");\n    this.modules.forEach(function (row) {\n      if (module.id_module == row.id_module) {\n        row.name = module.name;\n      }\n    });\n  }\n  get Id() {\n    return this.id_device;\n  }\n\n}\n\nclass Module {\n  constructor(row) {\n    this.id_module = row.id_module;\n    this.name = row.name;\n    this.functions = new Array();\n    this.addFunction(row);\n  }\n  addFunction(data) {\n    let modFunction;\n\n    this.functions.forEach(function (row) {\n      if (row.id == data.id_module_function) {\n        modFunction = row;\n      }\n    });\n\n    if (modFunction == undefined) {\n      modFunction = new ModuleFunction(data);\n      this.functions.push(modFunction);\n    }\n  }\n\n  get Id() {\n    return this.id_module;\n  }\n  get Name() {\n    return this.name;\n  }\n}\n\n\nclass ModuleFunction {\n  constructor(row) {\n    this.id = row.id_module_function;\n    this.name = row.function_name;\n  }\n\n  get Id() {\n    return this.id;\n  }\n}\n\n\n\nlet rows = msg.payload\n\n//let devicesMap = flow.get(\"devicesMap\");\nlet devicesMap = new Map();\n\nrows.forEach(function (data) {\n \n  let device = devicesMap.get(data.id_device);\n \n  if (device == undefined) {\n    device = new Device(data);\n    devicesMap.set(device.mac, device);\n  }\n\n  if (data.id_module != undefined) {\n    let module = device.addModule(data);\n\n    //node.send((module.Name).toString());\n    if (data.id_module_function != undefined) {\n      module.addFunction(data);\n    }\n  }\n});\n\nmsg.payload = devicesMap;\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "0ca0d73d6c97fd4e",
        "type": "comment",
        "z": "57111ca025f638be",
        "g": "f6ba6aa35208baae",
        "name": "On startup",
        "info": "",
        "x": 130,
        "y": 60,
        "wires": []
    },
    {
        "id": "1559f9fd4805b155",
        "type": "link out",
        "z": "57111ca025f638be",
        "g": "abbcf13b0652a794",
        "name": "Liste devices",
        "mode": "link",
        "links": [
            "e8cb5a4a786e5193",
            "c037ac1805891839",
            "5f7ac83fb16afe4d",
            "f2f372ee42ca4b6a",
            "80383c8b39bb180f",
            "90b179836dbee4fb",
            "f2fc2fdaa9ca44d3",
            "1cfdf79710412a55",
            "f18c5b191d337944",
            "9f07ca8bab7ea4e5",
            "2a827ba8d0b76bf8"
        ],
        "x": 975,
        "y": 790,
        "wires": []
    },
    {
        "id": "1b2663185a65a48f",
        "type": "mqtt in",
        "z": "57111ca025f638be",
        "g": "590af8aa1ccb96c4",
        "name": "",
        "topic": "dom-sys.sensor/data",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "c6a29fab98717cbb",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 380,
        "wires": [
            [
                "2fa7d3a1d07ea7f0",
                "4b60c0e64f93d254"
            ]
        ]
    },
    {
        "id": "976b9e48f9690a8d",
        "type": "inject",
        "z": "57111ca025f638be",
        "g": "590af8aa1ccb96c4",
        "name": "Simulation",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 160,
        "y": 460,
        "wires": [
            [
                "7b299ba00a6589b0"
            ]
        ]
    },
    {
        "id": "c8184d1d79bb29dc",
        "type": "function",
        "z": "57111ca025f638be",
        "g": "590af8aa1ccb96c4",
        "name": "Temperature",
        "func": "//Parametres pour prepared statement\nmsg.params = { \n  $id_sensor:msg.payload.data.id_sensor,\n  // (/10) On affiche un digit après le point.\n  $temperature:msg.payload.data.temperature/10,\n  $humidity:msg.payload.data.humidity/10,\n  $counter:msg.payload.header.counter\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 380,
        "wires": [
            [
                "97610149c73699c4"
            ]
        ],
        "outputLabels": [
            "Insert"
        ]
    },
    {
        "id": "7b299ba00a6589b0",
        "type": "function",
        "z": "57111ca025f638be",
        "g": "590af8aa1ccb96c4",
        "name": "Simulation",
        "func": "//msg.payload = {\"header\":{\"mac\":\"78:21:84:7F:61:84\",\"type\":\"DATA\",\"version\":1,\"error\":0},\"data\":{\"counter\":1,\"temperature\":105}}\n\nmsg.payload = {\"header\":{\"mac\":\"78:21:84:7F:61:84\",\"type\":\"DATA_TEMPERATURE\",\"version\":1,\"error\":0},\"data\":{\"counter\":1,\"temperature\":105}}\n\nmsg.payload = {\"header\":{\"mac\":\"C0:49:EF:CC:37:4C\",\"type\":\"DATA_TEMPERATURE\",\"version\":1,\"counter\":4,\"error\":\"\"},\n    \"data\":{\"id_sensor\":9,\"temperature\":-1,\"humidity\":258,\"battery_level\":96}};\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 460,
        "wires": [
            [
                "4b60c0e64f93d254"
            ]
        ]
    },
    {
        "id": "7e7f74443d618dba",
        "type": "inject",
        "z": "57111ca025f638be",
        "g": "abbcf13b0652a794",
        "name": "Startup",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "3",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 790,
        "wires": [
            [
                "5185ef5d8d8f239a"
            ]
        ]
    },
    {
        "id": "80973421c6f485ce",
        "type": "catch",
        "z": "57111ca025f638be",
        "g": "ac3db6b9ccb43199",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 120,
        "y": 3210,
        "wires": [
            [
                "3302394b3b687c42"
            ]
        ]
    },
    {
        "id": "3302394b3b687c42",
        "type": "debug",
        "z": "57111ca025f638be",
        "g": "ac3db6b9ccb43199",
        "name": "Catch ",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 360,
        "y": 3210,
        "wires": []
    },
    {
        "id": "09b6ad2a2bf86dc1",
        "type": "function",
        "z": "57111ca025f638be",
        "g": "f6ba6aa35208baae",
        "name": "Flow functions",
        "func": "'use strict'\nlet Functions = {\n    getDateDiff : \n        function (date_1, date_2){\n            const millis = date_1 - date_2;\n            const diff = Math.floor(millis / 1000);\n            //    console.log(\\\"Diff: \\\" + diff);\n            return diff;\n        },\n    getActivityLevel : \n        function (lastReceiptTime, sleepDuration){\n            //console.log(\"lastReceiptTime: \" + lastReceiptTime );\n            \n            const millis = Date.now() - lastReceiptTime;\n            \n            //Diff est en secondes\n            const diff = Math.floor(millis / 1000);\n          //  console.log(\"Diff: \" + diff + \" - sleep: \" + sleepDuration);\n            \n            if( diff > (sleepDuration * 2)){\n                //La période de sleep est dépassée * 2. \n                // On mets au rouge.\n                return 0;\n               \n            }else if( diff > (sleepDuration * 1.2)){\n                //La période de sleep est dépassée * 1.2. \n                // On mets au jaune.\n                return 50;\n            }else{\n                //On a reçu du data à l'intérieure de la période de sleep. \n                // On mets au vert.\n                return 100;  \n            }\n        },\n    padTo2Digits :\n        function (num) {\n          return num.toString().padStart(2, '0');\n        },\n    formatDate : \n        function (date) {\n          return (\n            [\n             // date.getFullYear(),\n              Functions.padTo2Digits(date.getMonth() + 1),\n              Functions.padTo2Digits(date.getDate()),\n            ].join('/') +\n            ' ' +\n            [\n              Functions.padTo2Digits(date.getHours()),\n              Functions.padTo2Digits(date.getMinutes()),\n              Functions.padTo2Digits(date.getSeconds()),\n            ].join(':')\n          );\n        }\n    }\n\nflow.set('Functions', Functions);\nnode.status({fill:\"green\",shape:\"dot\",text:\"Functions Loaded\"});\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "c915ea2a8227a672",
        "type": "comment",
        "z": "57111ca025f638be",
        "g": "36653046b6da3c92",
        "name": "À la réception de données --> rafraîchir la colonne ACTIF de UI-table device",
        "info": "",
        "x": 490,
        "y": 2420,
        "wires": []
    },
    {
        "id": "33de13a0cbc96465",
        "type": "link in",
        "z": "57111ca025f638be",
        "g": "36653046b6da3c92",
        "name": "Update config status",
        "links": [
            "ae66752cc2cb3d48",
            "92d3ed46ab95f44f"
        ],
        "x": 75,
        "y": 2480,
        "wires": [
            [
                "bdb9a365e5db2244"
            ]
        ]
    },
    {
        "id": "bc77bc47e5d767ee",
        "type": "link out",
        "z": "57111ca025f638be",
        "g": "36653046b6da3c92",
        "name": "link out 1",
        "mode": "link",
        "links": [
            "e8cb5a4a786e5193",
            "ad72180aaf15bec6",
            "5cf7b42e40387b11",
            "357b5a7ea837a96c",
            "6d3dfd710f793bfa",
            "f736f7a43d075aec"
        ],
        "x": 765,
        "y": 2480,
        "wires": []
    },
    {
        "id": "b0c9163b98018ad6",
        "type": "function",
        "z": "57111ca025f638be",
        "g": "36653046b6da3c92",
        "name": "Update DATA status",
        "func": "node.status({fill:\"yellow\",shape:\"ring\",text:\"En traitement\"});\n\nlet devicesMap = global.get('devicesMap');\n\nlet device = devicesMap.get(msg.device.header.id_device);\n\nif(device){\n    device.lastReceivedData = new Date().getTime();\n    device.data =  100;\n\n    //On retourne toute la liste à  ui-table.\n    msg.payload = Array.from(devicesMap.values());\n\n    node.status({fill:\"green\",shape:\"ring\",text:\"OK\"});\n    \n    return msg;\n}\n\nreturn null;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 2460,
        "wires": [
            [
                "bc77bc47e5d767ee"
            ]
        ]
    },
    {
        "id": "4b60c0e64f93d254",
        "type": "switch",
        "z": "57111ca025f638be",
        "g": "590af8aa1ccb96c4",
        "name": "Type message",
        "property": "payload.header.type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "DATA_TEMPERATURE",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "IM_ALIVE",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ALERT",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": true,
        "outputs": 3,
        "x": 410,
        "y": 400,
        "wires": [
            [
                "c8184d1d79bb29dc"
            ],
            [
                "92d3ed46ab95f44f"
            ],
            [
                "92d3ed46ab95f44f"
            ]
        ],
        "outputLabels": [
            "Temp",
            "I'M_ALIVE",
            "Alert"
        ],
        "info": "Selon le type de message"
    },
    {
        "id": "6ffc190a90909afc",
        "type": "change",
        "z": "57111ca025f638be",
        "g": "f6ba6aa35208baae",
        "name": "Clear flow variables",
        "rules": [
            {
                "t": "delete",
                "p": "devicesMap",
                "pt": "global"
            },
            {
                "t": "delete",
                "p": "selectedAttribut",
                "pt": "flow"
            },
            {
                "t": "delete",
                "p": "selectedSensor",
                "pt": "flow"
            },
            {
                "t": "delete",
                "p": "selectedDevice",
                "pt": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "92d3ed46ab95f44f",
        "type": "link out",
        "z": "57111ca025f638be",
        "g": "590af8aa1ccb96c4",
        "name": "ImAlive-Alerte",
        "mode": "link",
        "links": [
            "33de13a0cbc96465"
        ],
        "x": 575,
        "y": 470,
        "wires": []
    },
    {
        "id": "bdb9a365e5db2244",
        "type": "switch",
        "z": "57111ca025f638be",
        "g": "36653046b6da3c92",
        "name": "",
        "property": "device.header.type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "DATA",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "IM_ALIVE",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ALERT",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": true,
        "outputs": 3,
        "x": 190,
        "y": 2480,
        "wires": [
            [
                "b0c9163b98018ad6"
            ],
            [
                "eb953df028913fcc"
            ],
            []
        ]
    },
    {
        "id": "eb953df028913fcc",
        "type": "function",
        "z": "57111ca025f638be",
        "g": "36653046b6da3c92",
        "name": "Rafraichir column <actif>",
        "func": "node.status({fill:\"yellow\",shape:\"ring\",text:\"En traitement\"});\n\nlet func = flow.get('Functions');\nlet devicesMap = global.get('devicesMap');\n\nlet device = devicesMap.get(msg.device.header.mac);\n\nif(device){\n    device.lastReceivedImAlive = new Date().getTime();\n    device.im_alive =  100;\n\n    msg.payload = Array.from(devicesMap.values());\n\n    node.status({fill:\"green\",shape:\"ring\",text:\"OK\"});\n\n    return msg;\n}\n\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 2520,
        "wires": [
            [
                "bc77bc47e5d767ee"
            ]
        ]
    },
    {
        "id": "c999883d7b694976",
        "type": "comment",
        "z": "57111ca025f638be",
        "g": "590af8aa1ccb96c4",
        "name": "I'mAlive -- Alerte",
        "info": "On veut rafraichir le statut des données",
        "x": 680,
        "y": 470,
        "wires": []
    },
    {
        "id": "2fa7d3a1d07ea7f0",
        "type": "debug",
        "z": "57111ca025f638be",
        "g": "590af8aa1ccb96c4",
        "name": "debug 31",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 380,
        "y": 340,
        "wires": []
    },
    {
        "id": "56d1fae213c30e8a",
        "type": "mqtt in",
        "z": "57111ca025f638be",
        "g": "adca6ef2dfcba80e",
        "name": "",
        "topic": "dom-sys.gw/request",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "c6a29fab98717cbb",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 2810,
        "wires": [
            [
                "ed0e40f994ac39b6"
            ]
        ]
    },
    {
        "id": "ed0e40f994ac39b6",
        "type": "function",
        "z": "57111ca025f638be",
        "g": "adca6ef2dfcba80e",
        "name": "Send all config",
        "func": "node.status({fill:\"yellow\",shape:\"ring\",text:\"Sending config\"});\n\nlet devicesMap = global.get('devicesMap');\n\nlet device = {};\n\nif(msg.payload == \"GET_DEVICES_CONFIG\"){\n\n    devicesMap.forEach (function(pDevice, mac) {\n        if(pDevice.id_device > 1){\n\n            device = {\n            \"header\":{\"mac\":pDevice.mac,\"type\":\"CONFIG\"},\n            \"device\": pDevice\n            }\n            msg.payload = device;\n            node.send(msg);\n        }\n    });\n}\n\nnode.status({fill:\"green\",shape:\"ring\",text:\"Configs sent\"});\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 2810,
        "wires": [
            [
                "540255522bc77ebb"
            ]
        ]
    },
    {
        "id": "e81fca2d98b5ccc7",
        "type": "inject",
        "z": "57111ca025f638be",
        "g": "adca6ef2dfcba80e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "GET_DEVICES_CONFIG",
        "payloadType": "str",
        "x": 210,
        "y": 2870,
        "wires": [
            [
                "ed0e40f994ac39b6"
            ]
        ]
    },
    {
        "id": "540255522bc77ebb",
        "type": "json",
        "z": "57111ca025f638be",
        "g": "adca6ef2dfcba80e",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 580,
        "y": 2810,
        "wires": [
            [
                "c1a2983aa0ad8848",
                "9ee742908744f209"
            ]
        ]
    },
    {
        "id": "c1a2983aa0ad8848",
        "type": "mqtt out",
        "z": "57111ca025f638be",
        "g": "adca6ef2dfcba80e",
        "name": "",
        "topic": "dom-sys.server/update_config",
        "qos": "1",
        "retain": "true",
        "respTopic": "",
        "contentType": "application/json",
        "userProps": "",
        "correl": "",
        "expiry": "60",
        "broker": "c6a29fab98717cbb",
        "x": 800,
        "y": 2810,
        "wires": []
    },
    {
        "id": "0ac1df192d659735",
        "type": "comment",
        "z": "57111ca025f638be",
        "g": "adca6ef2dfcba80e",
        "name": "Réception des requêtes de la passerelle",
        "info": "",
        "x": 220,
        "y": 2750,
        "wires": []
    },
    {
        "id": "b1961cc8c9a46d65",
        "type": "comment",
        "z": "57111ca025f638be",
        "g": "36653046b6da3c92",
        "name": "En absence de données --> rafraîchir la colonne ACTIF de UI-table device",
        "info": "",
        "x": 380,
        "y": 2580,
        "wires": []
    },
    {
        "id": "0abc6f79ff08bbc4",
        "type": "inject",
        "z": "57111ca025f638be",
        "d": true,
        "g": "36653046b6da3c92",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "30",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 2620,
        "wires": [
            [
                "5180a561ec14a9ed"
            ]
        ]
    },
    {
        "id": "5180a561ec14a9ed",
        "type": "function",
        "z": "57111ca025f638be",
        "g": "36653046b6da3c92",
        "name": "Rafraichir column <actif>",
        "func": "let func = flow.get('Functions');\n\nlet devicesMap = global.get('devicesMap');\n\nif (devicesMap === undefined) {\n   return null;\n}\n\nlet device;let key;\n\ndevicesMap.forEach((device, key) => {\n   device.data = func.getActivityLevel(device.lastReceivedData, device.sleep_duration);\n   device.im_alive = func.getActivityLevel(device.lastReceivedImAlive, device.sleep_duration);\n});\n\nglobal.set('devicesMap', devicesMap );\n\nmsg.payload = Array.from(devicesMap.values());\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 2620,
        "wires": [
            [
                "a664ec23f24b83a5"
            ]
        ]
    },
    {
        "id": "a664ec23f24b83a5",
        "type": "link out",
        "z": "57111ca025f638be",
        "g": "36653046b6da3c92",
        "name": "Rafraichir colonne actif",
        "mode": "link",
        "links": [
            "e8cb5a4a786e5193"
        ],
        "x": 595,
        "y": 2620,
        "wires": []
    },
    {
        "id": "c577d0a5c186b549",
        "type": "debug",
        "z": "57111ca025f638be",
        "g": "abbcf13b0652a794",
        "name": "debug 37",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 750,
        "wires": []
    },
    {
        "id": "48ced1b64e697455",
        "type": "comment",
        "z": "57111ca025f638be",
        "g": "abbcf13b0652a794",
        "name": "Rafraichit la liste de device à l'écran",
        "info": "",
        "x": 200,
        "y": 910,
        "wires": []
    },
    {
        "id": "fde5194a774e0236",
        "type": "sqlite",
        "z": "57111ca025f638be",
        "g": "f6ba6aa35208baae",
        "mydb": "628739f370d1726d",
        "sqlquery": "fixed",
        "sql": "pragma journal_mode = WAL;\npragma synchronous = normal;\npragma temp_store = memory;\npragma mmap_size = 30000000000;\nPRAGMA foreign_keys=ON;",
        "name": "Init DB",
        "x": 350,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "97610149c73699c4",
        "type": "sqlite",
        "z": "57111ca025f638be",
        "g": "590af8aa1ccb96c4",
        "mydb": "628739f370d1726d",
        "sqlquery": "prepared",
        "sql": "INSERT INTO SENSOR_TEMPERATURE\n  ( id_sensor, \n    temperature, \n    humidity,\n    counter,\n    datetime\n  )\nVALUES( \n  $id_sensor, \n  $temperature,\n  $humidity,\n  $counter,\n  datetime('now', 'localtime') \n);\n",
        "name": "Insert",
        "x": 750,
        "y": 380,
        "wires": [
            [
                "8244db89f6963d09"
            ]
        ]
    },
    {
        "id": "5185ef5d8d8f239a",
        "type": "sqlite",
        "z": "57111ca025f638be",
        "g": "abbcf13b0652a794",
        "mydb": "628739f370d1726d",
        "sqlquery": "fixed",
        "sql": "select * from SENSOR_VIEW;",
        "name": "Load Devices",
        "x": 420,
        "y": 790,
        "wires": [
            [
                "48340506c8ec6a1e",
                "79e281a2bc6e4e81"
            ]
        ]
    },
    {
        "id": "48340506c8ec6a1e",
        "type": "debug",
        "z": "57111ca025f638be",
        "g": "abbcf13b0652a794",
        "name": "debug 50",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 750,
        "wires": []
    },
    {
        "id": "a64ce37c329514c8",
        "type": "function",
        "z": "57111ca025f638be",
        "g": "abbcf13b0652a794",
        "name": "Save in memory",
        "func": "let devicesMap = msg.payload;\n\nglobal.set('devicesMap', devicesMap);\nnode.send(msg,false);\n\nreturn msg.topic;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 790,
        "wires": [
            [
                "1559f9fd4805b155"
            ]
        ]
    },
    {
        "id": "79e281a2bc6e4e81",
        "type": "subflow:bc1a8754bbd79fc2",
        "z": "57111ca025f638be",
        "g": "abbcf13b0652a794",
        "name": "",
        "x": 640,
        "y": 790,
        "wires": [
            [
                "a64ce37c329514c8",
                "c577d0a5c186b549"
            ]
        ]
    },
    {
        "id": "95bfa0ba0ca08529",
        "type": "function",
        "z": "57111ca025f638be",
        "g": "f6ba6aa35208baae",
        "name": "Sensor Roles",
        "func": "\n\nlet roles = [];\nmsg.payload.forEach(function (value) {\n     roles.push(value.role);\n});\n\nglobal.set('SENSOR_ROLES', roles);\n//return msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "ab9f8ffd38f55fc7",
        "type": "debug",
        "z": "57111ca025f638be",
        "g": "590af8aa1ccb96c4",
        "name": "debug 79",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 430,
        "wires": []
    },
    {
        "id": "e4aecc6f336ce4bc",
        "type": "link out",
        "z": "57111ca025f638be",
        "g": "590af8aa1ccb96c4",
        "name": "New data",
        "mode": "link",
        "links": [
            "a86662ea5ee6dfbb",
            "478485b75e139a59",
            "6c48e35750a5c6be"
        ],
        "x": 1015,
        "y": 380,
        "wires": []
    },
    {
        "id": "8244db89f6963d09",
        "type": "sqlite",
        "z": "57111ca025f638be",
        "g": "590af8aa1ccb96c4",
        "mydb": "628739f370d1726d",
        "sqlquery": "fixed",
        "sql": "SELECT *\nFROM DATA_VIEW\nwhere id_sensor_data = (SELECT last_insert_rowid());",
        "name": "Get last ID",
        "x": 890,
        "y": 380,
        "wires": [
            [
                "e4aecc6f336ce4bc",
                "ab9f8ffd38f55fc7"
            ]
        ]
    },
    {
        "id": "438ddc13e515c438",
        "type": "inject",
        "z": "57111ca025f638be",
        "g": "f53bba5e293da6fb",
        "name": "Météo ",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 580,
        "wires": [
            [
                "bed8c9ea7fe6b13c"
            ]
        ]
    },
    {
        "id": "bed8c9ea7fe6b13c",
        "type": "openweathermap",
        "z": "57111ca025f638be",
        "g": "f53bba5e293da6fb",
        "name": "Météo locale",
        "wtype": "current",
        "lon": "",
        "lat": "",
        "city": "Montreal",
        "country": "CA",
        "language": "fr",
        "x": 320,
        "y": 580,
        "wires": [
            [
                "0bd7f81e66d83a2a"
            ]
        ]
    },
    {
        "id": "0bd7f81e66d83a2a",
        "type": "function",
        "z": "57111ca025f638be",
        "g": "f53bba5e293da6fb",
        "name": "Params",
        "func": "\nmsg.params = { \n    $temperature:msg.payload.tempc,\n    $humidity:msg.payload.humidity\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 580,
        "wires": [
            [
                "562a0ef8b0073349"
            ]
        ]
    },
    {
        "id": "562a0ef8b0073349",
        "type": "sqlite",
        "z": "57111ca025f638be",
        "g": "f53bba5e293da6fb",
        "mydb": "628739f370d1726d",
        "sqlquery": "prepared",
        "sql": "INSERT INTO TEMPERATURE_EXTERNE (\n  temperature,\n  humidity,\n  datetime\n)\nVALUES (\n  $temperature,\n  $humidity,\n  datetime('now', 'localtime')\n);\n",
        "name": "Insert data",
        "x": 640,
        "y": 580,
        "wires": [
            [
                "b5fb53396f247251"
            ]
        ]
    },
    {
        "id": "b5fb53396f247251",
        "type": "debug",
        "z": "57111ca025f638be",
        "g": "f53bba5e293da6fb",
        "name": "debug 108",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 580,
        "wires": []
    },
    {
        "id": "5e2d481f338e5d45",
        "type": "link in",
        "z": "57111ca025f638be",
        "g": "abbcf13b0652a794",
        "name": "refresh Devices in",
        "links": [
            "836dfbcc857f6e1b",
            "a147248bb7549068"
        ],
        "x": 265,
        "y": 830,
        "wires": [
            [
                "5185ef5d8d8f239a",
                "892a6d47089017b7"
            ]
        ]
    },
    {
        "id": "75fb2eb7f4ea83be",
        "type": "sqlite",
        "z": "57111ca025f638be",
        "g": "f6ba6aa35208baae",
        "mydb": "628739f370d1726d",
        "sqlquery": "fixed",
        "sql": "SELECT role\n  FROM SENSOR_ROLE;",
        "name": "Get sensor roles",
        "x": 360,
        "y": 200,
        "wires": [
            [
                "95bfa0ba0ca08529"
            ]
        ]
    },
    {
        "id": "bd3f3c3479cd419d",
        "type": "function",
        "z": "57111ca025f638be",
        "g": "dfaa0e84286af4c3",
        "name": "Load devices",
        "func": "const devicesMap = global.get('devicesMap')|| [];\n\nvar devices = [];\n\ndevicesMap.forEach(function (device) {\n  devices.push(device);\n \n});\n\nmsg.action = \"loadDevices\";\nmsg.devices = devices;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 1190,
        "wires": [
            [
                "9a8147d9bc2db19e"
            ]
        ]
    },
    {
        "id": "f18c5b191d337944",
        "type": "link in",
        "z": "57111ca025f638be",
        "g": "dfaa0e84286af4c3",
        "name": "IN-Refresh ui-table of devices",
        "links": [
            "1559f9fd4805b155"
        ],
        "x": 105,
        "y": 1190,
        "wires": [
            [
                "bd3f3c3479cd419d"
            ]
        ]
    },
    {
        "id": "4389fdd1091783d4",
        "type": "ui-template",
        "z": "57111ca025f638be",
        "g": "dfaa0e84286af4c3",
        "group": "e4203d846baf0d72",
        "page": "",
        "ui": "",
        "name": "Éditeur device",
        "order": 1,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n  <v-layout class=\"rounded rounded-md\">\n    <v-app-bar color=\"surface-variant\" title=\"Configuration Device\">\n      <v-btn append-icon=\"mdi-send-circle\" position=\"static\" text=\"Send to device\" variant=\"outlined\" color=\"primary\"\n        @click=\"sendToDevice()\"></v-btn>\n      <v-btn append-icon=\"mdi-refresh\" position=\"static\" text=\"Refresh\" variant=\"outlined\" color=\"primary\"\n        @click=\"refreshBD()\"></v-btn>\n    </v-app-bar>\n\n    <v-navigation-drawer location=\"left\" border=\"1\" width=\"350\">\n      <v-card class=\"mx-auto pa-1\" min-height=\"500\">\n        <v-list bg-color=\"grey-lighten-2\" max-width=\"350\">\n          <v-list-subheader>Devices</v-list-subheader>\n          <v-list-item v-for=\"(item, i) in devices\" :key=\"item.id_device\" color=\"primary\" rounded=\"xl\"\n            @click=\"device = item\">\n            {{ item.mac }} - {{ item.location }}\n          </v-list-item>\n        </v-list>\n      </v-card>\n\n    </v-navigation-drawer>\n\n    <v-main >\n      <!-- ========================================================================= -->\n      <!-- Device -->\n      <v-card min-height=\"500\">\n        <v-container class=\"bg-blue-grey-darken-1 pa-5 ma-1\">\n          <v-card class=\"text-Left pa-1 text-caption\" color=\"blue-grey-lighten-2\" title=\"Device\">\n            <v-card-text>\n              {{ device.id_device }} - {{ device.mac }}</v-card-text>\n          </v-card>\n          <v-row>\n            <v-col cols=\"3\">\n              <v-text-field v-model=\"device.location\" label=\"Location\" required density=\"compact\"></v-text-field>\n            </v-col>\n            <v-col cols=\"2\">\n              <v-text-field v-model=\"device.sleep_duration\" label=\"Sleep\" type=\"number\" hide-details required\n                density=\"compact\" />\n            </v-col>\n            <v-col cols=\"2\">\n              <v-text-field v-model=\"device.im_alive_period\" label=\"ImAlive\" type=\"number\" hide-details required\n                density=\"compact\">\n              </v-text-field>\n            </v-col>\n            <v-col cols=\"1\">\n              <v-icon small @click=\"saveDevice()\" icon=\"mdi:mdi-content-save\" :disabled=\"deviceChange\" />\n            </v-col>\n          </v-row>\n        </v-container>\n        <!-- ========================================================================= -->\n        <!-- Sensors -->\n        <v-card class=\"pa-2 ma-1 text-h12\" color=\"blue-grey-lighten-2\" max-width=\"600\">\n          <v-row>\n            <v-col cols=\"2\"> Sensors</v-col>\n            <v-col cols=\"3\">\n              <v-icon small @click=\"addSensor()\"> mdi-plus-circle </v-icon>\n            </v-col>\n          </v-row>\n        </v-card>\n        <v-container class=\"bg-blue-grey-darken-1 mb-1 ma-1\" v-for=\"(sensor, index) in device.sensors\"\n          :key=\"sensor.id_sensor\">\n          <v-row>\n            <v-col cols=\"1\" offset=\"1\" align-self=\"start\">\n              <v-text-field :model-value=\"sensor.id_sensor\" hide-details disabled density=\"compact\"\n                bg-color=\"bg-blue-grey-darken-2\"></v-text-field>\n            </v-col>\n            <v-col cols=\"3\">\n              <v-select v-model=\"sensor.sensor_role\" :items=\"rolesList\" label=\"Rôle\" return-object single-line density=\"compact\">\n              </v-select>\n            </v-col>\n            <v-col cols=\"2\">\n              <v-icon small @click=\"deleteSensor(sensor, index)\" icon=\"mdi:mdi-delete\"></v-icon>\n              <v-icon small @click=\"saveSensor(device, sensor)\" icon=\"mdi:mdi-content-save\"></v-icon>\n            </v-col>\n          </v-row>\n\n          <!-- ================================== Attributs ======================================= -->\n          <!-- En tête -->\n          <v-card class=\"pa-2 ma-1 text-h12\" color=\"blue-grey-lighten-2\">\n            <v-row>\n              <v-col cols=\"2\"> Attributs</v-col>\n              <v-col cols=\"3\">\n                <v-icon small @click=\"addAttribut(sensor)\" icon=\"mdi:mdi-plus-circle\" />\n              </v-col>\n            </v-row>\n          </v-card>\n          <!-- Attributs -- Liste des attributs -->\n          <v-container class=\"bg-blue-grey-darken-1 mb-0\" v-for=\"(attribut, attIndex) in sensor.attributs\">\n            <v-row>\n              <v-col cols=\"1\" offset=\"1\" align-self=\"start\">\n                <v-text-field :model-value=\"attribut.id_attribut\" hide-details disabled density=\"compact\"\n                  bg-color=\"bg-blue-grey-darken-2\"></v-text-field>\n              </v-col>\n              <v-col cols=\"3\">\n                <v-text-field v-model=\"attribut.name\" label=\"Nom\" hide-details required density=\"compact\">\n                </v-text-field>\n              </v-col>\n              <v-col cols=\"3\">\n                <v-text-field v-model=\"attribut.value\" label=\"Valeur\" hide-details required density=\"compact\">\n                </v-text-field>\n              </v-col>\n              <!-- Attributs -- Liste des actions -->\n              <v-col cols=\"2\">\n                <v-icon small @click=\"deleteAttribut(sensor, attribut, attIndex)\" icon=\"mdi:mdi-delete\"> </v-icon>\n                <v-icon small @click=\"saveAttribut(sensor, attribut)\" icon=\"mdi:mdi-content-save\"></v-icon>\n              </v-col>\n            </v-row>\n          </v-container>\n        </v-container>\n      </v-card>\n    </v-main>\n  </v-layout>\n</template>\n\n<script>\n  export default {\n    data: () => ({\n    devices: [],\n    device: {},\n    deviceId: -1,\n    deviceChange: false,\n    attributToUpdate: {},    \n    sensorToUpdate: {},\n    rolesList: [\"ND\"],\n    \n    }),\n    mounted() {\n      this.devices = this.msg?.devices;\n     console.log(\"mounted\");\n    },\n    updated(){\n      this.send({message:\"updated\"});\n    },\n    onInput(){\n      this.send({message:\"onInput\"});\n    },\n    watch: {\n      msg: function(){\n        switch(this.msg.action){\n          case \"loadRoles\":\n            this.rolesList = this.msg.rolesList;\n            break;\n          case \"loadDevices\":\n            this.devices = this.msg.devices;\n            break;\n          case  \"attributLastId\":\n             this.attributToUpdate.id_attribut = this.msg.insertId;\n            break;\n           case  \"sensorLastId\":\n             this.sensorToUpdate.id_sensor = this.msg.insertId;\n            break;\n         default:\n           \n        }\n        \n      }\n    },\n    methods: {\n      refreshBD() {\n            this.send({type: \"refreshBD\"});\n      },\n      sendToDevice() {\n        this.send({type: \"configuration\",action: \"send\",device: this.device});\n        \n      },\n      saveDevice() {\n        this.send({type: \"device\",action: \"update\",device: this.device});\n      },\n      saveSensor(device, sensor) {\n        if(sensor.id_sensor === -1){\n          this.sensorToUpdate = sensor;\n          this.send({type: \"sensor\",action:\"insert\",device: device, sensor: sensor});\n        }else{\n          this.send({type: \"sensor\",action:\"update\",device: device, sensor: sensor});\n        }\n      },\n      saveAttribut(sensor, attribut) {\n        this.attributToUpdate = attribut;\n\n        if (attribut.id_attribut == -1) {\n          console.log(\"Ajout attribut à la BD\")\n          this.send({type: \"attribut\",action:\"insert\",id_sensor: sensor.id_sensor, attribut: attribut});\n        }else{\n          this.send({type:\"attribut\", action:\"update\", attribut: attribut});\n        }\n      },\n      updateSensor(index) {\n        //Ne fait rien\n      },\n      addSensor() {\n        this.device.sensors.push({\n          id_sensor: -1,\n          attributs: [],\n        })\n      },\n      \n      addAttribut(sensor) {\n        sensor.attributs.push({\n          id_attribut: -1,\n          name: 'XXX',\n          value: 0\n        });\n        console.log('test')\n      },\n      deleteSensor(sensor, index) {\n        let x = this.device.sensors.splice(index, 1)\n        this.send({type: \"sensor\",action:\"delete\",sensor:sensor});\n      },\n      deleteAttribut(sensor, attribut, attIndex) {\n        let x = sensor.attributs.splice(attIndex, 1);\n        this.send({type: \"attribut\", action: \"delete\", attribut: attribut});\n      },\n    },\n  }\n</script>",
        "storeOutMessages": true,
        "passthru": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 250,
        "y": 1100,
        "wires": [
            [
                "8243b44d05178527"
            ]
        ]
    },
    {
        "id": "cdb1a4737e8ff593",
        "type": "function",
        "z": "57111ca025f638be",
        "g": "dfaa0e84286af4c3",
        "name": "Device params",
        "func": "console.log(\"--------------Update BD -------------------\");\n\nmsg.params = {\n    $id_device: msg.device.id_device,\n    $location: msg.device.location,\n    $sleep_duration: msg.device.sleep_duration,\n    $im_alive_period: msg.device.im_alive_period\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 1070,
        "wires": [
            [
                "05ca023428f3e56d"
            ]
        ]
    },
    {
        "id": "91a754628498f090",
        "type": "inject",
        "z": "57111ca025f638be",
        "g": "dfaa0e84286af4c3",
        "name": "Setup",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1.5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 1230,
        "wires": [
            [
                "1aa6fbca987bd56b",
                "bd3f3c3479cd419d"
            ]
        ]
    },
    {
        "id": "8243b44d05178527",
        "type": "switch",
        "z": "57111ca025f638be",
        "g": "dfaa0e84286af4c3",
        "name": "Type data",
        "property": "type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "device",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "sensor",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "attribut",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "refreshBD",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "configuration",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": true,
        "outputs": 6,
        "x": 420,
        "y": 1100,
        "wires": [
            [
                "cdb1a4737e8ff593"
            ],
            [
                "349ae483ce6b71b1"
            ],
            [
                "b52f371d567bc95a"
            ],
            [
                "836dfbcc857f6e1b"
            ],
            [
                "0beb5ac9e1a01e39"
            ],
            []
        ]
    },
    {
        "id": "05ca023428f3e56d",
        "type": "sqlite",
        "z": "57111ca025f638be",
        "g": "dfaa0e84286af4c3",
        "mydb": "628739f370d1726d",
        "sqlquery": "prepared",
        "sql": "UPDATE DEVICE \nSET location  = $location,\n  sleep_duration = $sleep_duration,\n  im_alive_period = $im_alive_period,\n  datetime = strftime('%s','now')\nWHERE id_device = $id_device;",
        "name": "Update DEVICE",
        "x": 860,
        "y": 1070,
        "wires": [
            []
        ]
    },
    {
        "id": "b52f371d567bc95a",
        "type": "function",
        "z": "57111ca025f638be",
        "g": "dfaa0e84286af4c3",
        "name": "Attribut params",
        "func": "let msg2 = {};\n\nswitch (msg.action) {\n    case \"delete\":\n        msg.params = {\n            $id_attribut: msg.attribut.id_attribut\n        }\n        return [null, null, msg];\n        break;\n    case \"insert\":\n        node.warn(\"Insert\");\n        msg2.params = {\n            $id_sensor: msg.id_sensor,\n            $name: msg.attribut.name,\n            $value: msg.attribut.value\n        }\n        return [null, msg2, null];\n    case \"update\":\n        msg.params = {\n            $id_attribut: msg.attribut.id_attribut,\n            $name: msg.attribut.name,\n            $value: msg.attribut.value\n        }\n        return [msg, null, null];\n    default:\n        node.warn(\"Erreur - Action invalide\");\n}\n\n\n",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 1260,
        "wires": [
            [
                "e3e138d6a224ed69"
            ],
            [
                "8016eb6039e164b2"
            ],
            [
                "12e9604421c4d5b1"
            ]
        ],
        "outputLabels": [
            "Update",
            "Insert",
            "Delete"
        ]
    },
    {
        "id": "12e9604421c4d5b1",
        "type": "sqlite",
        "z": "57111ca025f638be",
        "g": "dfaa0e84286af4c3",
        "mydb": "628739f370d1726d",
        "sqlquery": "prepared",
        "sql": "DELETE FROM SENSOR_ATTRIBUT\nWHERE id_attribut = $id_attribut;",
        "name": "Delete",
        "x": 940,
        "y": 1330,
        "wires": [
            []
        ]
    },
    {
        "id": "8016eb6039e164b2",
        "type": "sqlite",
        "z": "57111ca025f638be",
        "g": "dfaa0e84286af4c3",
        "mydb": "628739f370d1726d",
        "sqlquery": "prepared",
        "sql": "INSERT INTO SENSOR_ATTRIBUT (\n    id_sensor,\n    name,\n    value)\nVALUES (\n    $id_sensor,\n    $name,\n    $value);\n",
        "name": "Insert ",
        "x": 910,
        "y": 1290,
        "wires": [
            [
                "1660a5a757851231"
            ]
        ]
    },
    {
        "id": "e3e138d6a224ed69",
        "type": "sqlite",
        "z": "57111ca025f638be",
        "g": "dfaa0e84286af4c3",
        "mydb": "628739f370d1726d",
        "sqlquery": "prepared",
        "sql": "UPDATE SENSOR_ATTRIBUT\nSET name = $name,\n    value = $value\nWHERE id_attribut = $id_attribut;",
        "name": "Update ",
        "x": 870,
        "y": 1250,
        "wires": [
            []
        ]
    },
    {
        "id": "349ae483ce6b71b1",
        "type": "function",
        "z": "57111ca025f638be",
        "g": "dfaa0e84286af4c3",
        "name": "Sensor params",
        "func": "switch (msg.action) {\n    case \"delete\":\n        msg.params = {\n            $id_sensor: msg.sensor.id_sensor\n        }\n        return [null, null, msg];\n        break;\n    case \"insert\":\n        msg.params = {\n            $id_device: msg.device.id_device,\n            $sensor_role: msg.sensor.sensor_role\n        }\n        return [null, msg, null];\n    case \"update\":\n        msg.params = {\n            $id_sensor: msg.sensor.id_sensor,\n            $sensor_role: msg.sensor.sensor_role\n        }\n        return [msg, null, null];\n    default:\n\n}\n",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 1120,
        "wires": [
            [
                "5b31bf3dedcd5291"
            ],
            [
                "563615fee670206d"
            ],
            [
                "52ab5441b29220e9"
            ]
        ],
        "outputLabels": [
            "Update",
            "Insert",
            "Delete"
        ]
    },
    {
        "id": "5b31bf3dedcd5291",
        "type": "sqlite",
        "z": "57111ca025f638be",
        "g": "dfaa0e84286af4c3",
        "mydb": "628739f370d1726d",
        "sqlquery": "prepared",
        "sql": "UPDATE SENSOR\nSET id_role = \n    (SELECT id_role \n     FROM SENSOR_ROLE\n     where role like $sensor_role)\n WHERE id_sensor = $id_sensor;\n",
        "name": "Update ",
        "x": 850,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "563615fee670206d",
        "type": "sqlite",
        "z": "57111ca025f638be",
        "g": "dfaa0e84286af4c3",
        "mydb": "628739f370d1726d",
        "sqlquery": "prepared",
        "sql": "INSERT INTO SENSOR (\n    id_device,\n    id_role)\nVALUES( \n    $id_device,\n    (   SELECT id_role \n        FROM SENSOR_ROLE\n        where role like $sensor_role)\n);\n",
        "name": "Insert ",
        "x": 880,
        "y": 1160,
        "wires": [
            [
                "3ffa0607e4012b62"
            ]
        ]
    },
    {
        "id": "52ab5441b29220e9",
        "type": "sqlite",
        "z": "57111ca025f638be",
        "g": "dfaa0e84286af4c3",
        "mydb": "628739f370d1726d",
        "sqlquery": "prepared",
        "sql": "DELETE FROM SENSOR\nWHERE id_sensor = $id_sensor;",
        "name": "Delete",
        "x": 920,
        "y": 1200,
        "wires": [
            []
        ]
    },
    {
        "id": "892a6d47089017b7",
        "type": "debug",
        "z": "57111ca025f638be",
        "g": "abbcf13b0652a794",
        "name": "debug 155",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 430,
        "y": 850,
        "wires": []
    },
    {
        "id": "1660a5a757851231",
        "type": "sqlite",
        "z": "57111ca025f638be",
        "g": "dfaa0e84286af4c3",
        "mydb": "628739f370d1726d",
        "sqlquery": "fixed",
        "sql": "SELECT last_insert_rowid();",
        "name": "Get last ID",
        "x": 1050,
        "y": 1290,
        "wires": [
            [
                "842a98af577b1697"
            ]
        ]
    },
    {
        "id": "842a98af577b1697",
        "type": "change",
        "z": "57111ca025f638be",
        "g": "dfaa0e84286af4c3",
        "name": "Change",
        "rules": [
            {
                "t": "set",
                "p": "action",
                "pt": "msg",
                "to": "attributLastId",
                "tot": "str"
            },
            {
                "t": "move",
                "p": "payload[0].last_insert_rowid()",
                "pt": "msg",
                "to": "insertId",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1110,
        "y": 1240,
        "wires": [
            [
                "6eec73c7bfa2af4a"
            ]
        ]
    },
    {
        "id": "3ffa0607e4012b62",
        "type": "sqlite",
        "z": "57111ca025f638be",
        "g": "dfaa0e84286af4c3",
        "mydb": "628739f370d1726d",
        "sqlquery": "fixed",
        "sql": "SELECT last_insert_rowid();",
        "name": "Get last ID",
        "x": 1020,
        "y": 1160,
        "wires": [
            [
                "bcfdd06c8e9bf4bf"
            ]
        ]
    },
    {
        "id": "bcfdd06c8e9bf4bf",
        "type": "change",
        "z": "57111ca025f638be",
        "g": "dfaa0e84286af4c3",
        "name": "Change",
        "rules": [
            {
                "t": "set",
                "p": "action",
                "pt": "msg",
                "to": "sensorLastId",
                "tot": "str"
            },
            {
                "t": "move",
                "p": "payload[0].last_insert_rowid()",
                "pt": "msg",
                "to": "insertId",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1110,
        "y": 1210,
        "wires": [
            [
                "6eec73c7bfa2af4a"
            ]
        ]
    },
    {
        "id": "43c18597783c3def",
        "type": "link in",
        "z": "57111ca025f638be",
        "g": "dfaa0e84286af4c3",
        "name": "IN-EditeurDevice",
        "links": [
            "c019c31104c9e3fb"
        ],
        "x": 115,
        "y": 1100,
        "wires": [
            [
                "4389fdd1091783d4"
            ]
        ]
    },
    {
        "id": "c019c31104c9e3fb",
        "type": "link out",
        "z": "57111ca025f638be",
        "g": "dfaa0e84286af4c3",
        "name": "SendLastId",
        "mode": "link",
        "links": [
            "43c18597783c3def"
        ],
        "x": 1225,
        "y": 1230,
        "wires": []
    },
    {
        "id": "836dfbcc857f6e1b",
        "type": "link out",
        "z": "57111ca025f638be",
        "g": "dfaa0e84286af4c3",
        "name": "Request - Refresh Device",
        "mode": "link",
        "links": [
            "5e2d481f338e5d45"
        ],
        "x": 525,
        "y": 1250,
        "wires": []
    },
    {
        "id": "e3b58894b8cc6969",
        "type": "json",
        "z": "57111ca025f638be",
        "g": "c123dda748f0409f",
        "name": "JSON Config",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 650,
        "y": 1430,
        "wires": [
            [
                "c3a5d758adbd3593",
                "19e3a771f9e0137c"
            ]
        ]
    },
    {
        "id": "c3a5d758adbd3593",
        "type": "mqtt out",
        "z": "57111ca025f638be",
        "g": "c123dda748f0409f",
        "name": "",
        "topic": "dom-sys.server/update_config",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "c6a29fab98717cbb",
        "x": 880,
        "y": 1430,
        "wires": []
    },
    {
        "id": "93c3099696fe4e85",
        "type": "debug",
        "z": "57111ca025f638be",
        "g": "c123dda748f0409f",
        "name": "debug 159",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 450,
        "y": 1470,
        "wires": []
    },
    {
        "id": "c165aa64f3896b8e",
        "type": "function",
        "z": "57111ca025f638be",
        "g": "c123dda748f0409f",
        "name": "Set Gateway message",
        "func": "if (msg.payload == \"OK\") {\n\n   let device =\n   {\n      \"header\": {\n         \"mac\": msg.device.mac,\n         \"type\": \"CONFIG\"\n      },\n      \"device\": {\n         \"id_device\": msg.device.id_device,\n         \"sleep_duration\": msg.device.sleep_duration,\n         \"im_alive_period\": msg.device.im_alive_period,\n         \"sensors\": msg.device.sensors\n      }\n   }\n   msg.payload = device;\n\n   return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1430,
        "wires": [
            [
                "e3b58894b8cc6969"
            ]
        ]
    },
    {
        "id": "975b275b647b8632",
        "type": "ui-template",
        "z": "57111ca025f638be",
        "g": "c123dda748f0409f",
        "group": "",
        "page": "59f68216b64feef8",
        "ui": "",
        "name": "Dialogue transmission",
        "order": 0,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n  <div class=\"text-center pa-4\">\n    <v-dialog v-model=\"dialog\" width=\"auto\">\n      <template v-slot:activator=\"{ props: activatorProps }\">\n        <v-btn  text=\"Send configuration\" \n          v-show=\"false\"></v-btn>\n      </template>\n      <v-card max-width=\"400\" prepend-icon=\"mdi-update\" text=\"Transmettre les changements au device\"\n        title=\"Transmission de la configuration\">\n        ({{device.id_device}}) - {{device.mac}} - Location:{{device.location}}\n        <template v-slot:actions>\n          <v-btn class=\"ms-auto\" text=\"OK\" @click=\"onOk()\"></v-btn>\n          <v-btn class=\"ms-auto\" text=\"Annuler\" @click=\"dialog = false\"></v-btn>\n        </template>\n      </v-card>\n    </v-dialog>\n  </div>\n</template>\n\n<script>\n  export default {\n    data: () => ({\n      dialog: false,\n      device:{id:\"222\"},\n    }),\n    mounted() {\n      this.dialog = false;\n      this.device = {};\n      console.log(\"mounted\");\n    },\n    activated() {\n      this.dialog = false;\n      this.device = {};\n    },\n\n    watch: {\n      msg: function(){\n        if(this.msg.type != undefined && this.msg.type === \"configuration\"){\n          this.dialog = false;\n          if(this.msg.action != undefined && this.msg.action === \"send\"){\n            if(this.msg.device != undefined){\n              this.device = this.msg.device;\n              this.dialog = true;\n            }\n          }\n        }\n      }\n    },\n    methods:{\n      onOk(){\n        this.send({payload: \"OK\", device: this.device});\n        this.dialog = false;\n      },\n    },\n  }\n</script>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "widget:page",
        "className": "",
        "x": 230,
        "y": 1430,
        "wires": [
            [
                "c165aa64f3896b8e",
                "93c3099696fe4e85"
            ]
        ]
    },
    {
        "id": "19e3a771f9e0137c",
        "type": "debug",
        "z": "57111ca025f638be",
        "g": "c123dda748f0409f",
        "name": "debug 161",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 1480,
        "wires": []
    },
    {
        "id": "8f34a61029fac0cb",
        "type": "sqlite",
        "z": "57111ca025f638be",
        "g": "b3735df348adb38e",
        "mydb": "628739f370d1726d",
        "sqlquery": "fixed",
        "sql": "SELECT id_sensor, mac, counter,  max(datetime ) as datetime\nFROM DATA_VIEW\nwhere  datetime > datetime('now', 'localtime', '-48 hours')\ngroup by id_sensor\norder by id_sensor, datetime ;",
        "name": "Most recent data temperature",
        "x": 350,
        "y": 1910,
        "wires": [
            [
                "49a66220910d81ef",
                "568e97383e4285fa"
            ]
        ]
    },
    {
        "id": "577fd00e89cbfbe3",
        "type": "debug",
        "z": "57111ca025f638be",
        "g": "b3735df348adb38e",
        "name": "debug 144",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 1950,
        "wires": []
    },
    {
        "id": "88e67d8f05a4d9a5",
        "type": "inject",
        "z": "57111ca025f638be",
        "g": "b3735df348adb38e",
        "name": "Inject",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "900",
        "crontab": "",
        "once": true,
        "onceDelay": "4",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 1910,
        "wires": [
            [
                "8f34a61029fac0cb"
            ]
        ]
    },
    {
        "id": "49a66220910d81ef",
        "type": "function",
        "z": "57111ca025f638be",
        "g": "b3735df348adb38e",
        "name": "Vérification du délai",
        "func": "//Envoi une alerte à l'écran si les données ne sont pas reçues \n//  dans un délai acceptable.\nconst devicesMap = global.get('devicesMap');\n\nvar devices = [];\nlet data = msg.payload;\nmsg.payload = \"Vérification des délais.\\n\";\n\ndata.forEach(function (element) {\n  let device = devicesMap.get(element.mac);\n  if (device.sleep_duration > 0) {\n    let dateNow = new Date();\n    let datetime = new Date(element.datetime);\n    let diff = (dateNow.getTime() - datetime.getTime()) / 1000;\n    //Si on dépasse le temps de sleep + 5 minutes.\n    if (diff > (device.sleep_duration + (5 * 60))) {\n      msg.payload = msg.payload + \" -- Délai de réception dépassé. \" + device.mac + \"\\n\\r\";\n      console.log(\"Now:\" + dateNow + \n        \" - Last received:\" + datetime +\n        \"diff: \" + diff);\n      console.log(msg.alert);\n    }\n  }\n});\n\nif (msg.alert != \"\") {\n  if(msg.payload != \"\"){\n    node.log(\"Alert Device: \" + msg.payload);\n    return msg;\n  }\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 1910,
        "wires": [
            [
                "577fd00e89cbfbe3",
                "4970576a104ab876"
            ]
        ]
    },
    {
        "id": "4970576a104ab876",
        "type": "ui-notification",
        "z": "57111ca025f638be",
        "g": "b3735df348adb38e",
        "ui": "d4c9d9e9b37824ea",
        "position": "center center",
        "colorDefault": false,
        "color": "#ff0000",
        "displayTime": "0",
        "showCountdown": true,
        "outputs": 0,
        "allowDismiss": true,
        "dismissText": "Close",
        "raw": true,
        "className": "",
        "name": "Erreur de réception",
        "x": 850,
        "y": 1910,
        "wires": []
    },
    {
        "id": "91ced026339a3eeb",
        "type": "ui-chart",
        "z": "57111ca025f638be",
        "g": "4ac0d347446e702f",
        "group": "ec83ebd45553c336",
        "name": "Température",
        "label": "Température",
        "order": 1,
        "chartType": "line",
        "category": "topic",
        "categoryType": "msg",
        "xAxisProperty": "x",
        "xAxisPropertyType": "msg",
        "xAxisType": "time",
        "yAxisProperty": "y",
        "ymin": "",
        "ymax": "",
        "action": "replace",
        "pointShape": "circle",
        "pointRadius": 4,
        "showLegend": true,
        "removeOlder": "10",
        "removeOlderUnit": "86400",
        "removeOlderPoints": "1000",
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "width": 6,
        "height": "4",
        "className": "msg.class",
        "x": 1120,
        "y": 1620,
        "wires": [
            []
        ]
    },
    {
        "id": "44c0d2d81fe59de0",
        "type": "function",
        "z": "57111ca025f638be",
        "g": "4ac0d347446e702f",
        "name": "Params",
        "func": "if (msg.dateSelected != undefined) {\n    flow.set('dateSelected', msg.dateSelected);\n}\n\n//On garde en mémoire la liste de mac.\nlet idList = context.get(\"idList\") || [];\n\nif (msg.devices != undefined) {\n    idList = [];\n    msg.devices.forEach(function (device) {\n        if (device.id_sensor != undefined) {\n            idList.push(device.id_sensor);\n            context.set(\"idList\", idList)\n        }\n    });\n}\n\nmsg.idsDevices = idList.toString();\n\nlet nbHours;\nlet dateSelected;\n\nmsg.dateSelected = flow.get('dateSelected');\nif(msg.dateSelected === undefined){\n    nbHours = '+24 hours'\n    const date = new Date();\n    date.setHours(0, 0, 0);\n    dateSelected = date;\n\n}else{\n    nbHours = '+' + msg.dateSelected.slider + ' hours'\n    dateSelected = msg.dateSelected.date;\n}\n\nmsg.topic = \"SELECT id_device, mac, id_sensor, location, \"\n    + \" temperature, humidity, counter, datetime\"\n    + \" from DATA_VIEW\"\n    + \" where id_sensor in ( \" + idList.toString() + \"  )\"\n    + \" AND datetime > datetime('\"+ dateSelected + \"', 'localtime') \"\n    + \" AND datetime < datetime('\"+ dateSelected + \"', 'localtime', '\" + nbHours + \"') \"\n    + \" and role like 'TEMPERATURE'\"\n    + \" ORDER BY id_sensor, datetime asc;\"\n\n//    + \" and datetime > datetime('2024-04-15T04:00:00.000Z', 'localtime', '\" + nbHours + \"' )\"\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 1680,
        "wires": [
            [
                "1c2e8d33bf43083e"
            ]
        ]
    },
    {
        "id": "1c2e8d33bf43083e",
        "type": "sqlite",
        "z": "57111ca025f638be",
        "g": "4ac0d347446e702f",
        "mydb": "628739f370d1726d",
        "sqlquery": "msg.topic",
        "sql": "SELECT mac, id_sensor, \ntemperature, humidity, counter, datetime\nfrom DATA_VIEW\nwhere id_device in ( $ids_devices)\nand datetime > datetime('now', 'localtime', $nbHours )\nand role like 'TEMPERATURE'\nORDER BY id_sensor, datetime asc;\n\n\n",
        "name": "Load temp sensor",
        "x": 700,
        "y": 1630,
        "wires": [
            [
                "e0694b109915343b"
            ]
        ]
    },
    {
        "id": "f138d867ef859cef",
        "type": "ui-template",
        "z": "57111ca025f638be",
        "g": "4ac0d347446e702f",
        "group": "d6cf618cb11d3964",
        "page": "",
        "ui": "",
        "name": "Liste Devices",
        "order": 1,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n  <v-card title=\"Devices\" flat> </v-card>\n  <v-data-table v-model=\"selected\" :headers=\"headers\" \n    :items=\"devices\" item-value=\"id_device\" items-per-page=\"10\"\n    density=\"compact\"\n    select-strategy=\"page\" show-select return-object \n    >\n   \n    <template v-slot:bottom>\n      <div class=\"text-center pt-2\">\n        <v-pagination :length=\"pageCount\"></v-pagination>\n      </div>\n    </template>\n  </v-data-table>\n</template>\n\n<script>\n  export default {\n    data: () => ({\n      selected: [],\n      headers: [\n        { title: 'id_device', sortable: false, maxWidth:1, key: 'id_device' },\n        { title: 'id_sensor', key: 'id_sensor', maxWidth:1, sortable: false},\n        { title: 'mac', key: 'mac', maxWidth:1, sortable: false},\n        { title: 'Location', key: 'location', maxWidth:1, sortable: false},\n      ],\n      devices: [],\n    }),\n\n    watch: {\n       msg: function(){\n        this.devices = this.msg.payload\n        this.devices.push({id_device:-1, mac: \"SiteWeb\", location:\"\"});\n      },\n      selected: function () {\n        this.send({devices: this.selected})\n      // flow.set(\"DEVICE-TEST\", this.selected );\n        \n      },\n    },\n    mounted() {\n     // this.devices = this.msg?.payload\n    },\n    computed: {\n      pageCount() {\n        return Math.ceil(this.devices.length / this.itemsPerPage)\n      },\n    },\n  \n  }\n</script>",
        "storeOutMessages": true,
        "passthru": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 470,
        "y": 1680,
        "wires": [
            [
                "0a4b76749339d8cd",
                "44c0d2d81fe59de0"
            ]
        ]
    },
    {
        "id": "caa469a26973d9d2",
        "type": "ui-button",
        "z": "57111ca025f638be",
        "g": "4ac0d347446e702f",
        "group": "d6cf618cb11d3964",
        "name": "",
        "label": "Refresh",
        "order": 2,
        "width": 0,
        "height": 0,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "iconPosition": "left",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 110,
        "y": 1680,
        "wires": [
            [
                "836e4535583ce900"
            ]
        ]
    },
    {
        "id": "568e97383e4285fa",
        "type": "debug",
        "z": "57111ca025f638be",
        "g": "b3735df348adb38e",
        "name": "debug 163",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 1960,
        "wires": []
    },
    {
        "id": "933c6183c294acd4",
        "type": "inject",
        "z": "57111ca025f638be",
        "g": "f6ba6aa35208baae",
        "name": "Setup",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 120,
        "wires": [
            [
                "fde5194a774e0236",
                "09b6ad2a2bf86dc1",
                "6ffc190a90909afc",
                "75fb2eb7f4ea83be"
            ]
        ]
    },
    {
        "id": "8e085f8f049550ac",
        "type": "ui-template",
        "z": "57111ca025f638be",
        "g": "f6ba6aa35208baae",
        "group": "",
        "page": "59f68216b64feef8",
        "ui": "",
        "name": "CSS - Not use",
        "order": 0,
        "width": 0,
        "height": 0,
        "head": "",
        "format": ".my-class \n\nbutton.v-btn {\n    background-color: red;\n}",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "page:style",
        "className": "",
        "x": 670,
        "y": 70,
        "wires": [
            []
        ]
    },
    {
        "id": "1aa6fbca987bd56b",
        "type": "function",
        "z": "57111ca025f638be",
        "g": "dfaa0e84286af4c3",
        "name": "Load roles",
        "func": "let rolesList = global.get('SENSOR_ROLES');\n\n\nmsg.action = \"loadRoles\";\nmsg.rolesList = rolesList;\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 1230,
        "wires": [
            [
                "9a8147d9bc2db19e"
            ]
        ]
    },
    {
        "id": "1889b9b8d90b705d",
        "type": "link in",
        "z": "57111ca025f638be",
        "g": "c123dda748f0409f",
        "name": "Send configuration in",
        "links": [
            "0beb5ac9e1a01e39"
        ],
        "x": 85,
        "y": 1430,
        "wires": [
            [
                "975b275b647b8632"
            ]
        ]
    },
    {
        "id": "0beb5ac9e1a01e39",
        "type": "link out",
        "z": "57111ca025f638be",
        "g": "dfaa0e84286af4c3",
        "name": "Send configuration out",
        "mode": "link",
        "links": [
            "1889b9b8d90b705d"
        ],
        "x": 495,
        "y": 1290,
        "wires": []
    },
    {
        "id": "aa76751f0c815d88",
        "type": "inject",
        "z": "57111ca025f638be",
        "g": "4ac0d347446e702f",
        "name": "Setup",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 1740,
        "wires": [
            [
                "836e4535583ce900"
            ]
        ]
    },
    {
        "id": "9831a0922b955da6",
        "type": "ui-template",
        "z": "57111ca025f638be",
        "g": "4ac0d347446e702f",
        "group": "ec83ebd45553c336",
        "page": "",
        "ui": "",
        "name": "Slider",
        "order": 3,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n  <v-col cols=\"5\">\n    <v-menu v-model=\"menu2\" :close-on-content-click=\"false\" :nudge-right=\"40\" transition=\"scale-transition\" offset-y\n      min-width=\"auto\">\n      <template v-slot:activator=\"{ props }\">\n        <v-text-field v-model=\"dateTextField\" label=\"Date\" prepend-icon=\"mdi-calendar\" readonly v-bind=\"props\">\n        </v-text-field>\n      </template>\n      <v-date-picker v-model=\"datePicker\" elevation=\"24\" :hide-weekdays=\"false\" @update:model-value=\"menu2=false\">\n      </v-date-picker>\n    </v-menu>\n  </v-col>\n  <v-slider v-model=\"slider\" label=\"Durée\" :max=\"max\" :min=\"min\" step=\"1\" v-on:end=\"onEnd\" class=\"align-center\"\n    hide-details thumb-label=\"always\" tick-size=1 hint=\"Durée en heure\">\n  </v-slider>\n</template>\n\n<script>\n  export default {\n        data() {\n      return {\n        min: 10,\n        max: 360,\n        step: 2,\n        slider: 24,\n        datePicker: new Date(), //this.setDatePicker(),\n        dateTextField: new Date(Date.now()).toLocaleDateString('fr-ca', {\n          weekday: 'long',\n          year: 'numeric',\n          month: 'short',\n          day: 'numeric',\n        }),\n        menu2: false,\n      }\n    },\n    watch: {\n      msg: function(){\n        this.datePicker = new Date();\n        this.datePicker.setHours(0,0,0);\n        this.sendData(\"FromMsg\");\n      },\n      datePicker: function () {\n          this.dateTextField = this.datePicker.toLocaleDateString('fr-ca', {\n            weekday: 'long',\n            year: 'numeric',\n            month: 'short',\n            day: 'numeric',\n          });\n          this.sendData(\"dateChanged()\");\n      },\n    },\n    mounted() {\n      this.datePicker.setHours(0,0,0);\n      this.sendData(\"mounted()\");\n    },\n   methods: {\n      onEnd() {\n        this.sendData(\"onEnd()\");\n      },\n      sendData(action){\n        this.send({action: action,dateSelected: {slider: this.slider, date: this.datePicker}});\n      },\n      setDatePicker(){\n        this.datePicker = new Date();\n        this.datePicker.setHours(0,0,0);\n        this.sendData(\"setDatePicker()\");\n      },\n    },\n  }\n</script>",
        "storeOutMessages": true,
        "passthru": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 450,
        "y": 1730,
        "wires": [
            [
                "0a4b76749339d8cd",
                "44c0d2d81fe59de0"
            ]
        ]
    },
    {
        "id": "388cb232c9079e14",
        "type": "ui-chart",
        "z": "57111ca025f638be",
        "g": "4ac0d347446e702f",
        "group": "ec83ebd45553c336",
        "name": "Humidité",
        "label": "Humidité",
        "order": 2,
        "chartType": "line",
        "category": "topic",
        "categoryType": "msg",
        "xAxisProperty": "x",
        "xAxisPropertyType": "msg",
        "xAxisType": "time",
        "yAxisProperty": "y",
        "ymin": "",
        "ymax": "",
        "action": "replace",
        "pointShape": "circle",
        "pointRadius": 4,
        "showLegend": true,
        "removeOlder": "10",
        "removeOlderUnit": "86400",
        "removeOlderPoints": "1000",
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "width": 6,
        "height": "4",
        "className": "",
        "x": 1110,
        "y": 1750,
        "wires": [
            []
        ]
    },
    {
        "id": "28c5da6a4d2da8ba",
        "type": "function",
        "z": "57111ca025f638be",
        "g": "4ac0d347446e702f",
        "name": "Charts data",
        "func": "\nlet humidityArray = [];\nlet tempArray = [];\nlet msg1 = {};\nlet msg2 = {};\nlet serieExtArray = [];\n\nmsg.payload.forEach(function (value) {\n    const date = new Date(value.datetime);\n    //Ce cas se produit si le sensor n'a pas fonctionné correctement\n    if (value.humidity != undefined) {\n        tempArray.push({ \"x\": date, \"y\": value.temperature });\n    } else {\n        tempArray.push({ \"x\": date, \"y\": null });\n    }\n    humidityArray.push({ \"x\": date, \"y\": value.humidity });\n});\n\n\nmsg1.topic = msg2.topic = \"SiteWeb\";\n\nmsg1.payload = tempArray;\nmsg1.action = msg2.action = \"append\";\nmsg2.payload = humidityArray;\n\n//node.send(msg);\n\nnode.send([msg1, msg2]);",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 1810,
        "wires": [
            [
                "0866c283bc7f9752"
            ],
            [
                "31e656b176aa6f36"
            ]
        ]
    },
    {
        "id": "98e8f77ab6b80fce",
        "type": "sqlite",
        "z": "57111ca025f638be",
        "g": "4ac0d347446e702f",
        "mydb": "628739f370d1726d",
        "sqlquery": "prepared",
        "sql": "SELECT 'SiteWeb' as location, temperature, humidity, datetime\nFROM TEMPERATURE_EXTERNE\nwhere  datetime > datetime($dateSelected, 'localtime') \n     AND datetime < datetime($dateSelected, 'localtime', $nbHours) \n\n -- datetime >  datetime($dateSelected, 'localtime', $nbHours)\norder by datetime asc;",
        "name": "Load temp WEB",
        "x": 680,
        "y": 1810,
        "wires": [
            [
                "28c5da6a4d2da8ba"
            ]
        ]
    },
    {
        "id": "836e4535583ce900",
        "type": "sqlite",
        "z": "57111ca025f638be",
        "g": "4ac0d347446e702f",
        "mydb": "628739f370d1726d",
        "sqlquery": "fixed",
        "sql": "SELECT DE.id_device,\n       DE.mac,\n       DE.location,\n       SE.id_sensor\n  FROM DEVICE DE\n       JOIN\n       SENSOR SE ON SE.id_device == DE.id_device\n WHERE EXISTS (\n           SELECT 1\n             FROM SENSOR_TEMPERATURE\n            WHERE id_sensor = SE.id_sensor\n       );\n",
        "name": "Load devices",
        "x": 290,
        "y": 1680,
        "wires": [
            [
                "f138d867ef859cef"
            ]
        ]
    },
    {
        "id": "0a4b76749339d8cd",
        "type": "function",
        "z": "57111ca025f638be",
        "g": "4ac0d347446e702f",
        "name": "Params",
        "func": "if (msg.dateSelected != undefined) {\n    flow.set('dateSelected', msg.dateSelected);\n}\n\nif (msg.devices != undefined) {\n    let status= false;\n    msg.devices.forEach(function (device) {\n        if (device.mac == 'SiteWeb') {\n            status = true;\n        } \n    });\n    context.set('SiteWeb', status);\n}\n\nlet getSiteWeb = context.get('SiteWeb') || false;\n\n\nif (getSiteWeb) {\n    msg.dateSelected = flow.get('dateSelected');\n    msg.params = {\n        $dateSelected: msg.dateSelected.date,\n        $nbHours: '+' + msg.dateSelected.slider + ' hours'\n    }\n\n    return msg;\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 1770,
        "wires": [
            [
                "98e8f77ab6b80fce"
            ]
        ]
    },
    {
        "id": "ea6fbc3a9d80e6ea",
        "type": "comment",
        "z": "57111ca025f638be",
        "g": "4ac0d347446e702f",
        "name": "Data des sensors",
        "info": "",
        "x": 300,
        "y": 1610,
        "wires": []
    },
    {
        "id": "fdcf63160f9713c2",
        "type": "comment",
        "z": "57111ca025f638be",
        "g": "4ac0d347446e702f",
        "name": " températures externes - site web",
        "info": "",
        "x": 850,
        "y": 1760,
        "wires": []
    },
    {
        "id": "e0694b109915343b",
        "type": "function",
        "z": "57111ca025f638be",
        "g": "4ac0d347446e702f",
        "name": "Charts Data",
        "func": "let humidityArray = [];\nlet tempArray = [];\nlet msg1 = {};\nlet msg2 = {};\nlet serieExtArray = [];\n\nlet lastIdSensor = 0;\n\nmsg.payload.forEach(function (value) {\n    if (lastIdSensor != value.id_sensor) {\n        if (lastIdSensor != 0) {\n            msg1.payload = tempArray;\n            msg2.payload = humidityArray;\n            node.send([msg1, msg2]);\n            //on fait append après la 1ère insertion\n            msg1.action = \"append\";\n            msg2.action = \"append\";\n           \n        }\n\n        lastIdSensor = value.id_sensor;\n        tempArray = [];\n        humidityArray = [];\n\n        msg1.topic = value.location;\n        msg2.topic = value.location;\n    }\n\n    const date = new Date(value.datetime);\n       //Ce cas se produit si le sensor n'a pas fonctionné correctement\n    if (value.humidity != undefined) {\n        tempArray.push({ \"x\": date, \"y\": value.temperature });\n    } else {\n        tempArray.push({ \"x\": date, \"y\": null });\n    }\n    humidityArray.push({ \"x\": date, \"y\": value.humidity });\n});\nif (lastIdSensor == 0) {\n    msg1.action = \"replace\";\n    msg2.action = \"replace\";\n}\nmsg1.payload = tempArray;\nmsg2.payload = humidityArray;\nreturn [msg1, msg2];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1630,
        "wires": [
            [
                "91ced026339a3eeb"
            ],
            [
                "388cb232c9079e14"
            ]
        ],
        "outputLabels": [
            "Temperature",
            "Humidity"
        ]
    },
    {
        "id": "0866c283bc7f9752",
        "type": "delay",
        "z": "57111ca025f638be",
        "g": "4ac0d347446e702f",
        "name": "Délai",
        "pauseType": "delay",
        "timeout": "300",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1090,
        "y": 1670,
        "wires": [
            [
                "91ced026339a3eeb"
            ]
        ]
    },
    {
        "id": "31e656b176aa6f36",
        "type": "delay",
        "z": "57111ca025f638be",
        "g": "4ac0d347446e702f",
        "name": "Délai",
        "pauseType": "delay",
        "timeout": "300",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1070,
        "y": 1800,
        "wires": [
            [
                "388cb232c9079e14"
            ]
        ],
        "info": "Délai\r\nCe délais est ajouté pour que la mise à jour du \r\ngraphique fonctionne.\r\nCeci permets de faire un update du graphique après que les sensors ont été chargés."
    },
    {
        "id": "75ba57a9059087ae",
        "type": "inject",
        "z": "57111ca025f638be",
        "g": "4ac0d347446e702f",
        "name": "Update",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 00 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 290,
        "y": 1740,
        "wires": [
            [
                "9831a0922b955da6"
            ]
        ]
    },
    {
        "id": "3fbc87fd28231303",
        "type": "debug",
        "z": "57111ca025f638be",
        "g": "99b0856dd2e01ab4",
        "name": "debug 170",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 3080,
        "wires": []
    },
    {
        "id": "0c97012507b7fb6d",
        "type": "serial out",
        "z": "57111ca025f638be",
        "g": "99b0856dd2e01ab4",
        "name": "Serial out",
        "serial": "88425ab7cad6cc83",
        "x": 890,
        "y": 3040,
        "wires": []
    },
    {
        "id": "95339f57b2961011",
        "type": "ui-text",
        "z": "57111ca025f638be",
        "g": "99b0856dd2e01ab4",
        "group": "9f41fa0923a34ac2",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "Instruction",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#717171",
        "className": "",
        "x": 710,
        "y": 2970,
        "wires": []
    },
    {
        "id": "8e3b455c0415942a",
        "type": "inject",
        "z": "57111ca025f638be",
        "g": "99b0856dd2e01ab4",
        "name": "Injection",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 390,
        "y": 2970,
        "wires": [
            [
                "ed85ba973cfbc3c1"
            ]
        ]
    },
    {
        "id": "ed85ba973cfbc3c1",
        "type": "function",
        "z": "57111ca025f638be",
        "g": "99b0856dd2e01ab4",
        "name": "Instruction",
        "func": "msg.payload = \"Ces données sont transmises par le port série.\\n\"\n+ \"\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 2970,
        "wires": [
            [
                "95339f57b2961011"
            ]
        ]
    },
    {
        "id": "2b47b1be61752b81",
        "type": "function",
        "z": "57111ca025f638be",
        "g": "99b0856dd2e01ab4",
        "name": "To serial port",
        "func": "global.set(\"GatewayConfig\", msg.payload);\nmsg.payload = \"@\" + msg.topic + \":\" + msg.payload;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 3040,
        "wires": [
            [
                "0c97012507b7fb6d"
            ]
        ]
    },
    {
        "id": "65ebe7cecc4ac2d8",
        "type": "ui-template",
        "z": "57111ca025f638be",
        "g": "99b0856dd2e01ab4",
        "group": "9f41fa0923a34ac2",
        "page": "",
        "ui": "",
        "name": "Last config",
        "order": 0,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n  <v-container>\n    <v-row>\n      <v-textarea v-model=\"message\" label=\"Message\" maxlength=\"120\" counter single-line></v-textarea>\n    </v-row>\n    <v-row>\n      <v-btn label=\"Copier data\" @click=\"onSubmit\">Copier data</v-btn>\n    </v-row>\n  </v-container>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        message: '',\n      }\n    },\n    watch: {\n            // watch for any changes of \"count\"\n            msg: function () {\n                this.message = this.msg.payload;\n                //this.message = JSON.stringify(this.msg.payload);\n            }\n        },\n    methods: {\n      onSubmit: function () {\n        \n        this.send({payload: this.message});\n      },\n    },\n  }\n</script>",
        "storeOutMessages": true,
        "passthru": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 320,
        "y": 3040,
        "wires": [
            [
                "2c32dee76537bd86",
                "469cc2e3af8f2112"
            ]
        ]
    },
    {
        "id": "9ee742908744f209",
        "type": "debug",
        "z": "57111ca025f638be",
        "g": "adca6ef2dfcba80e",
        "name": "debug 172",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 2860,
        "wires": []
    },
    {
        "id": "469cc2e3af8f2112",
        "type": "ui-template",
        "z": "57111ca025f638be",
        "g": "99b0856dd2e01ab4",
        "group": "9f41fa0923a34ac2",
        "page": "",
        "ui": "",
        "name": "Gateway config",
        "order": 0,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n  <v-form v-model=\"valid\" @submit.prevent=\"onSubmit\">\n    <v-container>\n      <div>\n        NETWORK\n        <v-row dense>\n          <v-col cols=\"6\">\n            <v-switch v-model=\"modeWireless\" color=\"primary\" label=\"Activation réseau\" hide-details></v-switch>\n          </v-col>\n        </v-row>\n      </div>\n      <div>\n        WIFI\n        <v-row dense>\n          <v-col cols=\"6\">\n            <v-text-field v-model=\"config.ssid\" @mousedown:control=\"showConfig\" density=\"compact\" :counter=\"15\"\n              label=\"SSID\" :disabled=\"!modeWireless\"></v-text-field>\n          </v-col>\n\n          <v-col cols=\"6\">\n            <v-text-field v-model=\"config.ssidPwd\" @mousedown:control=\"showConfig\" density=\"compact\" :counter=\"15\"\n              label=\"Mot de passe\" hide-details :disabled=\"!modeWireless\"></v-text-field>\n          </v-col>\n        </v-row>\n      </div>\n      <div>\n        MQTT server\n        <v-row dense>\n          <v-col cols=\"6\" md=\"6\">\n            <v-text-field v-model=\"config.mqttIpAddress\" @mousedown:control=\"showConfig\" density=\"compact\" :counter=\"15\"\n              label=\"Adresse IP\" :disabled=\"!modeWireless\"></v-text-field>\n          </v-col>\n\n          <v-col cols=\"3\" md=\"3\">\n            <v-text-field v-model=\"config.mqttPort\" @mousedown:control=\"showConfig\" density=\"compact\" :counter=\"4\"\n              label=\"Port\"  :disabled=\"!modeWireless\"></v-text-field>\n          </v-col>\n        </v-row>\n      </div>\n      <div>\n        MQTT usager\n        <v-row dense>\n          <v-col cols=\"6\">\n            <v-text-field v-model=\"config.mqttUserId\" @mousedown:control=\"showConfig\" density=\"compact\" :counter=\"15\"\n              label=\"ID\"  :disabled=\"!modeWireless\"></v-text-field>\n          </v-col>\n        </v-row>\n        <v-row dense>\n          <v-col cols=\"6\">\n            <v-text-field v-model=\"config.mqttUser\" @mousedown:control=\"showConfig\" density=\"compact\" :counter=\"15\"\n              label=\"User\"  :disabled=\"!modeWireless\"></v-text-field>\n          </v-col>\n          <v-col cols=\"6\">\n            <v-text-field v-model=\"config.mqttPassword\" @mousedown:control=\"showConfig\" density=\"compact\" :counter=\"15\"\n              label=\"Mot de passe\"  :disabled=\"!modeWireless\">\n            </v-text-field>\n          </v-col>\n        </v-row>\n      </div>\n      <v-container>\n        <v-textarea v-model=\"message\" :readonly=\"true\" label=\"Message\" maxlength=\"120\" counter single-line></v-textarea>\n      </v-container>\n      <v-row>\n        <v-btn type=\"submit\" :loading=\"loading\">OK</v-btn>\n      </v-row>\n    </v-container>\n  </v-form>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        valid: false,\n        modeWireless: true,\n        config: {\n          ssid: '',\n          ssidPwd: '',\n          mqttIpAddress: '',\n          mqttPort: '',\n          mqttUserId: '',\n          mqttUser: '',\n          mqttPassword: '',\n        },\n       \n        message: '',\n        loading: false\n      }\n    },\n    watch: {\n      // watch for any changes of \"count\"\n      msg: function () {\n          //this.message = this.msg.payload;\n          this.message = this.msg.payload;\n          const msgConfig = JSON.parse(this.msg.payload);\n          //this.send(msgConfig);\n          this.modeWireless = msgConfig.modeWireless;\n          this.config.ssid = msgConfig.data.ssid;\n          this.config.ssidPwd = msgConfig.data.ssidPwd;\n\n          this.config.mqttIpAddress = msgConfig.data.mqttIpAddress;\n          this.config.mqttPort = msgConfig.data.mqttPort;\n\n          this.config.mqttUserId = msgConfig.data.mqttUserId;\n          this.config.mqttUser = msgConfig.data.mqttUser;\n          this.config.mqttPassword = msgConfig.data.mqttPassword;\n\n      },\n    },\n    methods: {\n      showConfig: function () {\n        this.message = JSON.stringify(this.config, null, 4)\n      },\n      onSubmit: function () {\n        //this.loading = true;\n        //setTimeout(() => (this.loading = false), 2000);\n\n        let infoObj = {\n          \"header\": { \"type\": \"ConfigGateway\", \"modeWireless\": this.modeWireless },\n          \"data\": this.config \n        };\n        \n        this.message = \"Topic: dom-sys.server/gateway_config\\n \"\n          + \"Config:\\n\" + JSON.stringify(infoObj, null, 4);\n     \n        this.send({payload: JSON.stringify(infoObj), topic:\"dom-sys.server/gateway_config\"});\n      },\n    },\n  }\n</script>",
        "storeOutMessages": true,
        "passthru": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 500,
        "y": 3040,
        "wires": [
            [
                "2b47b1be61752b81",
                "3fbc87fd28231303"
            ]
        ]
    },
    {
        "id": "5826ad71ca8be439",
        "type": "inject",
        "z": "57111ca025f638be",
        "g": "99b0856dd2e01ab4",
        "name": "SetConfig",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "GatewayConfig",
        "payloadType": "global",
        "x": 140,
        "y": 3040,
        "wires": [
            [
                "65ebe7cecc4ac2d8",
                "2c32dee76537bd86"
            ]
        ]
    },
    {
        "id": "2c32dee76537bd86",
        "type": "debug",
        "z": "57111ca025f638be",
        "g": "99b0856dd2e01ab4",
        "name": "debug 173",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 3100,
        "wires": []
    },
    {
        "id": "6c48e35750a5c6be",
        "type": "link in",
        "z": "57111ca025f638be",
        "g": "4ac0d347446e702f",
        "name": "link in 1",
        "links": [
            "e4aecc6f336ce4bc"
        ],
        "x": 475,
        "y": 1780,
        "wires": [
            [
                "0a4b76749339d8cd",
                "44c0d2d81fe59de0"
            ]
        ]
    },
    {
        "id": "53915f2f274e75b9",
        "type": "comment",
        "z": "57111ca025f638be",
        "g": "b3735df348adb38e",
        "name": "À développer",
        "info": "À développer",
        "x": 140,
        "y": 1960,
        "wires": []
    },
    {
        "id": "72f534142f1ef687",
        "type": "mqtt in",
        "z": "57111ca025f638be",
        "g": "2ff47af73d8a3d20",
        "name": "",
        "topic": "dom-sys.sensor/#",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "c6a29fab98717cbb",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 2190,
        "wires": [
            [
                "bd481b8dd3e88e7d",
                "ac85b8d4daad3a29"
            ]
        ]
    },
    {
        "id": "3e8251f62ce3c3c7",
        "type": "function",
        "z": "57111ca025f638be",
        "g": "2ff47af73d8a3d20",
        "name": "GatewayLog",
        "func": "\nlet message = JSON.stringify(msg.payload);\n\nswitch (msg.topic) {\n    case \"dom-sys.sensor/status\":\n        msg.params = {\n            $mac: msg.mac,\n            $log: message,\n            $topic: msg.topic,\n            $event_type: msg.payload.header.type,\n            $counter: msg.payload.header.counter,\n            $version: msg.payload.header.version\n        }\n        return msg;\n\n    default:\n        \n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 2240,
        "wires": [
            [
                "97c2bcd44f43299c",
                "b34c8e94140bbb12"
            ]
        ]
    },
    {
        "id": "b34c8e94140bbb12",
        "type": "debug",
        "z": "57111ca025f638be",
        "g": "2ff47af73d8a3d20",
        "name": "debug 109",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 2280,
        "wires": []
    },
    {
        "id": "97c2bcd44f43299c",
        "type": "sqlite",
        "z": "57111ca025f638be",
        "g": "2ff47af73d8a3d20",
        "mydb": "628739f370d1726d",
        "sqlquery": "prepared",
        "sql": "INSERT INTO SYSTEM_LOG (\n    id_device,\n    id_event_type,\n    log,\n    topic,\n    counter,\n    version,\n    datetime\n)\nVALUES (\n  ( SELECT id_device \n    FROM DEVICE \n    WHERE DEVICE.mac LIKE $mac ),\n  ( SELECT id_event_type\n    FROM EVENT_TYPE\n    WHERE event_type LIKE $event_type),\n  $log,\n  $topic,\n  $counter,\n  $version,\n  datetime('now', 'localtime')\n);\n",
        "name": "SystemLog",
        "x": 700,
        "y": 2240,
        "wires": [
            []
        ]
    },
    {
        "id": "bd481b8dd3e88e7d",
        "type": "function",
        "z": "57111ca025f638be",
        "g": "2ff47af73d8a3d20",
        "name": "Device exist",
        "func": "let devicesMap = global.get('devicesMap')|| new Map();\nmsg.mac = msg.payload.header.mac;\n\nmsg.device = devicesMap.get(msg.mac);\n\nif(msg.device == null){\n    //Si le device n'est pas dans la liste il faut créer une \n    // nouvelle configuration.\n     return [msg, null];\n}else{\n    return [null, msg];\n}\n\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 2190,
        "wires": [
            [
                "1b2d90fb3207c856",
                "b46d7561a233fae7"
            ],
            [
                "3e8251f62ce3c3c7",
                "ee416b1f0f20e4d8"
            ]
        ],
        "outputLabels": [
            "Nouveau device",
            "Device Existe"
        ]
    },
    {
        "id": "1b2d90fb3207c856",
        "type": "function",
        "z": "57111ca025f638be",
        "g": "2ff47af73d8a3d20",
        "name": "Params device",
        "func": "\n//Set params pour insertion dans la table DEVICE.\nmsg.params = { $mac:msg.mac};\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 2100,
        "wires": [
            [
                "8d1c099b642472fa"
            ]
        ]
    },
    {
        "id": "8d1c099b642472fa",
        "type": "sqlite",
        "z": "57111ca025f638be",
        "g": "2ff47af73d8a3d20",
        "mydb": "628739f370d1726d",
        "sqlquery": "prepared",
        "sql": "INSERT INTO DEVICE (\n   mac,\n   location,\n   sleep_duration,\n   im_alive_period,\n   datetime\n)\nVALUES (\n   $mac,\n   \"ND\",\n   0,\n   3600,\n   datetime('now', 'localtime') \n);\n",
        "name": "Insert DEVICE",
        "x": 780,
        "y": 2100,
        "wires": [
            [
                "3b7b291f93b5dc9a",
                "a147248bb7549068"
            ]
        ]
    },
    {
        "id": "3b7b291f93b5dc9a",
        "type": "debug",
        "z": "57111ca025f638be",
        "g": "2ff47af73d8a3d20",
        "name": "debug 118",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 2140,
        "wires": []
    },
    {
        "id": "f37c33f5cc57547c",
        "type": "inject",
        "z": "57111ca025f638be",
        "g": "2ff47af73d8a3d20",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "dom-sys.sensor/status",
        "payload": "{\"header\":{\"mac\":\"01:02:03:04:05:06\",\"type\":\"START_SIGNAL\",\"version\":1,\"counter\":5,\"error\":\"\"},\"data\":{\"cycle_duration\":0}}",
        "payloadType": "json",
        "x": 160,
        "y": 2250,
        "wires": [
            [
                "bd481b8dd3e88e7d"
            ]
        ]
    },
    {
        "id": "a147248bb7549068",
        "type": "link out",
        "z": "57111ca025f638be",
        "g": "2ff47af73d8a3d20",
        "name": "New device",
        "mode": "link",
        "links": [
            "5e2d481f338e5d45"
        ],
        "x": 965,
        "y": 2100,
        "wires": []
    },
    {
        "id": "ac85b8d4daad3a29",
        "type": "debug",
        "z": "57111ca025f638be",
        "g": "2ff47af73d8a3d20",
        "name": "debug 119",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 350,
        "y": 2130,
        "wires": []
    },
    {
        "id": "ee416b1f0f20e4d8",
        "type": "function",
        "z": "57111ca025f638be",
        "g": "2ff47af73d8a3d20",
        "name": "Send config",
        "func": "let devicesMap = global.get('devicesMap'|| new Map());\n\n\nif(msg.payload.header.type == \"ASK_CONFIG\"){\n    msg.device = devicesMap.get(msg.mac);\n    \n    let device = {\n    \"header\":{\"mac\":msg.mac,\"type\":\"CONFIG\"},\n    \"device\": msg.device\n    }\n    msg.payload = device;\n\n    return msg; \n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 2200,
        "wires": [
            [
                "ba7bd09e9170283f"
            ]
        ]
    },
    {
        "id": "b46d7561a233fae7",
        "type": "delay",
        "z": "57111ca025f638be",
        "g": "2ff47af73d8a3d20",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 550,
        "y": 2160,
        "wires": [
            [
                "ee416b1f0f20e4d8"
            ]
        ]
    },
    {
        "id": "ba7bd09e9170283f",
        "type": "json",
        "z": "57111ca025f638be",
        "g": "2ff47af73d8a3d20",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 860,
        "y": 2200,
        "wires": [
            [
                "ed7c07d39dda883d",
                "8952a96107cd9181"
            ]
        ]
    },
    {
        "id": "ed7c07d39dda883d",
        "type": "mqtt out",
        "z": "57111ca025f638be",
        "g": "2ff47af73d8a3d20",
        "name": "",
        "topic": "dom-sys.server/update_config",
        "qos": "1",
        "retain": "true",
        "respTopic": "",
        "contentType": "application/json",
        "userProps": "",
        "correl": "",
        "expiry": "60",
        "broker": "c6a29fab98717cbb",
        "x": 1070,
        "y": 2200,
        "wires": []
    },
    {
        "id": "8952a96107cd9181",
        "type": "debug",
        "z": "57111ca025f638be",
        "g": "2ff47af73d8a3d20",
        "name": "debug 178",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 2250,
        "wires": []
    },
    {
        "id": "da939ff73faa3d33",
        "type": "serial in",
        "z": "797d9b2a7151f089",
        "g": "fa8d72ad90e71a48",
        "name": "Serial in",
        "serial": "88425ab7cad6cc83",
        "x": 160,
        "y": 140,
        "wires": [
            [
                "edba9caae115a851",
                "41e9b0574e55c0c8"
            ]
        ]
    },
    {
        "id": "16071ac81dfe26dd",
        "type": "mqtt out",
        "z": "797d9b2a7151f089",
        "g": "fa8d72ad90e71a48",
        "name": "",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "c6a29fab98717cbb",
        "x": 610,
        "y": 140,
        "wires": []
    },
    {
        "id": "edba9caae115a851",
        "type": "function",
        "z": "797d9b2a7151f089",
        "g": "fa8d72ad90e71a48",
        "name": "To MQTT",
        "func": "\nlet message = \"\";\nmessage = msg.payload;\n\n// Si les conditions ne sont pas valides le message est rejeté.\nif(message.length > 0){\n    if (message.startsWith(\"@\")){\n        let index = message.indexOf(\":\");\n        \n        if(index >= 0){\n            msg.topic = message.substring(1, index);\n            msg.payload = message.substring(index+1).trimEnd();\n            return msg;\n        }\n    }\n\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 140,
        "wires": [
            [
                "16071ac81dfe26dd",
                "76b97aaea830e452"
            ]
        ]
    },
    {
        "id": "51ee3605ff9d80e0",
        "type": "file",
        "z": "797d9b2a7151f089",
        "g": "fa8d72ad90e71a48",
        "name": "Logger ESP",
        "filename": "/home/pi-md/log/esp32.log",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 510,
        "y": 190,
        "wires": [
            []
        ]
    },
    {
        "id": "41e9b0574e55c0c8",
        "type": "function",
        "z": "797d9b2a7151f089",
        "g": "fa8d72ad90e71a48",
        "name": "Add Date",
        "func": "\n\nif(msg.payload.trim().length > 0){\n\n  //Les messages commençant par @ sont des commandes destinées au serveur.\n  //Elles sont enregistrées sans ajouter de date.\n  if(msg.payload.charAt(0) !=  \"@\" \n    && msg.payload.charAt(0) != \"-\" && msg.payload.charAt(0) != \" \"){\n\n    const regex = /\\[ *[0-9]+\\](.*)/;\n    msg.match = regex.exec(msg.payload);\n    msg.payload = msg.match[1]; \n\n\n    let date = new Date();\n    let dateString = date.toLocaleDateString('fr-ca', {month: 'numeric', day: 'numeric'});\n    let timeString = date.toTimeString().slice(0, 8);\n\n    msg.payload = \"[\" + timeString + \"]\" \n          + \" \" + msg.payload + '\\n'\n  }\n\n  return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 190,
        "wires": [
            [
                "51ee3605ff9d80e0"
            ]
        ]
    },
    {
        "id": "855c0e1ea702f2cf",
        "type": "watch",
        "z": "797d9b2a7151f089",
        "g": "beefa0c6950593db",
        "name": "Surveiller fichier log",
        "files": "/home/pi-md/log/esp32.log",
        "recursive": "",
        "x": 210,
        "y": 280,
        "wires": [
            [
                "b4133a029132e1bc",
                "187ba9d2889dfd5c"
            ]
        ]
    },
    {
        "id": "f1f19a0d827e452e",
        "type": "exec",
        "z": "797d9b2a7151f089",
        "g": "beefa0c6950593db",
        "command": "logrotate -s /home/pi-md/log/status /home/pi-md/log/logrotate.conf",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "LogRotate",
        "x": 620,
        "y": 280,
        "wires": [
            [
                "2b905ff025d2f0a9"
            ],
            [
                "2b905ff025d2f0a9"
            ],
            []
        ]
    },
    {
        "id": "b4133a029132e1bc",
        "type": "function",
        "z": "797d9b2a7151f089",
        "g": "beefa0c6950593db",
        "name": "Executer rotation log",
        "func": "if(msg.size > 1000000){\n    return msg;\n\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 280,
        "wires": [
            [
                "f1f19a0d827e452e"
            ]
        ]
    },
    {
        "id": "187ba9d2889dfd5c",
        "type": "debug",
        "z": "797d9b2a7151f089",
        "g": "beefa0c6950593db",
        "name": "debug 176",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 410,
        "y": 320,
        "wires": []
    },
    {
        "id": "2b905ff025d2f0a9",
        "type": "debug",
        "z": "797d9b2a7151f089",
        "g": "beefa0c6950593db",
        "name": "debug 177",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 280,
        "wires": []
    },
    {
        "id": "d2b39a2251d4d124",
        "type": "serial out",
        "z": "797d9b2a7151f089",
        "g": "d0932bcd6a5ec1f6",
        "name": "Serial out",
        "serial": "88425ab7cad6cc83",
        "x": 720,
        "y": 480,
        "wires": []
    },
    {
        "id": "848f84e24987bc2f",
        "type": "debug",
        "z": "797d9b2a7151f089",
        "g": "d0932bcd6a5ec1f6",
        "name": "debug 33",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 440,
        "wires": []
    },
    {
        "id": "4aafe259275fd99f",
        "type": "delay",
        "z": "797d9b2a7151f089",
        "g": "d0932bcd6a5ec1f6",
        "name": "",
        "pauseType": "rate",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": ".5",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 520,
        "y": 480,
        "wires": [
            [
                "d2b39a2251d4d124",
                "848f84e24987bc2f"
            ]
        ]
    },
    {
        "id": "7a1a4351ec72b9b3",
        "type": "function",
        "z": "797d9b2a7151f089",
        "g": "d0932bcd6a5ec1f6",
        "name": "To serial port",
        "func": "\n\nmsg.payload = \"@\" + msg.topic + \"::\" + msg.payload;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 480,
        "wires": [
            [
                "4aafe259275fd99f"
            ]
        ]
    },
    {
        "id": "e27a25756c4ae984",
        "type": "mqtt in",
        "z": "797d9b2a7151f089",
        "g": "d0932bcd6a5ec1f6",
        "name": "",
        "topic": "dom-sys.server/#",
        "qos": "1",
        "datatype": "utf8",
        "broker": "c6a29fab98717cbb",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 480,
        "wires": [
            [
                "7a1a4351ec72b9b3"
            ]
        ]
    },
    {
        "id": "b07bf152a6d21710",
        "type": "catch",
        "z": "797d9b2a7151f089",
        "g": "e53915e26e2f69d5",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 140,
        "y": 1430,
        "wires": [
            [
                "c2a5a48d61080e22"
            ]
        ]
    },
    {
        "id": "c2a5a48d61080e22",
        "type": "debug",
        "z": "797d9b2a7151f089",
        "g": "e53915e26e2f69d5",
        "name": "Catch ",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 380,
        "y": 1430,
        "wires": []
    },
    {
        "id": "76b97aaea830e452",
        "type": "debug",
        "z": "797d9b2a7151f089",
        "g": "fa8d72ad90e71a48",
        "name": "debug 181",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 100,
        "wires": []
    },
    {
        "id": "68020bb809a9d64b",
        "type": "mqtt in",
        "z": "797d9b2a7151f089",
        "g": "5d89e93885229fe1",
        "name": "",
        "topic": "dom-sys.gw/#",
        "qos": "0",
        "datatype": "auto",
        "broker": "c6a29fab98717cbb",
        "nl": false,
        "rap": false,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 1240,
        "wires": [
            [
                "558eb47c0c8cd19f"
            ]
        ]
    },
    {
        "id": "01804589863ba34e",
        "type": "inject",
        "z": "797d9b2a7151f089",
        "g": "5d89e93885229fe1",
        "name": "Test",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"status\":\"ESPNOW_DATA\", \"type\":\"START_SIGNAL\",\"mac\":\"C8:C9:A3:C8:35:9C\"}",
        "payloadType": "str",
        "x": 160,
        "y": 1290,
        "wires": [
            [
                "558eb47c0c8cd19f"
            ]
        ]
    },
    {
        "id": "558eb47c0c8cd19f",
        "type": "function",
        "z": "797d9b2a7151f089",
        "g": "5d89e93885229fe1",
        "name": "Dispatcher",
        "func": "//node.warn(msg);\n\nswitch (msg.topic) {\n    case \"dom-sys.gw/status\":\n        switch (msg.payload) {\n            case \"IM_ALIVE\":\n                //on ne log pas ce message\n                return [msg, null, null];\n                break;\n            case \"GATEWAY_START\":\n            case \"GATEWAY_RESTART\":\n                msg.params = {\n                    $EventType: msg.payload,\n                    $EventData: \"\"\n                }\n                return [msg, msg, null];\n                break;\n            default:\n                msgInconnu();\n        }\n        break;\n    case \"dom-sys.gw/request\":\n        break;\n    default:\n        msgInconnu();\n}\n\nfunction msgInconnu() {\n    msg.topic = \"Passerelle\"\n    msg.payload = \"Message statut inconnu: \" + msg.payload;\n    return [null, null, msg];\n}\n",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1270,
        "wires": [
            [],
            [
                "27d79d1a4af37e13"
            ],
            [
                "c1c1ebd04c6e798e"
            ]
        ],
        "outputLabels": [
            "IM_ALIVE",
            "TO LOG",
            "INCONNU"
        ]
    },
    {
        "id": "9bb6a0be709aef65",
        "type": "trigger",
        "z": "797d9b2a7151f089",
        "g": "5d89e93885229fe1",
        "name": "ImAlive",
        "op1": "IM_ALIVE",
        "op2": "IM_ALIVE_MISSING",
        "op1type": "str",
        "op2type": "str",
        "duration": "5",
        "extend": true,
        "overrideDelay": false,
        "units": "min",
        "reset": "",
        "bytopic": "topic",
        "topic": "topic",
        "outputs": 1,
        "x": 540,
        "y": 1140,
        "wires": [
            [
                "d23177f02750759c",
                "0bdbc43f27e4bb08"
            ]
        ]
    },
    {
        "id": "d23177f02750759c",
        "type": "function",
        "z": "797d9b2a7151f089",
        "g": "5d89e93885229fe1",
        "name": "Statut server",
        "func": "switch (msg.payload) {\n    case \"IM_ALIVE_MISSING\":\n        node.status({ fill: \"red\", shape: \"ring\", text: \"IM_ALIVE_MISSING\" });\n\n        msg.payload = \"IM_ALIVE_MISSING\";\n        msg.icon = \"visibility_off\";\n        msg.color = \"red\";\n        \n        msg.params = {\n            $EventType: \"ERROR\",\n            $EventData: msg.payload\n        }\n        return [msg, msg];\n\n    case \"IM_ALIVE\":\n        node.status({ fill: \"green\", shape: \"ring\", text: \"IM_ALIVE_OK\" });\n        msg.payload = \"IM_ALIVE\";\n        msg.icon = \"visibility\";\n        msg.color = \"green\";        \n        return [msg, null];\n\n    default:\n        msg.payload = \"Passerelle\";\n        msg.icon = \"visibility_off\";\n        msg.color = \"yellow\";\n}\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 1170,
        "wires": [
            [
                "4805c368e2c34a0c"
            ],
            [
                "a2df31a6143f0148",
                "27d79d1a4af37e13"
            ]
        ],
        "outputLabels": [
            "IM_ALIVE_OK",
            "IM_ALIVE_ERROR"
        ]
    },
    {
        "id": "0bdbc43f27e4bb08",
        "type": "debug",
        "z": "797d9b2a7151f089",
        "g": "5d89e93885229fe1",
        "name": "debug 103",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 1130,
        "wires": []
    },
    {
        "id": "a2df31a6143f0148",
        "type": "debug",
        "z": "797d9b2a7151f089",
        "g": "5d89e93885229fe1",
        "name": "debug 102",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 1180,
        "wires": []
    },
    {
        "id": "60d4bb2262ebf375",
        "type": "comment",
        "z": "797d9b2a7151f089",
        "g": "5d89e93885229fe1",
        "name": "À revoir - Structurer le message du Gateway",
        "info": "",
        "x": 400,
        "y": 1230,
        "wires": []
    },
    {
        "id": "27d79d1a4af37e13",
        "type": "sqlite",
        "z": "797d9b2a7151f089",
        "d": true,
        "g": "5d89e93885229fe1",
        "mydb": "628739f370d1726d",
        "sqlquery": "prepared",
        "sql": "INSERT INTO SYSTEM_LOG (\n    id_device,\n    id_event_type,\n    log,\n    topic,\n    counter,\n    version,\n    datetime\n)\nVALUES (\n  $id_device,\n  $log,\n  $topic,\n  $counter,\n  $version,\n  datetime('now', 'localtime')\n);\n",
        "name": "SystemLog",
        "x": 930,
        "y": 1230,
        "wires": [
            []
        ]
    },
    {
        "id": "c1c1ebd04c6e798e",
        "type": "ui-notification",
        "z": "797d9b2a7151f089",
        "g": "5d89e93885229fe1",
        "ui": "d4c9d9e9b37824ea",
        "position": "top right",
        "colorDefault": true,
        "color": "#000000",
        "displayTime": "0",
        "showCountdown": true,
        "outputs": 0,
        "allowDismiss": true,
        "dismissText": "Close",
        "raw": false,
        "className": "",
        "name": "",
        "x": 610,
        "y": 1280,
        "wires": []
    },
    {
        "id": "4805c368e2c34a0c",
        "type": "ui-led",
        "z": "797d9b2a7151f089",
        "g": "5d89e93885229fe1",
        "name": "",
        "group": "fd9c7176b0a431e9",
        "order": 2,
        "width": "0",
        "height": "0",
        "label": "GW - I'm alive",
        "labelPlacement": "left",
        "labelAlignment": "flex-start",
        "states": [
            {
                "value": "IM_ALIVE_MISSING",
                "valueType": "str",
                "color": "#ff0000"
            },
            {
                "value": "IM_ALIVE",
                "valueType": "str",
                "color": "#00ff00"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "square",
        "showBorder": true,
        "showGlow": true,
        "x": 940,
        "y": 1140,
        "wires": []
    },
    {
        "id": "1784ee5849a07738",
        "type": "status",
        "z": "797d9b2a7151f089",
        "g": "8feba00f9cb9532b",
        "name": "Status Serial port",
        "scope": [
            "56d1fae213c30e8a",
            "da939ff73faa3d33",
            "d2b39a2251d4d124",
            "7a1a4351ec72b9b3",
            "5fc3dcdaa67d4078"
        ],
        "x": 170,
        "y": 970,
        "wires": [
            [
                "526010976c842e2c"
            ]
        ]
    },
    {
        "id": "44e59e8574df7bf8",
        "type": "ui-led",
        "z": "797d9b2a7151f089",
        "g": "8feba00f9cb9532b",
        "name": "",
        "group": "fd9c7176b0a431e9",
        "order": 2,
        "width": "0",
        "height": "0",
        "label": "Port série",
        "labelPlacement": "left",
        "labelAlignment": "flex-start",
        "states": [
            {
                "value": "stopped",
                "valueType": "str",
                "color": "#ff0000"
            },
            {
                "value": "connected",
                "valueType": "str",
                "color": "#00ff00"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "square",
        "showBorder": true,
        "showGlow": true,
        "x": 550,
        "y": 970,
        "wires": []
    },
    {
        "id": "526010976c842e2c",
        "type": "function",
        "z": "797d9b2a7151f089",
        "g": "8feba00f9cb9532b",
        "name": "Statut port série",
        "func": "\n//msg.class=\"my-class\"\n\nswitch (msg.status.text) {\n   case \"node-red:common.status.connected\":\n      msg.payload = \"connected\";\n      return msg;\n   case \"node-red:common.status.connecting\":\n      msg.payload = \"connecting\";\n      return msg;\n   case \"node-red:common.status.not-connected\":\n      msg.payload = \"stopped\";\n    //  msg.class=\"my-class\"\n      return msg;\n  \n   default:\n      //msg.payload = msg.status.text;\n}\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 970,
        "wires": [
            [
                "44e59e8574df7bf8",
                "0cbbba078e7506a7"
            ]
        ]
    },
    {
        "id": "0cbbba078e7506a7",
        "type": "debug",
        "z": "797d9b2a7151f089",
        "g": "8feba00f9cb9532b",
        "name": "debug 164",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 570,
        "y": 1010,
        "wires": []
    },
    {
        "id": "0efe0dc629d83c81",
        "type": "status",
        "z": "797d9b2a7151f089",
        "g": "70160f0a7636882f",
        "name": "Status MQTT",
        "scope": [
            "68020bb809a9d64b",
            "1b2663185a65a48f",
            "56d1fae213c30e8a"
        ],
        "x": 170,
        "y": 670,
        "wires": [
            [
                "d95bc61b71d72cb2",
                "0f27b5b866c9b4a4"
            ]
        ]
    },
    {
        "id": "375f5d90204152ea",
        "type": "function",
        "z": "797d9b2a7151f089",
        "g": "70160f0a7636882f",
        "name": "Statut MQTT",
        "func": "\nswitch (msg.status.text) {\n   case \"node-red:common.status.connected\":\n\n      msg.payload = \"connected\";\n      //Pour la gestion du délai\n      msg.reset = 1;\n      msg.delay = 0;\n      break;\n   case \"node-red:common.status.connecting\":\n      msg.payload = \"connecting\";\n      msg.delay = 10000;\n      break;\n   case \"node-red:common.status.disconnected\":\n      msg.payload = \"disconnected\";\n      break;\n   default:\n      msg.payload = msg.status.text;\n}\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 670,
        "wires": [
            [
                "037ff0d4ccce8f8a",
                "441a41af679a65f8",
                "b06e8d799cfe5b7e"
            ]
        ]
    },
    {
        "id": "037ff0d4ccce8f8a",
        "type": "debug",
        "z": "797d9b2a7151f089",
        "g": "70160f0a7636882f",
        "name": "Status MQTT",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 770,
        "y": 630,
        "wires": [],
        "info": "# Plus grand"
    },
    {
        "id": "d95bc61b71d72cb2",
        "type": "debug",
        "z": "797d9b2a7151f089",
        "g": "70160f0a7636882f",
        "name": "Status MQTT 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 340,
        "y": 630,
        "wires": [],
        "info": "# Plus grand"
    },
    {
        "id": "441a41af679a65f8",
        "type": "ui-led",
        "z": "797d9b2a7151f089",
        "g": "70160f0a7636882f",
        "name": "Statut MQTT",
        "group": "fd9c7176b0a431e9",
        "order": 2,
        "width": "0",
        "height": "0",
        "label": "MQTT",
        "labelPlacement": "left",
        "labelAlignment": "flex-start",
        "states": [
            {
                "value": "disconnected",
                "valueType": "str",
                "color": "#ff0000"
            },
            {
                "value": "connected",
                "valueType": "str",
                "color": "#00ff00"
            },
            {
                "value": "connecting",
                "valueType": "str",
                "color": "#ffffa4"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "square",
        "showBorder": true,
        "showGlow": true,
        "x": 760,
        "y": 680,
        "wires": []
    },
    {
        "id": "3f153da6282bee3d",
        "type": "exec",
        "z": "797d9b2a7151f089",
        "g": "5426475307091e39",
        "command": "sudo systemctl restart mosquitto",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Mosquitto restart",
        "x": 590,
        "y": 820,
        "wires": [
            [
                "a19214ca2cfc9795"
            ],
            [
                "a19214ca2cfc9795"
            ],
            []
        ]
    },
    {
        "id": "0f27b5b866c9b4a4",
        "type": "rbe",
        "z": "797d9b2a7151f089",
        "g": "70160f0a7636882f",
        "name": "Vérifier statut",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "status",
        "topi": "topic",
        "x": 370,
        "y": 670,
        "wires": [
            [
                "375f5d90204152ea",
                "2298e5a1f57713dc"
            ]
        ]
    },
    {
        "id": "b06e8d799cfe5b7e",
        "type": "delay",
        "z": "797d9b2a7151f089",
        "g": "5426475307091e39",
        "name": "Delay Restart",
        "pauseType": "delayv",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 370,
        "y": 810,
        "wires": [
            [
                "3f153da6282bee3d"
            ]
        ]
    },
    {
        "id": "a19214ca2cfc9795",
        "type": "debug",
        "z": "797d9b2a7151f089",
        "g": "5426475307091e39",
        "name": "debug 182",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 820,
        "wires": []
    },
    {
        "id": "1e15606728d3ede4",
        "type": "inject",
        "z": "797d9b2a7151f089",
        "g": "5426475307091e39",
        "name": "Restart",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 390,
        "y": 850,
        "wires": [
            [
                "3f153da6282bee3d"
            ]
        ]
    },
    {
        "id": "e1f758553dcda8db",
        "type": "inject",
        "z": "797d9b2a7151f089",
        "g": "70160f0a7636882f",
        "name": "Green",
        "props": [
            {
                "p": "status",
                "v": "{\"fill\":\"green\",\"shape\":\"dot\",\"text\":\"node-red:common.status.connected\",\"source\":{\"id\":\"68020bb809a9d64b\",\"type\":\"mqtt in\"}}",
                "vt": "json"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 160,
        "y": 770,
        "wires": [
            [
                "0f27b5b866c9b4a4"
            ]
        ]
    },
    {
        "id": "2298e5a1f57713dc",
        "type": "debug",
        "z": "797d9b2a7151f089",
        "g": "70160f0a7636882f",
        "name": "debug 183",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 630,
        "wires": []
    },
    {
        "id": "8064670dc96dfa2d",
        "type": "inject",
        "z": "797d9b2a7151f089",
        "g": "70160f0a7636882f",
        "name": "Red",
        "props": [
            {
                "p": "status",
                "v": "{\"fill\":\"red\",\"shape\":\"ring\",\"text\":\"node-red:common.status.disconnected\",\"source\":{\"id\":\"68020bb809a9d64b\",\"type\":\"mqtt in\"}}",
                "vt": "json"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 160,
        "y": 740,
        "wires": [
            [
                "0f27b5b866c9b4a4"
            ]
        ]
    },
    {
        "id": "4e4b504034ad202f",
        "type": "inject",
        "z": "797d9b2a7151f089",
        "g": "70160f0a7636882f",
        "name": "Yellow",
        "props": [
            {
                "p": "status",
                "v": "{\"fill\":\"yellow\",\"shape\":\"ring\",\"text\":\"node-red:common.status.connecting\",\"source\":{\"id\":\"68020bb809a9d64b\",\"type\":\"mqtt in\"}}",
                "vt": "json"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 160,
        "y": 710,
        "wires": [
            [
                "0f27b5b866c9b4a4"
            ]
        ]
    },
    {
        "id": "b261acdf1fd36081",
        "type": "mqtt in",
        "z": "797d9b2a7151f089",
        "g": "5d89e93885229fe1",
        "name": "",
        "topic": "dom-sys.gw/status",
        "qos": "0",
        "datatype": "auto",
        "broker": "c6a29fab98717cbb",
        "nl": false,
        "rap": false,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 1160,
        "wires": [
            [
                "2105846b8c12cb48"
            ]
        ]
    },
    {
        "id": "2105846b8c12cb48",
        "type": "function",
        "z": "797d9b2a7151f089",
        "g": "5d89e93885229fe1",
        "name": "Dispatcher",
        "func": "\nswitch (msg.payload) {\n    case \"IM_ALIVE\":\n        //on ne log pas ce message\n        return [msg, null, null];\n        break;\n    case \"GATEWAY_START\":\n    case \"GATEWAY_RESTART\":\n        msg.params = {\n            $EventType: msg.payload,\n            $EventData: \"\"\n        }\n        return [msg, msg, null];\n        break;\n    default:\n        msgInconnu();\n}\n\n\nfunction msgInconnu() {\n    msg.topic = \"Passerelle\"\n    msg.payload = \"Message statut inconnu: \" + msg.payload;\n    return [null, null, msg];\n}\n",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 1160,
        "wires": [
            [
                "9bb6a0be709aef65",
                "58258ca1cbedc8f2"
            ],
            [],
            []
        ],
        "outputLabels": [
            "IM_ALIVE",
            "TO LOG",
            "INCONNU"
        ]
    },
    {
        "id": "58258ca1cbedc8f2",
        "type": "debug",
        "z": "797d9b2a7151f089",
        "g": "5d89e93885229fe1",
        "name": "debug 184",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 1100,
        "wires": []
    },
    {
        "id": "8023d15b2d55ccda",
        "type": "inject",
        "z": "797d9b2a7151f089",
        "g": "5d89e93885229fe1",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "IM_ALIVE",
        "payloadType": "str",
        "x": 180,
        "y": 1120,
        "wires": [
            [
                "2105846b8c12cb48"
            ]
        ]
    },
    {
        "id": "d54da9e0b749cd05",
        "type": "comment",
        "z": "f178d5dee9c95e1e",
        "g": "82315bf5181c153a",
        "name": "Backup SENSOR_TEMPERATURE",
        "info": "",
        "x": 200,
        "y": 60,
        "wires": []
    },
    {
        "id": "798ffc9e016269b2",
        "type": "sqlite",
        "z": "f178d5dee9c95e1e",
        "g": "82315bf5181c153a",
        "mydb": "628739f370d1726d",
        "sqlquery": "fixed",
        "sql": "DELETE FROM SENSOR_TEMPERATURE_BK\n where  datetime < datetime('now', 'localtime', '-700 days');\n",
        "name": "Purge BK",
        "x": 300,
        "y": 100,
        "wires": [
            [
                "bde4a4eb4ecc2c4b"
            ]
        ]
    },
    {
        "id": "bdde4536ecd2cd3b",
        "type": "inject",
        "z": "f178d5dee9c95e1e",
        "g": "82315bf5181c153a",
        "name": "Backup",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 00 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 100,
        "wires": [
            [
                "798ffc9e016269b2"
            ]
        ]
    },
    {
        "id": "bde4a4eb4ecc2c4b",
        "type": "sqlite",
        "z": "f178d5dee9c95e1e",
        "g": "82315bf5181c153a",
        "mydb": "628739f370d1726d",
        "sqlquery": "fixed",
        "sql": "INSERT INTO SENSOR_TEMPERATURE_BK \n    SELECT *\n    FROM SENSOR_TEMPERATURE\n    WHERE id_sensor_data > \n        (SELECT CASE WHEN max(id_sensor_data) \n            IS NULL THEN 0 ELSE max(id_sensor_data) END\n        FROM SENSOR_TEMPERATURE_BK);",
        "name": "Copy data to BK",
        "x": 480,
        "y": 100,
        "wires": [
            [
                "719f22c2cd97bccb",
                "453ffd1c35c1e04b"
            ]
        ]
    },
    {
        "id": "0814428a1abfd17a",
        "type": "inject",
        "z": "f178d5dee9c95e1e",
        "g": "82315bf5181c153a",
        "name": "Optimiser le data",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "01 00 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 200,
        "wires": [
            [
                "453ffd1c35c1e04b"
            ]
        ]
    },
    {
        "id": "453ffd1c35c1e04b",
        "type": "sqlite",
        "z": "f178d5dee9c95e1e",
        "g": "82315bf5181c153a",
        "mydb": "628739f370d1726d",
        "sqlquery": "fixed",
        "sql": "SELECT *\nFROM SENSOR_TEMPERATURE\nwhere  datetime < datetime('now', 'localtime', '-2 days')\n-- WHERE id_sensor = 5\norder by id_sensor, datetime ;",
        "name": "SELECT TEMPERATURE",
        "x": 410,
        "y": 200,
        "wires": [
            [
                "12915a94e841aa51"
            ]
        ]
    },
    {
        "id": "12915a94e841aa51",
        "type": "function",
        "z": "f178d5dee9c95e1e",
        "g": "82315bf5181c153a",
        "name": "Filtrer ",
        "func": "\nlet lastDataKept = {};\nmsg.toKeep = [];\nmsg.toDelete = [];\nlet msg1 = {};\n\nmsg.payload.forEach(function (data) {\n    if (Math.abs(data.temperature - lastDataKept.temperature) < 0.4) {\n        msg.toDelete.push(data.id_sensor_data);\n        msg1.params = {\n            $id_sensor_data: data.id_sensor_data\n        }\n        node.send([msg1, null]\n);\n    } else {\n        lastDataKept = data;\n        msg.toKeep.push(data);\n    }\n});\n\nreturn [null, msg]\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 200,
        "wires": [
            [
                "4aa2a4f5c888b257",
                "ccfde0c94ee7c74c"
            ],
            [
                "7fc28496b2413508"
            ]
        ],
        "info": "On conserve seulement les écarts de .4 degré entre deux données consécutives."
    },
    {
        "id": "4aa2a4f5c888b257",
        "type": "debug",
        "z": "f178d5dee9c95e1e",
        "g": "82315bf5181c153a",
        "name": "debug 120",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 140,
        "wires": []
    },
    {
        "id": "ccfde0c94ee7c74c",
        "type": "sqlite",
        "z": "f178d5dee9c95e1e",
        "g": "82315bf5181c153a",
        "mydb": "628739f370d1726d",
        "sqlquery": "prepared",
        "sql": "DELETE FROM SENSOR_TEMPERATURE\nWHERE id_sensor_data = $id_sensor_data",
        "name": "Delete data",
        "x": 770,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "719f22c2cd97bccb",
        "type": "debug",
        "z": "f178d5dee9c95e1e",
        "g": "82315bf5181c153a",
        "name": "debug 122",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 100,
        "wires": []
    },
    {
        "id": "36fe564307c47f87",
        "type": "comment",
        "z": "f178d5dee9c95e1e",
        "g": "82315bf5181c153a",
        "name": "Détruit les données de plus de 2 jours ayant un écart < .4",
        "info": "",
        "x": 270,
        "y": 160,
        "wires": []
    },
    {
        "id": "a087fa5b04e2ed6a",
        "type": "exec",
        "z": "f178d5dee9c95e1e",
        "g": "37395d53ca3ec675",
        "command": "./nodered.sh",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Backup BD",
        "x": 340,
        "y": 930,
        "wires": [
            [
                "e9797086d33dca62"
            ],
            [
                "e9f063af5b3dbd3d"
            ],
            [
                "497d93111671d420"
            ]
        ],
        "info": "Lance le script 'nodered.sh' sur le serveur."
    },
    {
        "id": "e9f063af5b3dbd3d",
        "type": "debug",
        "z": "f178d5dee9c95e1e",
        "g": "37395d53ca3ec675",
        "name": "debug 124",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 930,
        "wires": []
    },
    {
        "id": "497d93111671d420",
        "type": "debug",
        "z": "f178d5dee9c95e1e",
        "g": "37395d53ca3ec675",
        "name": "debug 125",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 970,
        "wires": []
    },
    {
        "id": "571f0fb3a0c1cb2f",
        "type": "inject",
        "z": "f178d5dee9c95e1e",
        "g": "37395d53ca3ec675",
        "name": "Backup",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 09 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 930,
        "wires": [
            [
                "a087fa5b04e2ed6a"
            ]
        ]
    },
    {
        "id": "e9797086d33dca62",
        "type": "function",
        "z": "f178d5dee9c95e1e",
        "g": "37395d53ca3ec675",
        "name": "Résultat du script",
        "func": "msg.backup = JSON.parse(msg.payload);\n\nmsg.backup.forEach(function (value) {\n    let date = new Date(value.date);\n     value.date = String(date.getMonth()+1).padStart(2, '0') \n        + \"/\" + String(date.getDate()).padStart(2, '0') + \" \" \n        + date.getHours() + \":\" +  String(date.getMinutes()).padStart(2, '0');\n});\n\nlet date = new Date();\n\nmsg.date = String(date.getMonth()+1).padStart(2, '0') \n        + \"/\" + String(date.getDate()).padStart(2, '0') + \" \" \n        + date.getHours() + \":\" +  String(date.getMinutes()).padStart(2, '0');\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 890,
        "wires": [
            [
                "56c53ee58ee22f0a",
                "f94259e3284b277c"
            ]
        ]
    },
    {
        "id": "7fc28496b2413508",
        "type": "debug",
        "z": "f178d5dee9c95e1e",
        "g": "82315bf5181c153a",
        "name": "debug 131",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 240,
        "wires": []
    },
    {
        "id": "074648f75d87c22c",
        "type": "sqlite",
        "z": "f178d5dee9c95e1e",
        "g": "429317fe9e4bcd87",
        "mydb": "628739f370d1726d",
        "sqlquery": "fixed",
        "sql": "SELECT id_sensor, mac, counter,  max(datetime ) as datetime\nFROM DATA_VIEW\nwhere  datetime > datetime('now', 'localtime', '-10 hours')\ngroup by id_sensor\norder by id_sensor, datetime ;",
        "name": "Most recent data temperature",
        "x": 330,
        "y": 1170,
        "wires": [
            [
                "02a13a4670cc3b6d",
                "3517ba53be3b782f"
            ]
        ]
    },
    {
        "id": "02a13a4670cc3b6d",
        "type": "debug",
        "z": "f178d5dee9c95e1e",
        "g": "429317fe9e4bcd87",
        "name": "debug 143",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 1170,
        "wires": []
    },
    {
        "id": "57b46483de958a15",
        "type": "inject",
        "z": "f178d5dee9c95e1e",
        "g": "429317fe9e4bcd87",
        "name": "Inject",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 1170,
        "wires": [
            [
                "074648f75d87c22c"
            ]
        ]
    },
    {
        "id": "3517ba53be3b782f",
        "type": "function",
        "z": "f178d5dee9c95e1e",
        "g": "429317fe9e4bcd87",
        "name": "Vérification du délai",
        "func": "//Envoi une alerte à l'écran si les données ne sont pas reçues \n//  dans un délai acceptable.\nconst devicesMap = global.get('devicesMap');\n\nvar devices = [];\nlet data = msg.payload;\nmsg.payload = \"Àrevoir --> Vérification des délais.\\n \";\n\ndata.forEach(function (element) {\n  let device = devicesMap.get(element.mac);\n  if (device.sleep_duration > 0) {\n    let dateNow = new Date();\n    let datetime = new Date(element.datetime);\n    let diff = (dateNow.getTime() - datetime.getTime()) / 1000;\n    //Si on dépasse le temps de sleep + 5 minutes.\n    if (diff > (device.sleep_duration + (5 * 60))) {\n      msg.payload = msg.payload + \" -- Délai de réception dépassé. \" + device.mac + \"\\n\\r\";\n      console.log(\"Now:\" + dateNow + \n        \" - Last received:\" + datetime +\n        \"diff: \" + diff);\n      console.log(msg.payload);\n    }\n  }\n});\n\nif (msg.payload != \"\") {\n   if(msg.payload != \"\"){\n    node.log(\"Alert Device: \" + msg.payload);\n    return msg;\n  }\n}\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1250,
        "wires": [
            [
                "ab844b65273cf9b7"
            ]
        ]
    },
    {
        "id": "ab844b65273cf9b7",
        "type": "ui-notification",
        "z": "f178d5dee9c95e1e",
        "g": "429317fe9e4bcd87",
        "ui": "d4c9d9e9b37824ea",
        "position": "top right",
        "colorDefault": true,
        "color": "#000000",
        "displayTime": "3",
        "showCountdown": true,
        "outputs": 0,
        "allowDismiss": true,
        "dismissText": "Close",
        "raw": false,
        "className": "",
        "name": "",
        "x": 750,
        "y": 1250,
        "wires": []
    },
    {
        "id": "798c8432df02e379",
        "type": "sqlite",
        "z": "f178d5dee9c95e1e",
        "g": "836f1c5e6a99b853",
        "mydb": "628739f370d1726d",
        "sqlquery": "fixed",
        "sql": "delete FROM SYSTEM_LOG\nwhere  datetime < datetime('now', 'localtime', '-2 days')",
        "name": "Delete SYS_LOG > 2 jours",
        "x": 710,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "1f65d9d6029c1383",
        "type": "inject",
        "z": "f178d5dee9c95e1e",
        "g": "836f1c5e6a99b853",
        "name": "Ménage SYSLOG",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 09 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 660,
        "wires": [
            [
                "f71406035e082c3c"
            ]
        ]
    },
    {
        "id": "e9d695451b8cd4d1",
        "type": "inject",
        "z": "f178d5dee9c95e1e",
        "g": "836f1c5e6a99b853",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 750,
        "wires": [
            [
                "bd7fea0d471990a7"
            ]
        ]
    },
    {
        "id": "267b2d2e30b9fb61",
        "type": "sqlite",
        "z": "f178d5dee9c95e1e",
        "g": "836f1c5e6a99b853",
        "mydb": "628739f370d1726d",
        "sqlquery": "fixed",
        "sql": "delete FROM SYSTEM_LOG\n WHERE id_device = 3",
        "name": "Delete SYS_LOG id_device = 3",
        "x": 690,
        "y": 750,
        "wires": [
            []
        ]
    },
    {
        "id": "f71406035e082c3c",
        "type": "sqlite",
        "z": "f178d5dee9c95e1e",
        "g": "836f1c5e6a99b853",
        "mydb": "628739f370d1726d",
        "sqlquery": "fixed",
        "sql": "SELECT count(*)\nFROM SYSTEM_LOG\nwhere  datetime < datetime('now', 'localtime', '-2 days')",
        "name": "Count Delete SYS_LOG ",
        "x": 440,
        "y": 660,
        "wires": [
            [
                "80653104c09f9d63",
                "798c8432df02e379"
            ]
        ]
    },
    {
        "id": "80653104c09f9d63",
        "type": "debug",
        "z": "f178d5dee9c95e1e",
        "g": "836f1c5e6a99b853",
        "name": "debug 146",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 710,
        "wires": []
    },
    {
        "id": "bd7fea0d471990a7",
        "type": "sqlite",
        "z": "f178d5dee9c95e1e",
        "g": "836f1c5e6a99b853",
        "mydb": "628739f370d1726d",
        "sqlquery": "fixed",
        "sql": "SELECT count(*)\nFROM SYSTEM_LOG\n WHERE id_device = 3\n-- where  datetime < datetime('now', 'localtime', '-2 days')",
        "name": "Count Delete SYS_LOG ",
        "x": 400,
        "y": 750,
        "wires": [
            [
                "267b2d2e30b9fb61",
                "80653104c09f9d63"
            ]
        ]
    },
    {
        "id": "fab8a6f816b520df",
        "type": "sqlite",
        "z": "f178d5dee9c95e1e",
        "g": "39f5d1f224b9de66",
        "mydb": "628739f370d1726d",
        "sqlquery": "fixed",
        "sql": "DELETE FROM TEMPERATURE_EXTERNE_BK\n where  datetime < datetime('now', 'localtime', '-700 days');\n",
        "name": "Purge BK",
        "x": 310,
        "y": 380,
        "wires": [
            [
                "f42a210a627d4892"
            ]
        ]
    },
    {
        "id": "c044209948e618c4",
        "type": "comment",
        "z": "f178d5dee9c95e1e",
        "g": "39f5d1f224b9de66",
        "name": "Backup SENSOR_TEMPERATURE",
        "info": "",
        "x": 210,
        "y": 340,
        "wires": []
    },
    {
        "id": "8672f704d063ce96",
        "type": "inject",
        "z": "f178d5dee9c95e1e",
        "g": "39f5d1f224b9de66",
        "name": "Backup",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 00 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 380,
        "wires": [
            [
                "fab8a6f816b520df"
            ]
        ]
    },
    {
        "id": "f42a210a627d4892",
        "type": "sqlite",
        "z": "f178d5dee9c95e1e",
        "g": "39f5d1f224b9de66",
        "mydb": "628739f370d1726d",
        "sqlquery": "fixed",
        "sql": "INSERT INTO TEMPERATURE_EXTERNE_BK \n    SELECT *\n    FROM TEMPERATURE_EXTERNE\n    -- Récupération des données dont le ID > MaxId du backup\n    WHERE id_temp_externe > \n        (SELECT CASE WHEN max(id_temp_externe) \n            IS NULL THEN 0 ELSE max(id_temp_externe) END\n        FROM TEMPERATURE_EXTERNE_BK);",
        "name": "Copy data to BK",
        "x": 490,
        "y": 380,
        "wires": [
            [
                "3fe8d56b817b414a",
                "f47d039d1dd75fac"
            ]
        ]
    },
    {
        "id": "fbf0991c6a35cb15",
        "type": "inject",
        "z": "f178d5dee9c95e1e",
        "g": "39f5d1f224b9de66",
        "name": "Optimiser le data",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "01 00 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 480,
        "wires": [
            [
                "f47d039d1dd75fac"
            ]
        ]
    },
    {
        "id": "f47d039d1dd75fac",
        "type": "sqlite",
        "z": "f178d5dee9c95e1e",
        "g": "39f5d1f224b9de66",
        "mydb": "628739f370d1726d",
        "sqlquery": "fixed",
        "sql": "SELECT *\nFROM TEMPERATURE_EXTERNE\nwhere  datetime < datetime('now', 'localtime', '-2 days')\norder by datetime asc;",
        "name": "SELECT TEMPERATURE",
        "x": 420,
        "y": 480,
        "wires": [
            [
                "ac605ca570a82bf0"
            ]
        ]
    },
    {
        "id": "ac605ca570a82bf0",
        "type": "function",
        "z": "f178d5dee9c95e1e",
        "g": "39f5d1f224b9de66",
        "name": "Filtrer ",
        "func": "\nlet lastDataKept = {};\nmsg.toKeep = [];\nmsg.toDelete = [];\nlet msg1 = {};\n\nmsg.payload.forEach(function (data) {\n    if (Math.abs(data.temperature - lastDataKept.temperature) < 1) {\n        msg.toDelete.push(data.id_temp_externe);\n        msg1.params = {\n            $id_temp_externe: data.id_temp_externe\n        }\n        node.send([msg1, null]\n);\n    } else {\n        lastDataKept = data;\n        msg.toKeep.push(data);\n    }\n});\n\nreturn [null, msg]\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 480,
        "wires": [
            [
                "8305de33a78a638d",
                "f75951de629e39ef"
            ],
            [
                "408b96d47f5f0cce"
            ]
        ],
        "info": "On conserve seulement les écarts de .4 degré entre deux données consécutives."
    },
    {
        "id": "8305de33a78a638d",
        "type": "debug",
        "z": "f178d5dee9c95e1e",
        "g": "39f5d1f224b9de66",
        "name": "debug 165",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 420,
        "wires": []
    },
    {
        "id": "f75951de629e39ef",
        "type": "sqlite",
        "z": "f178d5dee9c95e1e",
        "g": "39f5d1f224b9de66",
        "mydb": "628739f370d1726d",
        "sqlquery": "prepared",
        "sql": "DELETE FROM TEMPERATURE_EXTERNE\nWHERE id_temp_externe = $id_temp_externe",
        "name": "Delete data",
        "x": 780,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "3fe8d56b817b414a",
        "type": "debug",
        "z": "f178d5dee9c95e1e",
        "g": "39f5d1f224b9de66",
        "name": "debug 166",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 380,
        "wires": []
    },
    {
        "id": "513935f0533c6b43",
        "type": "comment",
        "z": "f178d5dee9c95e1e",
        "g": "39f5d1f224b9de66",
        "name": "Détruit les données de plus de 2 jours ayant un écart < .4",
        "info": "",
        "x": 280,
        "y": 440,
        "wires": []
    },
    {
        "id": "408b96d47f5f0cce",
        "type": "debug",
        "z": "f178d5dee9c95e1e",
        "g": "39f5d1f224b9de66",
        "name": "debug 167",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 520,
        "wires": []
    },
    {
        "id": "56c53ee58ee22f0a",
        "type": "debug",
        "z": "f178d5dee9c95e1e",
        "g": "37395d53ca3ec675",
        "name": "debug 168",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 930,
        "wires": []
    },
    {
        "id": "9abd8010c264a120",
        "type": "function",
        "z": "f178d5dee9c95e1e",
        "g": "37395d53ca3ec675",
        "name": "function 21",
        "func": "msg.payload ='[ '\n+'{\\\"type\\\":\\\"SOURCE\\\",\\\"name\\\":\\\"nodered.db\\\",\\\"date\\\":\\\"2024-04-05T12:29:34\\\",\\\"size\\\":\\\"1150976\\\" },'\n+'{\\\"type\\\":\\\"SQL\\\",\\\"name\\\":\\\"nodered.bk.sql.gz\\\",\\\"date\\\":\\\"2024-04-05T17:07:23\\\",\\\"size\\\":\\\"56067\\\" },'\n+'{\\\"type\\\":\\\"BACKUP_BIN\\\",\\\"name\\\":\\\"nodered.bk.db\\\",\\\"date\\\":\\\"2024-04-05T17:07:23\\\",\\\"size\\\":\\\"1150976\\\" }]'\n\n\nmsg.backup = JSON.parse(msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 307,
        "y": 861,
        "wires": [
            []
        ]
    },
    {
        "id": "d8da1221bf37f16a",
        "type": "inject",
        "z": "f178d5dee9c95e1e",
        "g": "37395d53ca3ec675",
        "name": "Test",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 157,
        "y": 861,
        "wires": [
            [
                "9abd8010c264a120"
            ]
        ]
    },
    {
        "id": "f94259e3284b277c",
        "type": "ui-template",
        "z": "f178d5dee9c95e1e",
        "g": "37395d53ca3ec675",
        "group": "336cf0cb878743a0",
        "page": "",
        "ui": "",
        "name": "Backup BD",
        "order": 1,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n  <v-card title=\"Rapport du script 'nodered.sh'\" :text=\"dateNow\" flat> </v-card>\n  <v-data-table  :headers=\"headers\" \n    :items=\"resultats\"  items-per-page=\"10\"\n    density=\"compact\"\n    select-strategy=\"page\"  \n    >\n   \n    <template v-slot:bottom>\n      <div class=\"text-center pt-2\">\n        <v-pagination :length=\"pageCount\"></v-pagination>\n      </div>\n    </template>\n  </v-data-table>\n</template>\n\n<script>\n  export default {\n\n    data: () => ({\n      \n      selected: [],\n      dateNow: \"\",\n      headers: [\n        { title: 'Type', sortable: false, maxWidth:1, key: 'type' },\n        { title: 'name', key: 'name', maxWidth:2, sortable: false},\n        { title: 'date', key: 'date', maxWidth:1, sortable: false},\n        { title: 'size', key: 'size', maxWidth:1, sortable: false},\n      ],\n      resultats: [],\n    }),\n\n    watch: {\n       msg: function(){\n        this.resultats = this.msg.backup;\n        this.dateNow = this.msg.date;\n      },\n      \n    },\n    \n    computed: {\n      pageCount() {\n        return Math.ceil(this.resultats.length / this.itemsPerPage)\n      },\n    },\n  \n  }\n</script>",
        "storeOutMessages": true,
        "passthru": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 740,
        "y": 890,
        "wires": [
            []
        ]
    },
    {
        "id": "7f206d7175eeb9c6",
        "type": "inject",
        "z": "a9c9090b.478498",
        "d": true,
        "g": "49aed5c6020fd230",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 180,
        "wires": [
            [
                "db981d4c910296e4"
            ]
        ]
    },
    {
        "id": "db981d4c910296e4",
        "type": "function",
        "z": "a9c9090b.478498",
        "d": true,
        "g": "49aed5c6020fd230",
        "name": "function 20",
        "func": "msg.payload = [\n          {\n            name: 'Frozen Yogurt',\n            calories: 159,\n            fat: 6.0,\n            carbs: 24,\n            protein: 4.0,\n            iron: 1,\n          },\n          {\n            name: 'Ice cream sandwich',\n            calories: 237,\n            fat: 9.0,\n            carbs: 37,\n            protein: 4.3,\n            iron: 1,\n          },\n          {\n            name: 'Eclair',\n            calories: 262,\n            fat: 16.0,\n            carbs: 23,\n            protein: 6.0,\n            iron: 7,\n          },\n          {\n            name: 'Cupcake',\n            calories: 305,\n            fat: 3.7,\n            carbs: 67,\n            protein: 4.3,\n            iron: 8,\n          },\n          {\n            name: 'Gingerbread',\n            calories: 356,\n            fat: 16.0,\n            carbs: 49,\n            protein: 3.9,\n            iron: 16,\n          },\n          {\n            name: 'Jelly bean',\n            calories: 375,\n            fat: 0.0,\n            carbs: 94,\n            protein: 0.0,\n            iron: 0,\n          },\n          {\n            name: 'Lollipop',\n            calories: 392,\n            fat: 0.2,\n            carbs: 98,\n            protein: 0,\n            iron: 2,\n          },\n          {\n            name: 'Honeycomb',\n            calories: 408,\n            fat: 3.2,\n            carbs: 87,\n            protein: 6.5,\n            iron: 45,\n          },\n          {\n            name: 'Donut',\n            calories: 452,\n            fat: 25.0,\n            carbs: 51,\n            protein: 4.9,\n            iron: 22,\n          },\n          {\n            name: 'KitKat',\n            calories: 518,\n            fat: 26.0,\n            carbs: 65,\n            protein: 7,\n            iron: 6,\n          }\n        ];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 170,
        "wires": [
            [
                "b73ee2792d4f5473"
            ]
        ]
    },
    {
        "id": "50cc735154d103a3",
        "type": "catch",
        "z": "a9c9090b.478498",
        "d": true,
        "g": "49aed5c6020fd230",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 140,
        "y": 350,
        "wires": [
            [
                "987a44bd9a6154e7"
            ]
        ]
    },
    {
        "id": "987a44bd9a6154e7",
        "type": "debug",
        "z": "a9c9090b.478498",
        "d": true,
        "g": "49aed5c6020fd230",
        "name": "debug 148",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 310,
        "y": 350,
        "wires": []
    },
    {
        "id": "b73ee2792d4f5473",
        "type": "ui-template",
        "z": "a9c9090b.478498",
        "d": true,
        "g": "49aed5c6020fd230",
        "group": "5b69d242410edd23",
        "page": "",
        "ui": "",
        "name": "TEST Alert",
        "order": 4,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n    <!-- Any HTML can go here -->\n    <button class=\"my-class\" onclick=\"onClick1()\">TEST Alert</button>\n</template>\n\n<script>\n   // export default {\n  //  data: () => ({\n      \n     \n  //  }),\n      /* Write any JavaScript here */\n    // add our onClick function to the window object to make it accessible by the HTML <button>\n    window.onClick1 = function () {\n        alert('Button has been clicked')\n    }\n\n    // Use send() function to pass on data back into Node-RED:\n    this.send('Component has loaded')\n\n    // Subscribe to the incoming msg's\n    this.$socket.on('msg-input:' + this.id, function(msg) {\n        // do stuff with the message\n        alert('BT1 message received: ' + msg.payload)\n    })\n //   }\n</script>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 590,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "47f5073909bee0a2",
        "type": "ui-template",
        "z": "a9c9090b.478498",
        "d": true,
        "g": "49aed5c6020fd230",
        "group": "5b69d242410edd23",
        "page": "",
        "ui": "",
        "name": "Bouton barre du haut",
        "order": 2,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n    <Teleport v-if=\"mounted\" to=\"#app-bar-actions\">\n        <v-btn>My Action</v-btn>\n    </Teleport>\n</template>\n<script>\n    export default {\n        data() {\n            return {\n                mounted: false\n            }\n        },\n        mounted() {\n            this.mounted = true\n        }\n    }\n</script>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 260,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "993a1d17b68cf824",
        "type": "restart",
        "z": "a9c9090b.478498",
        "d": true,
        "name": "",
        "x": 480,
        "y": 500,
        "wires": []
    },
    {
        "id": "33160e7dad384fd2",
        "type": "inject",
        "z": "a9c9090b.478498",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 260,
        "y": 500,
        "wires": [
            [
                "993a1d17b68cf824",
                "355572eae47bb5b8"
            ]
        ]
    },
    {
        "id": "7be8e9a5f812950b",
        "type": "rpi-mouse",
        "z": "a9c9090b.478498",
        "name": "",
        "butt": "1",
        "x": 320,
        "y": 610,
        "wires": [
            []
        ]
    },
    {
        "id": "db405b3a31072f48",
        "type": "rpi-gpio out",
        "z": "a9c9090b.478498",
        "d": true,
        "name": "",
        "pin": "14",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 780,
        "y": 610,
        "wires": []
    },
    {
        "id": "355572eae47bb5b8",
        "type": "shutdown",
        "z": "a9c9090b.478498",
        "name": "",
        "x": 490,
        "y": 450,
        "wires": []
    },
    {
        "id": "ecbccd54980ecba4",
        "type": "rpi-gpio in",
        "z": "a9c9090b.478498",
        "d": true,
        "name": "",
        "pin": "15",
        "intype": "tri",
        "debounce": "25",
        "read": false,
        "bcm": true,
        "x": 470,
        "y": 670,
        "wires": [
            []
        ]
    },
    {
        "id": "67442326259348aa",
        "type": "debug",
        "z": "a9c9090b.478498",
        "name": "debug 175",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 680,
        "wires": []
    },
    {
        "id": "b8120943ca5fc8c3",
        "type": "inject",
        "z": "a9c9090b.478498",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Test",
        "payloadType": "str",
        "x": 540,
        "y": 610,
        "wires": [
            [
                "990b0579b542c758"
            ]
        ]
    },
    {
        "id": "9d011191721fd81a",
        "type": "serial in",
        "z": "a9c9090b.478498",
        "d": true,
        "name": "",
        "serial": "338b8e1916d50651",
        "x": 540,
        "y": 730,
        "wires": [
            [
                "67442326259348aa"
            ]
        ]
    },
    {
        "id": "990b0579b542c758",
        "type": "serial out",
        "z": "a9c9090b.478498",
        "d": true,
        "name": "",
        "serial": "338b8e1916d50651",
        "x": 830,
        "y": 530,
        "wires": []
    },
    {
        "id": "6079638d.df403c",
        "type": "inject",
        "z": "a9c9090b.478498",
        "name": "",
        "props": [
            {
                "p": "payload",
                "v": "0",
                "vt": "num"
            },
            {
                "p": "topic",
                "v": "",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 160,
        "y": 810,
        "wires": [
            [
                "87129503.c7b358"
            ]
        ]
    },
    {
        "id": "87129503.c7b358",
        "type": "rbe",
        "z": "a9c9090b.478498",
        "name": "report-by-exception",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 370,
        "y": 830,
        "wires": [
            [
                "5e2ffc27.c61dd4"
            ]
        ]
    },
    {
        "id": "5e2ffc27.c61dd4",
        "type": "debug",
        "z": "a9c9090b.478498",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 580,
        "y": 830,
        "wires": []
    },
    {
        "id": "2dc49f96.3070c",
        "type": "inject",
        "z": "a9c9090b.478498",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 160,
        "y": 850,
        "wires": [
            [
                "87129503.c7b358"
            ]
        ]
    },
    {
        "id": "6523e86042252710",
        "type": "inject",
        "z": "97407293d780965c",
        "name": "",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 300,
        "y": 210,
        "wires": [
            []
        ]
    },
    {
        "id": "ba84cd1820120139",
        "type": "debug",
        "z": "97407293d780965c",
        "name": "debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 210,
        "wires": []
    },
    {
        "id": "b4f0eb085cc91834",
        "type": "change",
        "z": "97407293d780965c",
        "name": "Get the chart data from flow.chart-data",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "chart-data",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 590,
        "y": 330,
        "wires": [
            []
        ]
    },
    {
        "id": "d13d16b33ec638b2",
        "type": "inject",
        "z": "97407293d780965c",
        "name": "import data",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[{\"series\":[\"1234\"],\"data\":[[{\"x\":1684841975036,\"y\":8},{\"x\":1684841976037,\"y\":6},{\"x\":1684841977038,\"y\":7},{\"x\":1684841978037,\"y\":7}]],\"labels\":[\"test\"]}]",
        "payloadType": "json",
        "x": 320,
        "y": 270,
        "wires": [
            []
        ]
    },
    {
        "id": "73d33be37d3e6847",
        "type": "ui-chart",
        "z": "97407293d780965c",
        "d": true,
        "group": "5b69d242410edd23",
        "name": "",
        "label": "chart",
        "order": 5,
        "chartType": "line",
        "category": "topic",
        "categoryType": "msg",
        "xAxisProperty": "",
        "xAxisPropertyType": "msg",
        "xAxisType": "time",
        "yAxisProperty": "y",
        "ymin": "",
        "ymax": "",
        "action": "replace",
        "pointShape": "circle",
        "pointRadius": 4,
        "showLegend": true,
        "removeOlder": 1,
        "removeOlderUnit": "3600",
        "removeOlderPoints": "",
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "width": 6,
        "height": 8,
        "className": "",
        "x": 540,
        "y": 220,
        "wires": [
            [
                "ba84cd1820120139"
            ]
        ]
    },
    {
        "id": "b34a98c0fbb03d27",
        "type": "inject",
        "z": "97407293d780965c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[{\"series\":[\"A\"]},{\"data\":[[{\"x\":\"2023-10-23\",\"y\":28},{\"x\":\"2023-10-24\",\"y\":26},{\"x\":\"2023-10-25\",\"y\":27}]]}]",
        "payloadType": "json",
        "x": 320,
        "y": 340,
        "wires": [
            [
                "73d33be37d3e6847"
            ]
        ]
    },
    {
        "id": "a2f995178c04da12",
        "type": "ui-markdown",
        "z": "97407293d780965c",
        "group": "5b69d242410edd23",
        "name": "",
        "order": 3,
        "width": 0,
        "height": 0,
        "content": "# Markdown Content\n\nGoes here...",
        "className": "",
        "x": 310,
        "y": 470,
        "wires": [
            []
        ]
    },
    {
        "id": "3275df79b545312c",
        "type": "ui-table",
        "z": "97407293d780965c",
        "group": "5b69d242410edd23",
        "name": "Teable",
        "label": "text",
        "order": 1,
        "width": 0,
        "height": 0,
        "maxrows": 0,
        "passthru": false,
        "autocols": true,
        "selectionType": "checkbox",
        "columns": [],
        "x": 570,
        "y": 80,
        "wires": [
            [
                "f6fea65c26a21581"
            ]
        ]
    },
    {
        "id": "f6fea65c26a21581",
        "type": "debug",
        "z": "97407293d780965c",
        "name": "debug 179",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 150,
        "wires": []
    },
    {
        "id": "1a072bbe9d05514f",
        "type": "inject",
        "z": "97407293d780965c",
        "name": "Setup",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 90,
        "wires": [
            [
                "e9f2489b1b98c0b8"
            ]
        ]
    },
    {
        "id": "e9f2489b1b98c0b8",
        "type": "sqlite",
        "z": "97407293d780965c",
        "mydb": "628739f370d1726d",
        "sqlquery": "fixed",
        "sql": "SELECT DE.id_device,\n       DE.mac,\n       DE.location,\n       SE.id_sensor\n  FROM DEVICE DE\n       JOIN\n       SENSOR SE ON SE.id_device == DE.id_device\n WHERE EXISTS (\n           SELECT 1\n             FROM SENSOR_TEMPERATURE\n            WHERE id_sensor = SE.id_sensor\n       );\n",
        "name": "Load devices",
        "x": 380,
        "y": 80,
        "wires": [
            [
                "3275df79b545312c"
            ]
        ]
    },
    {
        "id": "abc828f5f9afb920",
        "type": "inject",
        "z": "46d1b53664c89cde",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "72",
        "payloadType": "num",
        "x": 540,
        "y": 130,
        "wires": [
            [
                "3015306811712d47"
            ]
        ]
    },
    {
        "id": "3015306811712d47",
        "type": "ui-gauge",
        "z": "46d1b53664c89cde",
        "name": "Temperature",
        "group": "5b69d242410edd23",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "gauge-34",
        "gstyle": "needle",
        "title": "gauge",
        "units": "°F",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#3d10e0"
            },
            {
                "from": "65",
                "color": "#00ff4c"
            },
            {
                "from": "73",
                "color": "#ea5353"
            }
        ],
        "min": "0",
        "max": "100",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 700,
        "y": 130,
        "wires": []
    },
    {
        "id": "2793124b2d1a40d4",
        "type": "ui-form",
        "z": "46d1b53664c89cde",
        "name": "",
        "group": "5b69d242410edd23",
        "label": "",
        "order": 2,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Temp",
                "key": "Temp",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "test",
                "key": "test",
                "type": "text",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "Temp": "",
            "test": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "clear",
        "resetOnSubmit": false,
        "topic": "payload",
        "topicType": "msg",
        "splitLayout": true,
        "className": "",
        "x": 340,
        "y": 190,
        "wires": [
            [
                "74d8a82b9af45c89"
            ]
        ]
    },
    {
        "id": "74d8a82b9af45c89",
        "type": "change",
        "z": "46d1b53664c89cde",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.Temp",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 510,
        "y": 190,
        "wires": [
            [
                "97a92a17a55731fc"
            ]
        ]
    },
    {
        "id": "97a92a17a55731fc",
        "type": "ui-gauge",
        "z": "46d1b53664c89cde",
        "name": "Temperature",
        "group": "5b69d242410edd23",
        "order": 3,
        "width": 0,
        "height": 0,
        "gtype": "gauge-34",
        "gstyle": "needle",
        "title": "gauge",
        "units": "°F",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#3d10e0"
            },
            {
                "from": "65",
                "color": "#00ff4c"
            },
            {
                "from": "73",
                "color": "#ea5353"
            }
        ],
        "min": "0",
        "max": "100",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 700,
        "y": 190,
        "wires": []
    },
    {
        "id": "bd22eb640e7d9b5a",
        "type": "ui-text-input",
        "z": "46d1b53664c89cde",
        "group": "5b69d242410edd23",
        "name": "Temp Setpoint",
        "label": "Number",
        "order": 4,
        "width": 0,
        "height": 0,
        "topic": "topic",
        "topicType": "msg",
        "mode": "number",
        "delay": 300,
        "passthru": false,
        "sendOnDelay": false,
        "sendOnBlur": true,
        "sendOnEnter": true,
        "className": "",
        "x": 510,
        "y": 250,
        "wires": [
            [
                "fba784d729757a93"
            ]
        ]
    },
    {
        "id": "fba784d729757a93",
        "type": "debug",
        "z": "46d1b53664c89cde",
        "name": "debug 19",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 250,
        "wires": []
    },
    {
        "id": "a44261b22c1dc210",
        "type": "ui-button",
        "z": "46d1b53664c89cde",
        "group": "5b69d242410edd23",
        "name": "",
        "label": "Enter",
        "order": 5,
        "width": 0,
        "height": 0,
        "emulateClick": false,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "iconPosition": "left",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 340,
        "y": 250,
        "wires": [
            [
                "bd22eb640e7d9b5a"
            ]
        ]
    },
    {
        "id": "dea03c4d76d37dc7",
        "type": "ui-dropdown",
        "z": "46d1b53664c89cde",
        "group": "5b69d242410edd23",
        "name": "Speed Setting",
        "label": "Select Option:",
        "tooltip": "",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "Low Speed Setting",
                "value": "23",
                "type": "str"
            },
            {
                "label": "Medium Speed Setting",
                "value": "28",
                "type": "str"
            },
            {
                "label": "High Speed Setting",
                "value": "32",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 510,
        "y": 310,
        "wires": [
            [
                "8c2a2d046eedd247"
            ]
        ]
    },
    {
        "id": "8c2a2d046eedd247",
        "type": "debug",
        "z": "46d1b53664c89cde",
        "name": "debug 20",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 310,
        "wires": []
    },
    {
        "id": "2bfc6860bec256ca",
        "type": "inject",
        "z": "46d1b53664c89cde",
        "name": "",
        "props": [
            {
                "p": "options",
                "v": "[{\"value\":\"cheddar\",\"label\":\"Cheddar\"},{\"value\":\"brie\",\"label\":\"Brie\"},{\"value\":\"parmesan\",\"label\":\"Parmesan\"},{\"value\":\"gruyere\",\"label\":\"Gruyere\"}]",
                "vt": "json"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 340,
        "y": 410,
        "wires": [
            [
                "bd0f7443cbe4e922"
            ]
        ]
    },
    {
        "id": "bd0f7443cbe4e922",
        "type": "ui-dropdown",
        "z": "46d1b53664c89cde",
        "group": "5b69d242410edd23",
        "name": "",
        "label": "Select Option:",
        "tooltip": "",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 530,
        "y": 410,
        "wires": [
            [
                "ad76572323b4441c"
            ]
        ]
    },
    {
        "id": "ad76572323b4441c",
        "type": "debug",
        "z": "46d1b53664c89cde",
        "name": "debug 21",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 410,
        "wires": []
    },
    {
        "id": "6db2d92cd83dc4de",
        "type": "ui-radio-group",
        "z": "46d1b53664c89cde",
        "group": "5b69d242410edd23",
        "name": "Emotion Meter",
        "label": "Select Option:",
        "order": 0,
        "width": 0,
        "height": 0,
        "columns": 1,
        "passthru": false,
        "options": [
            {
                "label": "Happy",
                "value": "Happy",
                "type": "str"
            },
            {
                "label": "Sad",
                "value": "Sad",
                "type": "str"
            },
            {
                "label": "Scared",
                "value": "Scared",
                "type": "str"
            },
            {
                "label": "Indifferent",
                "value": "Indifferent",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 530,
        "y": 470,
        "wires": [
            [
                "d5c910900992b44e"
            ]
        ]
    },
    {
        "id": "d5c910900992b44e",
        "type": "ui-text",
        "z": "46d1b53664c89cde",
        "group": "5b69d242410edd23",
        "order": 0,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Emotion:",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#717171",
        "className": "",
        "x": 710,
        "y": 470,
        "wires": []
    },
    {
        "id": "70adf93ecf61d5b2",
        "type": "ui-switch",
        "z": "46d1b53664c89cde",
        "name": "",
        "label": "switch",
        "group": "5b69d242410edd23",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": false,
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "className": "",
        "onvalue": "Machine Started",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "Machine Stopped",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "x": 560,
        "y": 530,
        "wires": [
            [
                "65a8f783dc068274"
            ]
        ]
    },
    {
        "id": "65a8f783dc068274",
        "type": "ui-notification",
        "z": "46d1b53664c89cde",
        "ui": "d4c9d9e9b37824ea",
        "position": "top right",
        "colorDefault": true,
        "color": "#000000",
        "displayTime": "3",
        "showCountdown": true,
        "outputs": 0,
        "allowDismiss": true,
        "dismissText": "Close",
        "raw": false,
        "className": "",
        "name": "",
        "x": 740,
        "y": 530,
        "wires": []
    },
    {
        "id": "d54a8f212b0d3625",
        "type": "ui-table",
        "z": "46d1b53664c89cde",
        "group": "5b69d242410edd23",
        "name": "",
        "label": "text",
        "order": 0,
        "width": 0,
        "height": 0,
        "maxrows": 0,
        "autocols": true,
        "selectionType": "click",
        "columns": [],
        "x": 700,
        "y": 570,
        "wires": [
            [
                "19ccec487d960b22"
            ]
        ]
    },
    {
        "id": "f0f3808e4db532b6",
        "type": "inject",
        "z": "46d1b53664c89cde",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[{\"id\":\"abc123\",\"value\":75,\"zip_code\":\"10001\",\"latitude\":40.748817,\"longitude\":-73.985428},{\"id\":\"def456\",\"value\":42,\"zip_code\":\"90210\",\"latitude\":34.0901,\"longitude\":-118.4065},{\"id\":\"ghi789\",\"value\":90,\"zip_code\":\"94103\",\"latitude\":37.7749,\"longitude\":-122.4194}]",
        "payloadType": "json",
        "x": 560,
        "y": 570,
        "wires": [
            [
                "d54a8f212b0d3625"
            ]
        ]
    },
    {
        "id": "89ec46fe0702f9db",
        "type": "ui-chart",
        "z": "46d1b53664c89cde",
        "group": "5b69d242410edd23",
        "name": "",
        "label": "chart",
        "order": 9007199254740991,
        "chartType": "line",
        "category": "location",
        "categoryType": "property",
        "xAxisProperty": "datestamp",
        "xAxisPropertyType": "msg",
        "xAxisType": "time",
        "yAxisProperty": "temp",
        "ymin": "",
        "ymax": "",
        "action": "append",
        "pointShape": "circle",
        "pointRadius": 4,
        "showLegend": true,
        "removeOlder": 1,
        "removeOlderUnit": "3600",
        "removeOlderPoints": "",
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "width": 6,
        "height": 8,
        "className": "",
        "x": 700,
        "y": 630,
        "wires": [
            []
        ]
    },
    {
        "id": "b670822d0031aed5",
        "type": "inject",
        "z": "46d1b53664c89cde",
        "name": "Line chart temp for 3 different locations",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[{\"location\":\"New York\",\"temp\":56,\"datestamp\":1643784000},{\"location\":\"Los Angeles\",\"temp\":67,\"datestamp\":1643784000},{\"location\":\"Chicago\",\"temp\":44,\"datestamp\":1643784000},{\"location\":\"New York\",\"temp\":60,\"datestamp\":1643798400},{\"location\":\"Los Angeles\",\"temp\":71,\"datestamp\":1643798400},{\"location\":\"Chicago\",\"temp\":48,\"datestamp\":1643798400},{\"location\":\"New York\",\"temp\":65,\"datestamp\":1643812800},{\"location\":\"Los Angeles\",\"temp\":74,\"datestamp\":1643812800},{\"location\":\"Chicago\",\"temp\":52,\"datestamp\":1643812800},{\"location\":\"New York\",\"temp\":69,\"datestamp\":1643827200},{\"location\":\"Los Angeles\",\"temp\":77,\"datestamp\":1643827200},{\"location\":\"Chicago\",\"temp\":56,\"datestamp\":1643827200},{\"location\":\"New York\",\"temp\":73,\"datestamp\":1643841600},{\"location\":\"Los Angeles\",\"temp\":80,\"datestamp\":1643841600},{\"location\":\"Chicago\",\"temp\":60,\"datestamp\":1643841600},{\"location\":\"New York\",\"temp\":77,\"datestamp\":1643856000},{\"location\":\"Los Angeles\",\"temp\":82,\"datestamp\":1643856000},{\"location\":\"Chicago\",\"temp\":64,\"datestamp\":1643856000},{\"location\":\"New York\",\"temp\":80,\"datestamp\":1643870400},{\"location\":\"Los Angeles\",\"temp\":84,\"datestamp\":1643870400},{\"location\":\"Chicago\",\"temp\":68,\"datestamp\":1643870400},{\"location\":\"New York\",\"temp\":83,\"datestamp\":1643884800},{\"location\":\"Los Angeles\",\"temp\":86,\"datestamp\":1643884800},{\"location\":\"Chicago\",\"temp\":72,\"datestamp\":1643884800},{\"location\":\"New York\",\"temp\":86,\"datestamp\":1643899200},{\"location\":\"Los Angeles\",\"temp\":88,\"datestamp\":1643899200},{\"location\":\"Chicago\",\"temp\":76,\"datestamp\":1643899200},{\"location\":\"New York\",\"temp\":89,\"datestamp\":1643913600},{\"location\":\"Los Angeles\",\"temp\":89,\"datestamp\":1643913600},{\"location\":\"Chicago\",\"temp\":80,\"datestamp\":1643913600},{\"location\":\"New York\",\"temp\":89,\"datestamp\":1643928000},{\"location\":\"Los Angeles\",\"temp\":88,\"datestamp\":1643928000},{\"location\":\"Chicago\",\"temp\":84,\"datestamp\":1643928000},{\"location\":\"New York\",\"temp\":86,\"datestamp\":1643942400},{\"location\":\"Los Angeles\",\"temp\":86,\"datestamp\":1643942400},{\"location\":\"Chicago\",\"temp\":88,\"datestamp\":1643942400},{\"location\":\"New York\",\"temp\":83,\"datestamp\":1643956800},{\"location\":\"Los Angeles\",\"temp\":84,\"datestamp\":1643956800},{\"location\":\"Chicago\",\"temp\":92,\"datestamp\":1643956800},{\"location\":\"New York\",\"temp\":79,\"datestamp\":1643971200},{\"location\":\"Los Angeles\",\"temp\":82,\"datestamp\":1643971200},{\"location\":\"Chicago\",\"temp\":96,\"datestamp\":1643971200},{\"location\":\"New York\",\"temp\":73,\"datestamp\":1643985600},{\"location\":\"Los Angeles\",\"temp\":80,\"datestamp\":1643985600},{\"location\":\"Chicago\",\"temp\":100,\"datestamp\":1643985600},{\"location\":\"New York\",\"temp\":66,\"datestamp\":1644000000},{\"location\":\"Los Angeles\",\"temp\":78,\"datestamp\":1644000000},{\"location\":\"Chicago\",\"temp\":96,\"datestamp\":1644000000},{\"location\":\"New York\",\"temp\":59,\"datestamp\":1644014400},{\"location\":\"Los Angeles\",\"temp\":76,\"datestamp\":1644014400},{\"location\":\"Chicago\",\"temp\":92,\"datestamp\":1644014400},{\"location\":\"New York\",\"temp\":53,\"datestamp\":1644028800},{\"location\":\"Los Angeles\",\"temp\":74,\"datestamp\":1644028800},{\"location\":\"Chicago\",\"temp\":88,\"datestamp\":1644028800},{\"location\":\"New York\",\"temp\":47,\"datestamp\":1644043200},{\"location\":\"Los Angeles\",\"temp\":72,\"datestamp\":1644043200},{\"location\":\"Chicago\",\"temp\":84,\"datestamp\":1644043200},{\"location\":\"New York\",\"temp\":42,\"datestamp\":1644057600},{\"location\":\"Los Angeles\",\"temp\":70,\"datestamp\":1644057600},{\"location\":\"Chicago\",\"temp\":80,\"datestamp\":1644057600},{\"location\":\"New York\",\"temp\":39,\"datestamp\":1644072000},{\"location\":\"Los Angeles\",\"temp\":68,\"datestamp\":1644072000},{\"location\":\"Chicago\",\"temp\":76,\"datestamp\":1644072000},{\"location\":\"New York\",\"temp\":37,\"datestamp\":1644086400},{\"location\":\"Los Angeles\",\"temp\":66,\"datestamp\":1644086400},{\"location\":\"Chicago\",\"temp\":72,\"datestamp\":1644086400},{\"location\":\"New York\",\"temp\":36,\"datestamp\":1644100800},{\"location\":\"Los Angeles\",\"temp\":64,\"datestamp\":1644100800},{\"location\":\"Chicago\",\"temp\":68,\"datestamp\":1644100800},{\"location\":\"New York\",\"temp\":37,\"datestamp\":1644115200},{\"location\":\"Los Angeles\",\"temp\":62,\"datestamp\":1644115200},{\"location\":\"Chicago\",\"temp\":64,\"datestamp\":1644115200}]",
        "payloadType": "json",
        "x": 460,
        "y": 630,
        "wires": [
            [
                "89ec46fe0702f9db"
            ]
        ]
    },
    {
        "id": "d4a63bebb36a9c47",
        "type": "ui-chart",
        "z": "46d1b53664c89cde",
        "group": "5b69d242410edd23",
        "name": "",
        "label": "Sales in Million",
        "order": 9007199254740991,
        "chartType": "bar",
        "category": "location",
        "categoryType": "property",
        "xAxisProperty": "",
        "xAxisPropertyType": "msg",
        "xAxisType": "category",
        "yAxisProperty": "sales_millions",
        "ymin": "",
        "ymax": "",
        "action": "append",
        "pointShape": "circle",
        "pointRadius": 4,
        "showLegend": false,
        "removeOlder": 1,
        "removeOlderUnit": "3600",
        "removeOlderPoints": "",
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "width": 6,
        "height": 8,
        "className": "",
        "x": 730,
        "y": 690,
        "wires": [
            []
        ]
    },
    {
        "id": "f42c6b4544b22381",
        "type": "inject",
        "z": "46d1b53664c89cde",
        "name": "Bar Chart for Sales",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[{\"location\":\"New York\",\"sales_millions\":3.2},{\"location\":\"Los Angeles\",\"sales_millions\":2.5},{\"location\":\"Chicago\",\"sales_millions\":1.8},{\"location\":\"Houston\",\"sales_millions\":2.9},{\"location\":\"Miami\",\"sales_millions\":2.1}]",
        "payloadType": "json",
        "x": 460,
        "y": 690,
        "wires": [
            [
                "d4a63bebb36a9c47"
            ]
        ]
    },
    {
        "id": "acaec4d7853239c7",
        "type": "ui-chart",
        "z": "46d1b53664c89cde",
        "group": "5b69d242410edd23",
        "name": "",
        "label": "chart",
        "order": 9007199254740991,
        "chartType": "scatter",
        "category": "",
        "categoryType": "str",
        "xAxisProperty": "x",
        "xAxisPropertyType": "msg",
        "xAxisType": "linear",
        "yAxisProperty": "y",
        "ymin": "",
        "ymax": "",
        "action": "replace",
        "pointShape": "circle",
        "pointRadius": 4,
        "showLegend": true,
        "removeOlder": 1,
        "removeOlderUnit": "3600",
        "removeOlderPoints": "",
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "width": 6,
        "height": 8,
        "className": "",
        "x": 700,
        "y": 750,
        "wires": [
            []
        ]
    },
    {
        "id": "a8f5b245173d37a3",
        "type": "inject",
        "z": "46d1b53664c89cde",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[{\"x\":0.5,\"y\":45.2},{\"x\":1.3,\"y\":48.7},{\"x\":2.1,\"y\":52.4},{\"x\":3.7,\"y\":56.8},{\"x\":4.2,\"y\":60.3},{\"x\":5.5,\"y\":63.6},{\"x\":6.2,\"y\":67.1},{\"x\":7.3,\"y\":69.5},{\"x\":8.4,\"y\":71.9},{\"x\":9.1,\"y\":74.3},{\"x\":10,\"y\":75.7},{\"x\":10.7,\"y\":76.9},{\"x\":11.5,\"y\":78.2},{\"x\":12.2,\"y\":79.6},{\"x\":13.4,\"y\":81.1},{\"x\":14.7,\"y\":82.9},{\"x\":15.1,\"y\":84.1},{\"x\":16.5,\"y\":85.3},{\"x\":17.3,\"y\":86.5},{\"x\":18.6,\"y\":87.6},{\"x\":19.2,\"y\":88.7},{\"x\":20.4,\"y\":89.7},{\"x\":21.1,\"y\":90.6},{\"x\":22.3,\"y\":91.4},{\"x\":23.7,\"y\":92.1},{\"x\":24.2,\"y\":92.8},{\"x\":25.6,\"y\":93.4},{\"x\":26.3,\"y\":94},{\"x\":27.5,\"y\":94.5},{\"x\":28.1,\"y\":94.9},{\"x\":29.4,\"y\":95.2},{\"x\":30.2,\"y\":95.5},{\"x\":31.6,\"y\":95.7},{\"x\":32.3,\"y\":95.8},{\"x\":33.5,\"y\":95.9},{\"x\":34.2,\"y\":96},{\"x\":35.4,\"y\":96},{\"x\":36.1,\"y\":96},{\"x\":37.3,\"y\":95.9},{\"x\":38.7,\"y\":95.8},{\"x\":39.2,\"y\":95.6},{\"x\":40.5,\"y\":95.4},{\"x\":41.2,\"y\":95.1},{\"x\":42.4,\"y\":94.7},{\"x\":43.7,\"y\":94.3},{\"x\":44.1,\"y\":93.8},{\"x\":45.5,\"y\":93.3},{\"x\":46.3,\"y\":92.8},{\"x\":47.6,\"y\":92.2},{\"x\":48.1,\"y\":91.6},{\"x\":49.4,\"y\":91},{\"x\":50.2,\"y\":90.3},{\"x\":51.5,\"y\":89.6},{\"x\":52.2,\"y\":88.8},{\"x\":53.4,\"y\":88},{\"x\":54.7,\"y\":87.2},{\"x\":55.1,\"y\":86.3},{\"x\":56.5,\"y\":85.4},{\"x\":57.3,\"y\":84.4},{\"x\":58.6,\"y\":83.4},{\"x\":59.2,\"y\":82.4},{\"x\":60.4,\"y\":81.3},{\"x\":61.1,\"y\":80.2},{\"x\":62.3,\"y\":79},{\"x\":63.7,\"y\":77.8},{\"x\":64.2,\"y\":76.6},{\"x\":65.6,\"y\":75.4},{\"x\":66.3,\"y\":74.1},{\"x\":67.5,\"y\":72.8},{\"x\":68.1,\"y\":71.5},{\"x\":69.4,\"y\":70.1},{\"x\":70.2,\"y\":68.7},{\"x\":71.6,\"y\":67.3},{\"x\":72.3,\"y\":65.8},{\"x\":73.5,\"y\":64.3},{\"x\":74.2,\"y\":62.8},{\"x\":75.4,\"y\":61.2},{\"x\":76.7,\"y\":59.6},{\"x\":77.1,\"y\":58},{\"x\":78.5,\"y\":56.4},{\"x\":79.3,\"y\":54.8},{\"x\":80.6,\"y\":53.1},{\"x\":81.2,\"y\":51.4},{\"x\":82.4,\"y\":49.7},{\"x\":83.7,\"y\":47.9},{\"x\":84.1,\"y\":46.2},{\"x\":85.5,\"y\":44.4},{\"x\":86.3,\"y\":42.6},{\"x\":87.6,\"y\":40.8},{\"x\":88.1,\"y\":39},{\"x\":89.4,\"y\":37.1},{\"x\":90.2,\"y\":35.3},{\"x\":91.6,\"y\":33.4},{\"x\":92.3,\"y\":31.6},{\"x\":93.5,\"y\":29.7},{\"x\":94.2,\"y\":27.8},{\"x\":95.4,\"y\":25.9},{\"x\":96.7,\"y\":24},{\"x\":97.1,\"y\":22.1},{\"x\":98.5,\"y\":20.2},{\"x\":99.3,\"y\":18.3},{\"x\":100,\"y\":16.4}]",
        "payloadType": "json",
        "x": 500,
        "y": 750,
        "wires": [
            [
                "acaec4d7853239c7"
            ]
        ]
    },
    {
        "id": "8b467ccdc8767eb9",
        "type": "ui-markdown",
        "z": "46d1b53664c89cde",
        "group": "5b69d242410edd23",
        "name": "",
        "order": 0,
        "width": 0,
        "height": 0,
        "content": "# Dashboard 2.0 Documentation\n\n## Quick start Guides Below:\n\n[Getting Started](https://dashboard.flowfuse.com/getting-started.html)\n\n[Migration Guide](https://dashboard.flowfuse.com/user/migration.html)\n\n[UI Template Examples](https://dashboard.flowfuse.com/user/template-examples.html)\n\n[Charts](https://dashboard.flowfuse.com/nodes/widgets/ui-chart.html)\n\n## [Issues](https://github.com/FlowFuse/node-red-dashboard/issues)\n\n## [Contributions](https://dashboard.flowfuse.com/contributing/)\n\n## [FlowFuse](https://flowfuse.com/)\n",
        "className": "",
        "x": 720,
        "y": 810,
        "wires": [
            []
        ]
    },
    {
        "id": "19ccec487d960b22",
        "type": "debug",
        "z": "46d1b53664c89cde",
        "name": "debug 180",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 570,
        "wires": []
    }
]